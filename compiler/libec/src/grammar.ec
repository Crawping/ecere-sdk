/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 109 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     INT128 = 294,
     FLOAT128 = 295,
     LONG = 296,
     SIGNED = 297,
     UNSIGNED = 298,
     FLOAT = 299,
     DOUBLE = 300,
     CONST = 301,
     VOLATILE = 302,
     VOID = 303,
     VALIST = 304,
     STRUCT = 305,
     UNION = 306,
     ENUM = 307,
     ELLIPSIS = 308,
     CASE = 309,
     DEFAULT = 310,
     IF = 311,
     SWITCH = 312,
     WHILE = 313,
     DO = 314,
     FOR = 315,
     GOTO = 316,
     CONTINUE = 317,
     BREAK = 318,
     RETURN = 319,
     IFX = 320,
     ELSE = 321,
     CLASS = 322,
     THISCLASS = 323,
     PROPERTY = 324,
     SETPROP = 325,
     GETPROP = 326,
     NEWOP = 327,
     RENEW = 328,
     DELETE = 329,
     EXT_DECL = 330,
     EXT_STORAGE = 331,
     IMPORT = 332,
     DEFINE = 333,
     VIRTUAL = 334,
     ATTRIB = 335,
     PUBLIC = 336,
     PRIVATE = 337,
     TYPED_OBJECT = 338,
     ANY_OBJECT = 339,
     _INCREF = 340,
     EXTENSION = 341,
     ASM = 342,
     TYPEOF = 343,
     WATCH = 344,
     STOPWATCHING = 345,
     FIREWATCHERS = 346,
     WATCHABLE = 347,
     CLASS_DESIGNER = 348,
     CLASS_NO_EXPANSION = 349,
     CLASS_FIXED = 350,
     ISPROPSET = 351,
     CLASS_DEFAULT_PROPERTY = 352,
     PROPERTY_CATEGORY = 353,
     CLASS_DATA = 354,
     CLASS_PROPERTY = 355,
     SUBCLASS = 356,
     NAMESPACE = 357,
     NEW0OP = 358,
     RENEW0 = 359,
     VAARG = 360,
     DBTABLE = 361,
     DBFIELD = 362,
     DBINDEX = 363,
     DATABASE_OPEN = 364,
     ALIGNOF = 365,
     ATTRIB_DEP = 366,
     __ATTRIB = 367,
     BOOL = 368,
     _BOOL = 369,
     _COMPLEX = 370,
     _IMAGINARY = 371,
     RESTRICT = 372,
     THREAD = 373,
     WIDE_STRING_LITERAL = 374,
     BUILTIN_OFFSETOF = 375
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 39 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 310 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 335 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  303
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   42205

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  146
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  257
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1315
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2188

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   375

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   140,     2,     2,   134,   142,   137,     2,
     124,   125,   121,   138,   129,   139,   132,   141,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   133,   127,
     122,   128,   123,   145,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   135,     2,   136,   143,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   131,   144,   130,   126,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1274,  1276,  1278,  1280,  1282,  1284,
    1286,  1288,  1290,  1292,  1294,  1296,  1301,  1303,  1307,  1311,
    1315,  1319,  1323,  1327,  1329,  1333,  1337,  1341,  1345,  1347,
    1351,  1355,  1359,  1363,  1366,  1368,  1371,  1375,  1379,  1383,
    1387,  1391,  1395,  1399,  1401,  1405,  1409,  1413,  1417,  1421,
    1425,  1429,  1433,  1435,  1439,  1443,  1447,  1451,  1453,  1457,
    1461,  1465,  1469,  1471,  1475,  1479,  1483,  1487,  1489,  1493,
    1497,  1499,  1503,  1507,  1509,  1515,  1521,  1527,  1533,  1539,
    1545,  1551,  1557,  1563,  1569,  1575,  1581,  1587,  1593,  1599,
    1605,  1607,  1611,  1615,  1619,  1623,  1627,  1631,  1635,  1639,
    1641,  1643,  1645,  1647,  1649,  1651,  1653,  1655,  1657,  1659,
    1661,  1663,  1667,  1671,  1674,  1676,  1680,  1684,  1686,  1688,
    1691,  1694,  1698,  1702,  1706,  1710,  1714,  1718,  1722,  1725,
    1728,  1731,  1734,  1737,  1743,  1750,  1757,  1760,  1766,  1768,
    1770,  1772,  1777,  1779,  1783,  1787,  1791,  1795,  1799,  1803,
    1805,  1809,  1813,  1817,  1821,  1823,  1827,  1831,  1835,  1839,
    1841,  1844,  1848,  1852,  1856,  1860,  1864,  1868,  1872,  1874,
    1878,  1882,  1886,  1890,  1894,  1898,  1902,  1906,  1908,  1912,
    1916,  1920,  1924,  1926,  1930,  1934,  1938,  1942,  1944,  1948,
    1952,  1956,  1960,  1962,  1966,  1970,  1972,  1976,  1980,  1982,
    1988,  1994,  2000,  2006,  2011,  2016,  2021,  2026,  2032,  2038,
    2044,  2050,  2055,  2060,  2065,  2070,  2076,  2082,  2088,  2094,
    2100,  2106,  2112,  2118,  2122,  2126,  2129,  2132,  2134,  2138,
    2142,  2146,  2150,  2152,  2155,  2159,  2163,  2166,  2169,  2172,
    2174,  2177,  2181,  2185,  2187,  2189,  2191,  2193,  2195,  2197,
    2199,  2201,  2203,  2205,  2207,  2209,  2211,  2213,  2215,  2217,
    2219,  2223,  2227,  2229,  2233,  2236,  2238,  2241,  2244,  2247,
    2252,  2257,  2261,  2265,  2270,  2276,  2281,  2288,  2295,  2300,
    2306,  2311,  2318,  2325,  2331,  2337,  2340,  2343,  2346,  2352,
    2356,  2362,  2369,  2375,  2383,  2391,  2400,  2409,  2417,  2425,
    2429,  2433,  2437,  2442,  2446,  2452,  2458,  2465,  2473,  2480,
    2485,  2487,  2489,  2491,  2493,  2495,  2497,  2499,  2501,  2503,
    2506,  2508,  2510,  2512,  2514,  2516,  2518,  2520,  2522,  2524,
    2526,  2528,  2530,  2532,  2534,  2536,  2538,  2540,  2542,  2547,
    2552,  2557,  2559,  2561,  2563,  2565,  2567,  2569,  2571,  2573,
    2575,  2577,  2579,  2581,  2583,  2585,  2587,  2589,  2591,  2593,
    2595,  2597,  2599,  2601,  2603,  2605,  2607,  2609,  2611,  2613,
    2615,  2620,  2625,  2630,  2632,  2634,  2637,  2640,  2644,  2650,
    2653,  2657,  2663,  2669,  2675,  2677,  2681,  2684,  2687,  2691,
    2695,  2698,  2702,  2706,  2711,  2715,  2719,  2723,  2727,  2731,
    2735,  2740,  2745,  2750,  2752,  2754,  2759,  2763,  2766,  2770,
    2774,  2778,  2782,  2786,  2790,  2794,  2798,  2802,  2806,  2810,
    2814,  2816,  2818,  2820,  2823,  2825,  2828,  2830,  2833,  2835,
    2838,  2840,  2843,  2845,  2848,  2850,  2853,  2855,  2858,  2860,
    2863,  2865,  2868,  2870,  2873,  2875,  2878,  2880,  2883,  2885,
    2888,  2890,  2893,  2895,  2898,  2900,  2903,  2905,  2908,  2910,
    2913,  2915,  2918,  2920,  2923,  2925,  2928,  2930,  2933,  2935,
    2938,  2940,  2943,  2945,  2948,  2950,  2952,  2954,  2957,  2959,
    2962,  2964,  2967,  2969,  2972,  2977,  2983,  2985,  2987,  2989,
    2992,  2994,  2997,  2999,  3002,  3004,  3007,  3012,  3018,  3020,
    3023,  3025,  3028,  3030,  3033,  3035,  3038,  3040,  3043,  3045,
    3048,  3053,  3059,  3061,  3064,  3066,  3069,  3071,  3074,  3076,
    3079,  3081,  3084,  3086,  3089,  3094,  3100,  3104,  3108,  3110,
    3114,  3118,  3122,  3126,  3128,  3130,  3132,  3137,  3142,  3147,
    3151,  3156,  3161,  3166,  3170,  3172,  3176,  3181,  3185,  3190,
    3195,  3200,  3205,  3209,  3212,  3216,  3220,  3224,  3228,  3231,
    3234,  3237,  3241,  3246,  3248,  3250,  3253,  3257,  3261,  3265,
    3269,  3272,  3275,  3278,  3282,  3287,  3289,  3291,  3293,  3295,
    3297,  3302,  3304,  3306,  3308,  3310,  3312,  3314,  3316,  3318,
    3320,  3325,  3327,  3330,  3334,  3341,  3347,  3351,  3356,  3359,
    3363,  3367,  3371,  3375,  3380,  3385,  3390,  3393,  3397,  3401,
    3405,  3410,  3415,  3419,  3424,  3427,  3431,  3435,  3439,  3444,
    3449,  3451,  3454,  3457,  3461,  3463,  3465,  3468,  3471,  3475,
    3477,  3479,  3482,  3485,  3489,  3491,  3494,  3498,  3501,  3504,
    3506,  3509,  3513,  3516,  3518,  3521,  3525,  3529,  3531,  3534,
    3538,  3542,  3544,  3547,  3551,  3555,  3557,  3560,  3564,  3568,
    3570,  3573,  3577,  3581,  3583,  3587,  3592,  3594,  3599,  3602,
    3608,  3612,  3614,  3616,  3618,  3620,  3622,  3624,  3628,  3632,
    3635,  3638,  3640,  3642,  3646,  3649,  3653,  3655,  3659,  3663,
    3667,  3671,  3675,  3679,  3683,  3685,  3688,  3692,  3696,  3698,
    3701,  3703,  3706,  3709,  3712,  3715,  3719,  3721,  3723,  3727,
    3731,  3733,  3737,  3742,  3746,  3751,  3755,  3759,  3764,  3768,
    3773,  3775,  3779,  3783,  3788,  3792,  3796,  3800,  3805,  3807,
    3811,  3815,  3819,  3823,  3827,  3829,  3833,  3836,  3838,  3840,
    3842,  3844,  3846,  3849,  3851,  3853,  3855,  3857,  3860,  3863,
    3866,  3868,  3870,  3872,  3874,  3876,  3879,  3881,  3883,  3888,
    3896,  3898,  3902,  3903,  3910,  3919,  3930,  3943,  3952,  3963,
    3974,  3980,  3988,  3998,  4010,  4018,  4028,  4038,  4042,  4047,
    4052,  4056,  4060,  4064,  4069,  4074,  4078,  4082,  4086,  4091,
    4096,  4100,  4103,  4107,  4110,  4114,  4119,  4124,  4128,  4132,
    4134,  4136,  4138,  4140,  4142,  4145,  4149,  4152,  4155,  4158,
    4162,  4166,  4169,  4175,  4182,  4185,  4188,  4191,  4194,  4197,
    4200,  4202,  4205,  4208,  4212,  4214,  4217,  4219,  4222,  4225,
    4227,  4230,  4233,  4236,  4239,  4242,  4245,  4247,  4249,  4252,
    4255,  4257,  4259,  4262,  4265,  4267,  4270,  4273,  4275,  4278,
    4280,  4283,  4286,  4292,  4298,  4306,  4314,  4320,  4326,  4330,
    4333,  4339,  4344,  4349,  4357,  4364,  4371,  4377,  4385,  4392,
    4397,  4405,  4415,  4419,  4424,  4429,  4435,  4441,  4448,  4456,
    4463,  4470,  4476,  4482,  4487,  4491,  4494,  4496,  4499,  4504,
    4508,  4514,  4519,  4523,  4526,  4529,  4532,  4536,  4540,  4544,
    4548,  4551,  4554,  4556,  4558,  4563,  4567,  4572,  4576,  4580,
    4583,  4588,  4592,  4597,  4601,  4605,  4608,  4610,  4613,  4615,
    4617,  4620,  4622,  4625,  4629,  4633,  4635,  4638,  4641,  4644,
    4648,  4653,  4658,  4661,  4664,  4667,  4670,  4672,  4675,  4677,
    4680,  4682,  4685,  4688,  4690,  4693,  4695,  4698,  4701,  4704,
    4707,  4709,  4712,  4715,  4719,  4721,  4723,  4724,  4731,  4738,
    4744,  4749,  4751,  4754,  4757,  4759,  4763,  4767,  4772,  4774,
    4776,  4779,  4782,  4789,  4796,  4803
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     392,     0,    -1,   218,   121,    -1,   218,   122,    -1,   151,
      -1,   218,   218,    -1,    28,    -1,    28,    -1,   149,    -1,
     149,   122,   212,   123,    -1,   149,   122,   212,    11,    -1,
     301,   336,    -1,   334,    -1,   301,   124,   125,    -1,   126,
     301,   124,   125,    -1,    79,   301,   336,    -1,    79,   334,
      -1,   301,   337,    -1,   335,    -1,    79,   301,   337,    -1,
      79,   335,    -1,   152,   376,    -1,   155,   376,    -1,   155,
     127,    -1,   153,   376,    -1,   154,   376,    -1,   152,   127,
      -1,   152,   326,   127,    -1,   152,   377,    -1,   156,    -1,
     155,   377,    -1,   157,    -1,   157,   127,    -1,   300,   336,
      -1,   300,   338,    -1,   300,   337,    -1,   160,   376,    -1,
     160,   377,    -1,   161,    -1,   160,    -1,   226,   128,   341,
      -1,   341,    -1,   226,   128,   342,    -1,   226,   128,     1,
      -1,   342,    -1,   164,    -1,   166,   129,   164,    -1,   167,
     129,   164,    -1,   165,    -1,   166,   129,   165,    -1,   167,
     129,   165,    -1,   166,   129,     1,    -1,   167,   129,     1,
      -1,   129,    -1,   166,   127,    -1,   167,   127,    -1,   168,
      -1,   162,    -1,   171,   168,    -1,   171,   162,    -1,   169,
     168,    -1,   169,   162,    -1,   171,   127,    -1,   169,   127,
      -1,   127,    -1,   169,    -1,   166,    -1,   169,   166,    -1,
     171,   166,    -1,   163,    -1,   170,   163,    -1,   171,   163,
      -1,   169,   163,    -1,   169,   167,    -1,   167,    -1,   166,
       1,    -1,   173,   130,    -1,   173,     1,   130,    -1,   300,
     218,   131,   171,    -1,   300,   218,   131,   170,     1,    -1,
     300,   218,   131,   170,    -1,   300,   218,   131,    -1,   300,
     218,   131,     1,    -1,   175,   130,    -1,   175,     1,   130,
      -1,   301,   218,   131,   171,    -1,   301,   218,   131,   170,
       1,    -1,   301,   218,   131,   170,    -1,   301,   218,   131,
      -1,   301,   218,   131,     1,    -1,   302,   218,   131,   170,
     130,    -1,   302,   218,   131,   171,   130,    -1,   302,   218,
     131,   130,    -1,   178,   130,    -1,   178,     1,   130,    -1,
     151,   131,   170,    -1,   218,   131,   170,    -1,   151,   131,
     171,    -1,   151,   131,    -1,   151,   131,   170,     1,    -1,
     151,   131,     1,    -1,   218,   131,   171,    -1,   218,   131,
      -1,   218,   131,   170,     1,    -1,   218,   131,     1,    -1,
     180,   130,    -1,   180,     1,   130,    -1,   131,   171,    -1,
     131,   170,     1,    -1,   131,     1,    -1,   131,    -1,   131,
     170,    -1,   226,   128,   341,    -1,   226,   128,   342,    -1,
     226,   128,     1,    -1,   226,     1,    -1,   181,    -1,   183,
     129,   181,    -1,   184,   129,   181,    -1,   182,    -1,   183,
     129,   182,    -1,   184,   129,   182,    -1,   183,     1,    -1,
      69,   306,   218,   131,    -1,    69,   306,   330,   218,   131,
      -1,    69,   306,   131,    -1,    69,   306,   330,   131,    -1,
      69,     1,   131,    -1,   185,    -1,   186,    70,   376,    -1,
     186,    71,   376,    -1,   186,    96,   376,    -1,   186,    92,
      -1,   186,    98,   220,    -1,   186,   130,    -1,   100,   306,
     218,   131,    -1,   100,   306,   330,   218,   131,    -1,   100,
     306,   131,    -1,   100,   306,   330,   131,    -1,   100,     1,
     131,    -1,   188,    -1,   189,    70,   376,    -1,   189,    71,
     376,    -1,   189,   130,    -1,   218,    -1,   191,   218,    -1,
     191,   376,    -1,    74,   376,    -1,   192,    -1,   193,   192,
      -1,    89,   124,   191,   125,   376,    -1,    89,   124,   245,
     125,   131,   193,   130,    -1,   245,   132,    89,   124,   245,
     125,   131,   193,   130,    -1,    90,   124,   245,   129,   191,
     125,    -1,   245,   132,    90,   124,   245,   129,   191,   125,
      -1,    90,   124,   245,   125,    -1,   245,   132,    90,   124,
     245,   125,    -1,    91,    -1,    91,   191,    -1,   226,   132,
      91,    -1,   245,   132,    91,   191,    -1,   199,   127,    -1,
     183,   127,    -1,   158,    -1,   187,    -1,   364,   158,    -1,
     364,   187,    -1,   190,    -1,    92,    -1,    94,    -1,    95,
      -1,   100,   124,   218,   125,   128,   341,   127,    -1,   127,
      -1,   364,   133,    -1,   364,   124,   218,   125,    -1,   159,
      -1,   301,    -1,   301,   288,    -1,   364,   301,   288,    -1,
     364,   301,    -1,   364,   177,    -1,   364,   174,    -1,    99,
     301,   288,    -1,   194,    -1,    93,   218,    -1,    93,   151,
      -1,    97,   218,    -1,   177,    -1,   174,    -1,   183,    -1,
     175,     1,    -1,   178,     1,    -1,   364,   159,    -1,   364,
     175,     1,    -1,   364,   178,     1,    -1,   184,    -1,   198,
      -1,   200,   198,    -1,   201,   198,    -1,   199,    -1,   200,
       1,    -1,   201,     1,    -1,   200,   199,    -1,   201,   199,
      -1,   301,    -1,   301,   330,    -1,   301,    -1,   301,   330,
      -1,    67,   218,    -1,    67,   218,   128,   203,    -1,    67,
     218,   133,   202,    -1,    67,   218,   133,   202,   128,   203,
      -1,    67,   150,    -1,    67,   150,   128,   203,    -1,    67,
     150,   133,   202,    -1,    67,   150,   133,   202,   128,   203,
      -1,   218,    -1,   218,    -1,   218,   128,   205,    -1,   235,
      -1,   301,   218,   128,   207,    -1,   301,   330,   218,   128,
     207,    -1,   204,    -1,   206,    -1,   208,    -1,   209,    -1,
     210,   129,   209,    -1,   207,    -1,   205,    -1,   203,    -1,
     218,   128,   207,    -1,   218,   128,   205,    -1,   218,   128,
     203,    -1,   211,    -1,   212,   129,   211,    -1,    67,    -1,
     213,   218,    -1,   213,   149,    -1,   218,   213,   218,    -1,
     218,   213,   149,    -1,   213,   218,   122,   210,   123,    -1,
     213,   149,   122,   210,   123,    -1,   218,   213,   218,   122,
     210,   123,    -1,   218,   213,   149,   122,   210,   123,    -1,
     217,   130,    -1,   216,   127,    -1,   214,   131,   130,    -1,
     216,   131,   130,    -1,   213,   218,   127,    -1,   213,   148,
     127,    -1,   214,   133,   305,    -1,   214,   131,   201,    -1,
     216,   131,   201,    -1,   214,   131,   200,    -1,   216,   131,
     200,    -1,   214,   131,     1,    -1,   216,   131,     1,    -1,
       3,    -1,   222,    -1,   124,   247,   125,    -1,   387,    -1,
     134,   387,    -1,   134,   387,   132,   387,    -1,     4,    -1,
     218,    -1,   177,    -1,    86,   124,   376,   125,    -1,    86,
     124,   247,   125,    -1,    86,   124,   348,   125,   339,    -1,
      86,   124,   348,   125,   124,   348,   125,   339,    -1,   221,
     218,    -1,   221,    -1,   220,    -1,   119,    -1,   124,   125,
      -1,    72,   308,   331,   135,   267,   136,    -1,    72,   308,
     331,   135,   268,   136,    -1,    72,   308,   135,   267,   136,
      -1,    72,   308,   135,   268,   136,    -1,   103,   308,   331,
     135,   267,   136,    -1,   103,   308,   331,   135,   268,   136,
      -1,   103,   308,   135,   267,   136,    -1,   103,   308,   135,
     268,   136,    -1,    73,   267,   307,   331,   135,   267,   136,
      -1,    73,   267,   307,   331,   135,   268,   136,    -1,    73,
     267,   307,   135,   267,   136,    -1,    73,   267,   307,   135,
     268,   136,    -1,   104,   267,   307,   331,   135,   267,   136,
      -1,   104,   267,   307,   331,   135,   268,   136,    -1,   104,
     267,   307,   135,   267,   136,    -1,   104,   267,   307,   135,
     268,   136,    -1,    67,   124,   300,   125,    -1,    67,   124,
     300,   330,   125,    -1,    67,   124,   218,   125,    -1,   105,
     124,   245,   129,   348,   125,    -1,    99,   124,   218,   125,
      -1,   399,    -1,   400,    -1,   401,    -1,   402,    -1,   135,
     227,   136,    -1,   135,   136,    -1,   179,    -1,   180,     1,
      -1,   124,   247,    -1,   124,   265,    -1,   219,    -1,   226,
     135,   247,   136,    -1,   226,   135,   265,   136,    -1,   226,
     124,   125,    -1,   226,   124,   227,   125,    -1,   226,   124,
     228,   125,    -1,   226,   132,   218,    -1,   226,     7,   218,
      -1,   226,     8,    -1,   226,     9,    -1,   249,   135,   247,
     136,    -1,   249,   135,   265,   136,    -1,   249,   124,   125,
      -1,   249,   124,   227,   125,    -1,   249,   132,   218,    -1,
     249,     7,   218,    -1,   249,     8,    -1,   249,     9,    -1,
     245,    -1,   223,    -1,   227,   129,   245,    -1,   227,   129,
     223,    -1,   264,    -1,   224,    -1,   227,   129,   264,    -1,
     227,   129,   224,    -1,   227,   129,    -1,     8,   230,    -1,
       9,   230,    -1,   231,   232,    -1,   231,   223,    -1,     6,
     230,    -1,     6,   124,   349,   125,    -1,     6,   124,    67,
     148,   125,    -1,     6,   124,    67,   147,   125,    -1,   110,
     230,    -1,   110,   124,   349,   125,    -1,   120,   124,   349,
     129,   218,   125,    -1,   229,    -1,   226,    -1,   137,    -1,
     121,    -1,   138,    -1,   139,    -1,   126,    -1,   140,    -1,
      74,    -1,    85,    -1,   230,    -1,   124,   348,   125,   232,
      -1,   232,    -1,   233,   121,   232,    -1,   233,   141,   232,
      -1,   233,   142,   232,    -1,   253,   121,   232,    -1,   253,
     141,   232,    -1,   253,   142,   232,    -1,   233,    -1,   234,
     138,   233,    -1,   234,   139,   233,    -1,   254,   138,   233,
      -1,   254,   139,   233,    -1,   234,    -1,   235,    10,   234,
      -1,   235,    11,   234,    -1,   255,    10,   234,    -1,   255,
      11,   234,    -1,   237,   122,    -1,   235,    -1,   236,   235,
      -1,   237,   123,   235,    -1,   237,    12,   235,    -1,   237,
      13,   235,    -1,   256,   122,   235,    -1,   256,   123,   235,
      -1,   256,    12,   235,    -1,   256,    13,   235,    -1,   237,
      -1,   238,    14,   237,    -1,   238,    15,   237,    -1,   257,
      14,   237,    -1,   257,    15,   237,    -1,   238,    14,   223,
      -1,   238,    15,   223,    -1,   257,    14,   223,    -1,   257,
      15,   223,    -1,   238,    -1,   239,   137,   238,    -1,   258,
     137,   238,    -1,   239,   137,   223,    -1,   258,   137,   223,
      -1,   239,    -1,   240,   143,   239,    -1,   259,   143,   239,
      -1,   240,   143,   223,    -1,   259,   143,   223,    -1,   240,
      -1,   241,   144,   240,    -1,   260,   144,   240,    -1,   241,
     144,   223,    -1,   260,   144,   223,    -1,   241,    -1,   242,
      16,   241,    -1,   261,    16,   241,    -1,   242,    -1,   243,
      17,   242,    -1,   262,    17,   242,    -1,   243,    -1,   243,
     145,   247,   133,   244,    -1,   243,   145,   265,   133,   244,
      -1,   262,   145,   247,   133,   244,    -1,   262,   145,   265,
     133,   244,    -1,   243,   145,   248,   133,   244,    -1,   243,
     145,   266,   133,   244,    -1,   262,   145,   248,   133,   244,
      -1,   262,   145,   266,   133,   244,    -1,   243,   145,   247,
     133,   223,    -1,   243,   145,   265,   133,   223,    -1,   262,
     145,   247,   133,   223,    -1,   262,   145,   265,   133,   223,
      -1,   243,   145,   248,   133,   223,    -1,   243,   145,   266,
     133,   223,    -1,   262,   145,   248,   133,   223,    -1,   262,
     145,   266,   133,   223,    -1,   244,    -1,   230,   246,   245,
      -1,   251,   246,   245,    -1,   244,   246,   245,    -1,   263,
     246,   245,    -1,   230,   246,   223,    -1,   251,   246,   223,
      -1,   244,   246,   223,    -1,   263,   246,   223,    -1,   128,
      -1,    18,    -1,    19,    -1,    20,    -1,    21,    -1,    22,
      -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,    27,
      -1,   245,    -1,   247,   129,   245,    -1,   265,   129,   245,
      -1,   265,   125,    -1,   223,    -1,   247,   129,   223,    -1,
     265,   129,   223,    -1,   225,    -1,     1,    -1,   226,     1,
      -1,   178,     1,    -1,   226,     7,     1,    -1,   249,     7,
       1,    -1,   226,   124,   227,    -1,   226,   124,   228,    -1,
     226,   132,     1,    -1,   249,   124,   228,    -1,   249,   132,
       1,    -1,     8,   251,    -1,     9,   251,    -1,   231,   252,
      -1,   231,   224,    -1,     6,   251,    -1,     6,   124,   349,
     125,     1,    -1,     6,   124,    67,   148,   125,     1,    -1,
       6,   124,    67,   147,   125,     1,    -1,   110,   251,    -1,
     110,   124,   349,   125,     1,    -1,   250,    -1,   249,    -1,
     251,    -1,   124,   348,   125,   252,    -1,   252,    -1,   233,
     121,   252,    -1,   233,   141,   252,    -1,   233,   142,   252,
      -1,   253,   121,   252,    -1,   253,   141,   252,    -1,   253,
     142,   252,    -1,   253,    -1,   234,   138,   253,    -1,   234,
     139,   253,    -1,   254,   138,   253,    -1,   254,   139,   253,
      -1,   254,    -1,   235,    10,   254,    -1,   235,    11,   254,
      -1,   255,    10,   254,    -1,   255,    11,   254,    -1,   255,
      -1,   236,   255,    -1,   237,   123,   255,    -1,   237,    12,
     255,    -1,   237,    13,   255,    -1,   256,   122,   255,    -1,
     256,   123,   255,    -1,   256,    12,   255,    -1,   256,    13,
     255,    -1,   256,    -1,   238,    14,   256,    -1,   238,    15,
     256,    -1,   257,    14,   256,    -1,   257,    15,   256,    -1,
     238,    14,   224,    -1,   238,    15,   224,    -1,   257,    14,
     224,    -1,   257,    15,   224,    -1,   257,    -1,   239,   137,
     257,    -1,   258,   137,   257,    -1,   239,   137,   224,    -1,
     258,   137,   224,    -1,   258,    -1,   240,   143,   258,    -1,
     259,   143,   258,    -1,   240,   143,   224,    -1,   259,   143,
     224,    -1,   259,    -1,   241,   144,   259,    -1,   260,   144,
     259,    -1,   241,   144,   224,    -1,   260,   144,   224,    -1,
     260,    -1,   242,    16,   260,    -1,   261,    16,   260,    -1,
     261,    -1,   243,    17,   261,    -1,   262,    17,   261,    -1,
     262,    -1,   243,   145,   247,   133,   262,    -1,   243,   145,
     265,   133,   262,    -1,   262,   145,   247,   133,   262,    -1,
     262,   145,   265,   133,   262,    -1,   243,   145,   247,   133,
      -1,   243,   145,   265,   133,    -1,   262,   145,   247,   133,
      -1,   262,   145,   265,   133,    -1,   243,   145,   248,   133,
     262,    -1,   243,   145,   266,   133,   262,    -1,   262,   145,
     248,   133,   262,    -1,   262,   145,   266,   133,   262,    -1,
     243,   145,   248,   133,    -1,   243,   145,   266,   133,    -1,
     262,   145,   248,   133,    -1,   262,   145,   266,   133,    -1,
     243,   145,   247,   133,   224,    -1,   243,   145,   265,   133,
     224,    -1,   262,   145,   247,   133,   224,    -1,   262,   145,
     265,   133,   224,    -1,   243,   145,   248,   133,   224,    -1,
     243,   145,   266,   133,   224,    -1,   262,   145,   248,   133,
     224,    -1,   262,   145,   266,   133,   224,    -1,   243,   145,
     133,    -1,   262,   145,   133,    -1,   243,   145,    -1,   262,
     145,    -1,   263,    -1,   230,   246,   264,    -1,   251,   246,
     264,    -1,   230,   246,   224,    -1,   251,   246,   224,    -1,
     264,    -1,   245,     1,    -1,   247,   129,   264,    -1,   265,
     129,   264,    -1,   247,   247,    -1,   265,   247,    -1,   247,
     265,    -1,   224,    -1,   223,     1,    -1,   247,   129,   224,
      -1,   265,   129,   224,    -1,   244,    -1,   263,    -1,    29,
      -1,    30,    -1,    31,    -1,   118,    -1,    32,    -1,    33,
      -1,   117,    -1,    29,    -1,    30,    -1,    31,    -1,   118,
      -1,    32,    -1,    33,    -1,   117,    -1,   218,    -1,   218,
     128,   267,    -1,   218,   128,   268,    -1,   271,    -1,   272,
     129,   271,    -1,   272,   129,    -1,    52,    -1,   273,   218,
      -1,   273,   151,    -1,   276,   130,    -1,   273,   218,   131,
     130,    -1,   273,   151,   131,   130,    -1,   273,   131,   272,
      -1,   273,   131,     1,    -1,   273,   218,   131,   272,    -1,
     273,   218,   131,   272,     1,    -1,   273,   218,   131,     1,
      -1,   273,   218,   131,   272,   127,   200,    -1,   273,   218,
     131,   272,   127,   201,    -1,   273,   151,   131,   272,    -1,
     273,   151,   131,   272,     1,    -1,   273,   151,   131,     1,
      -1,   273,   151,   131,   272,   127,   200,    -1,   273,   151,
     131,   272,   127,   201,    -1,   273,   218,   131,   272,   127,
      -1,   273,   151,   131,   272,   127,    -1,   273,   218,    -1,
     273,   151,    -1,   279,   130,    -1,   277,   133,   305,   131,
     130,    -1,   277,   131,   130,    -1,   277,   133,   305,   131,
     272,    -1,   277,   133,   305,   131,   272,     1,    -1,   277,
     133,   305,   131,     1,    -1,   277,   133,   305,   131,   272,
     127,   200,    -1,   277,   133,   305,   131,   272,   127,   201,
      -1,   277,   133,   305,   131,   272,     1,   127,   200,    -1,
     277,   133,   305,   131,   272,     1,   127,   201,    -1,   277,
     133,   305,   131,     1,   127,   200,    -1,   277,   133,   305,
     131,     1,   127,   201,    -1,   273,   131,   272,    -1,   273,
     131,     1,    -1,   277,   131,   272,    -1,   277,   131,   272,
       1,    -1,   277,   131,     1,    -1,   277,   131,   272,   127,
     200,    -1,   277,   131,   272,   127,   201,    -1,   277,   133,
     305,   131,   272,   127,    -1,   277,   133,   305,   131,   272,
       1,   127,    -1,   277,   133,   305,   131,     1,   127,    -1,
     277,   131,   272,   127,    -1,   278,    -1,   295,    -1,   279,
      -1,   296,    -1,   321,    -1,    46,    -1,    47,    -1,   282,
      -1,   283,    -1,   284,   283,    -1,    48,    -1,    34,    -1,
      35,    -1,    36,    -1,    37,    -1,    38,    -1,    39,    -1,
      40,    -1,    49,    -1,    41,    -1,    44,    -1,    45,    -1,
      42,    -1,    43,    -1,    86,    -1,   292,    -1,   274,    -1,
     148,    -1,    88,   124,   245,   125,    -1,   101,   124,   148,
     125,    -1,   101,   124,   218,   125,    -1,    68,    -1,    83,
      -1,    84,    -1,   114,    -1,   113,    -1,   115,    -1,   116,
      -1,    48,    -1,    34,    -1,    35,    -1,    36,    -1,    37,
      -1,    38,    -1,    39,    -1,    40,    -1,    49,    -1,    41,
      -1,    44,    -1,    45,    -1,    42,    -1,    43,    -1,    86,
      -1,   292,    -1,   274,    -1,   151,    -1,   114,    -1,   113,
      -1,   115,    -1,   116,    -1,    88,   124,   245,   125,    -1,
     101,   124,   148,   125,    -1,   101,   124,   218,   125,    -1,
      68,    -1,   338,    -1,   338,   326,    -1,   133,   267,    -1,
     338,   133,   267,    -1,   338,   133,   267,   133,   267,    -1,
     133,   268,    -1,   338,   133,   268,    -1,   338,   133,   267,
     133,   268,    -1,   338,   133,   268,   133,   268,    -1,   338,
     133,   268,   133,   267,    -1,   287,    -1,   288,   129,   287,
      -1,   297,   218,    -1,   297,   149,    -1,   297,   321,   218,
      -1,   297,   321,   149,    -1,   291,   130,    -1,   289,   131,
     130,    -1,   297,   131,   130,    -1,   297,   321,   131,   130,
      -1,   289,   131,   200,    -1,   289,   131,   201,    -1,   289,
     131,     1,    -1,   297,   131,   200,    -1,   297,   131,   201,
      -1,   297,   131,     1,    -1,   297,   321,   131,   200,    -1,
     297,   321,   131,   201,    -1,   297,   321,   131,     1,    -1,
     289,    -1,   289,    -1,   289,   122,   210,   123,    -1,   293,
     133,   305,    -1,   296,   130,    -1,   294,   131,   130,    -1,
     293,   131,   130,    -1,   297,   131,   130,    -1,   294,   131,
     200,    -1,   294,   131,   201,    -1,   294,   131,     1,    -1,
     293,   131,   200,    -1,   293,   131,   201,    -1,   293,   131,
       1,    -1,   297,   131,   200,    -1,   297,   131,   201,    -1,
     297,   131,     1,    -1,    50,    -1,    51,    -1,   283,    -1,
     298,   283,    -1,   285,    -1,   298,   285,    -1,   275,    -1,
     298,   275,    -1,   290,    -1,   298,   290,    -1,   283,    -1,
     299,   283,    -1,   285,    -1,   299,   285,    -1,   147,    -1,
     299,   147,    -1,   275,    -1,   299,   275,    -1,   290,    -1,
     299,   290,    -1,   269,    -1,   300,   269,    -1,   283,    -1,
     300,   283,    -1,   286,    -1,   300,   286,    -1,   275,    -1,
     300,   275,    -1,   290,    -1,   300,   290,    -1,   269,    -1,
     301,   269,    -1,   283,    -1,   301,   283,    -1,   285,    -1,
     301,   285,    -1,   147,    -1,   301,   147,    -1,   290,    -1,
     301,   290,    -1,   275,    -1,   301,   275,    -1,   270,    -1,
     302,   270,    -1,   283,    -1,   302,   283,    -1,   285,    -1,
     302,   285,    -1,   147,    -1,   302,   147,    -1,   280,    -1,
     302,   280,    -1,   281,    -1,   302,   281,    -1,    82,    -1,
      81,    -1,   269,    -1,   304,   269,    -1,   283,    -1,   304,
     283,    -1,   286,    -1,   304,   286,    -1,   218,    -1,   304,
     218,    -1,   218,   122,   212,   123,    -1,   304,   218,   122,
     212,   123,    -1,   304,    -1,   297,    -1,   269,    -1,   306,
     269,    -1,   283,    -1,   306,   283,    -1,   286,    -1,   306,
     286,    -1,   218,    -1,   306,   218,    -1,   218,   122,   212,
     123,    -1,   306,   218,   122,   212,   123,    -1,   269,    -1,
     307,   269,    -1,   283,    -1,   307,   283,    -1,   286,    -1,
     307,   286,    -1,   290,    -1,   307,   290,    -1,   275,    -1,
     307,   275,    -1,   218,    -1,   307,   218,    -1,   218,   122,
     212,   123,    -1,   307,   218,   122,   212,   123,    -1,   269,
      -1,   308,   269,    -1,   283,    -1,   308,   283,    -1,   286,
      -1,   308,   286,    -1,   290,    -1,   308,   290,    -1,   275,
      -1,   308,   275,    -1,   218,    -1,   308,   218,    -1,   218,
     122,   212,   123,    -1,   308,   218,   122,   212,   123,    -1,
     310,   129,     1,    -1,   309,   129,     1,    -1,   218,    -1,
     310,   129,   218,    -1,   309,   129,   218,    -1,   352,   129,
     218,    -1,   353,   129,   218,    -1,   312,    -1,   149,    -1,
      37,    -1,   149,   135,   267,   136,    -1,   149,   135,   268,
     136,    -1,   149,   135,   148,   136,    -1,   149,   135,   136,
      -1,   311,   135,   267,   136,    -1,   311,   135,   268,   136,
      -1,   311,   135,   148,   136,    -1,   311,   135,   136,    -1,
     218,    -1,   124,   332,   125,    -1,   124,   321,   332,   125,
      -1,   124,   333,   125,    -1,   124,   321,   333,   125,    -1,
     312,   135,   267,   136,    -1,   312,   135,   268,   136,    -1,
     312,   135,   148,   136,    -1,   312,   135,   136,    -1,   312,
     124,    -1,   313,   354,   125,    -1,   313,   355,   125,    -1,
     313,   310,   125,    -1,   313,   309,   125,    -1,   313,   125,
      -1,   313,   309,    -1,   313,     1,    -1,   313,   352,   124,
      -1,   313,   301,   218,   124,    -1,   314,    -1,   312,    -1,
     311,   124,    -1,   317,   354,   125,    -1,   317,   355,   125,
      -1,   317,   310,   125,    -1,   317,   309,   125,    -1,   317,
     125,    -1,   317,   309,    -1,   317,     1,    -1,   317,   352,
     124,    -1,   317,   301,   218,   124,    -1,   318,    -1,   311,
      -1,    75,    -1,    76,    -1,   326,    -1,    87,   124,   387,
     125,    -1,    80,    -1,   111,    -1,   112,    -1,     3,    -1,
      28,    -1,    76,    -1,    75,    -1,    46,    -1,   323,    -1,
     323,   124,   247,   125,    -1,   324,    -1,   325,   324,    -1,
     325,   129,   324,    -1,   322,   124,   124,   325,   125,   125,
      -1,   322,   124,   124,   125,   125,    -1,   124,   330,   125,
      -1,   124,   321,   330,   125,    -1,   135,   136,    -1,   135,
     267,   136,    -1,   135,   268,   136,    -1,   135,   148,   136,
      -1,   327,   135,   136,    -1,   327,   135,   267,   136,    -1,
     327,   135,   148,   136,    -1,   327,   135,   268,   136,    -1,
     124,   125,    -1,   124,   354,   125,    -1,   124,   355,   125,
      -1,   327,   124,   125,    -1,   327,   124,   354,   125,    -1,
     327,   124,   355,   125,    -1,   124,   331,   125,    -1,   124,
     321,   331,   125,    -1,   124,   125,    -1,   124,   354,   125,
      -1,   124,   355,   125,    -1,   328,   124,   125,    -1,   328,
     124,   354,   125,    -1,   328,   124,   355,   125,    -1,   121,
      -1,   121,   284,    -1,   121,   329,    -1,   121,   284,   329,
      -1,   329,    -1,   327,    -1,   329,   327,    -1,   321,   329,
      -1,   321,   329,   327,    -1,   329,    -1,   328,    -1,   329,
     328,    -1,   321,   329,    -1,   321,   329,   328,    -1,   316,
      -1,   329,   316,    -1,   321,   329,   316,    -1,   332,   321,
      -1,   338,   321,    -1,   320,    -1,   329,   320,    -1,   321,
     329,   320,    -1,   333,   321,    -1,   314,    -1,   329,   314,
      -1,   321,   329,   314,    -1,   329,   321,   314,    -1,   315,
      -1,   329,   315,    -1,   321,   329,   315,    -1,   329,   321,
     315,    -1,   318,    -1,   329,   318,    -1,   321,   329,   318,
      -1,   329,   321,   318,    -1,   319,    -1,   329,   319,    -1,
     321,   329,   319,    -1,   329,   321,   319,    -1,   311,    -1,
     329,   311,    -1,   321,   329,   311,    -1,   329,   321,   311,
      -1,   245,    -1,   131,   343,   130,    -1,   131,   343,   129,
     130,    -1,   264,    -1,   131,   343,   130,     1,    -1,   131,
     343,    -1,   131,   343,   129,   130,     1,    -1,   131,   343,
     129,    -1,   244,    -1,   223,    -1,   263,    -1,   224,    -1,
     339,    -1,   340,    -1,   343,   129,   339,    -1,   343,   129,
     340,    -1,   343,   339,    -1,   343,   340,    -1,   332,    -1,
     333,    -1,   332,   128,   339,    -1,   332,     1,    -1,   332,
     128,   340,    -1,   344,    -1,   346,   129,   344,    -1,    37,
     129,   344,    -1,    38,   129,   344,    -1,    39,   129,   344,
      -1,    40,   129,   344,    -1,   149,   129,   344,    -1,   347,
     129,   344,    -1,   345,    -1,   344,     1,    -1,   346,   129,
     345,    -1,   347,   129,   345,    -1,   298,    -1,   298,   330,
      -1,   299,    -1,   299,   330,    -1,   301,   333,    -1,   301,
     330,    -1,   301,   137,    -1,   301,   137,   333,    -1,   301,
      -1,    67,    -1,   301,   333,     1,    -1,   301,   330,     1,
      -1,   350,    -1,   352,   129,   350,    -1,   352,     1,   129,
     350,    -1,   353,   129,   350,    -1,   353,     1,   129,   350,
      -1,     1,   129,   350,    -1,   310,   129,   350,    -1,   310,
       1,   129,   350,    -1,   309,   129,   350,    -1,   309,     1,
     129,   350,    -1,   351,    -1,   352,   129,   351,    -1,   353,
     129,   351,    -1,   353,     1,   129,   351,    -1,     1,   129,
     351,    -1,   310,   129,   351,    -1,   309,   129,   351,    -1,
     309,     1,   129,   351,    -1,   352,    -1,   352,   129,    53,
      -1,   353,   129,    53,    -1,   310,   129,    53,    -1,   309,
     129,    53,    -1,     1,   129,    53,    -1,   353,    -1,   352,
     129,     1,    -1,   353,     1,    -1,   361,    -1,   326,    -1,
     376,    -1,   127,    -1,   133,    -1,   247,   127,    -1,   379,
      -1,   381,    -1,   383,    -1,   360,    -1,   197,   127,    -1,
     196,   127,    -1,   195,   127,    -1,   362,    -1,   382,    -1,
     377,    -1,   380,    -1,   384,    -1,   383,     1,    -1,   265,
      -1,   387,    -1,   387,   124,   245,   125,    -1,   135,   218,
     136,   387,   124,   245,   125,    -1,   358,    -1,   359,   129,
     358,    -1,    -1,    87,   283,   124,   387,   125,   127,    -1,
      87,   283,   124,   387,   133,   359,   125,   127,    -1,    87,
     283,   124,   387,   133,   359,   133,   359,   125,   127,    -1,
      87,   283,   124,   387,   133,   359,   133,   359,   133,   359,
     125,   127,    -1,    87,   283,   124,   387,     3,   359,   125,
     127,    -1,    87,   283,   124,   387,     3,   359,   133,   359,
     125,   127,    -1,    87,   283,   124,   387,   133,   359,     3,
     359,   125,   127,    -1,    87,   124,   387,   125,   127,    -1,
      87,   124,   387,   133,   359,   125,   127,    -1,    87,   124,
     387,   133,   359,   133,   359,   125,   127,    -1,    87,   124,
     387,   133,   359,   133,   359,   133,   359,   125,   127,    -1,
      87,   124,   387,     3,   359,   125,   127,    -1,    87,   124,
     387,     3,   359,   133,   359,   125,   127,    -1,    87,   124,
     387,   133,   359,     3,   359,   125,   127,    -1,   218,   133,
     356,    -1,    54,   267,   133,   356,    -1,    54,   268,   133,
     356,    -1,    54,   133,   356,    -1,    55,   133,   356,    -1,
     218,   133,   365,    -1,    54,   267,   133,   365,    -1,    54,
     268,   133,   365,    -1,    54,   133,   365,    -1,    55,   133,
     365,    -1,   218,   133,   357,    -1,    54,   267,   133,   357,
      -1,    54,   268,   133,   357,    -1,    54,   133,   357,    -1,
      54,   133,    -1,    55,   133,   357,    -1,    55,   133,    -1,
     218,   133,   368,    -1,    54,   267,   133,   368,    -1,    54,
     268,   133,   368,    -1,    54,   133,   368,    -1,    55,   133,
     368,    -1,    81,    -1,    82,    -1,    55,    -1,    81,    -1,
      82,    -1,   300,   127,    -1,   300,   346,   127,    -1,   172,
     127,    -1,   368,   127,    -1,   302,   127,    -1,   302,   346,
     127,    -1,   303,   346,   127,    -1,   176,   127,    -1,    78,
     218,   128,   244,   127,    -1,    31,    78,   218,   128,   244,
     127,    -1,   302,     1,    -1,   300,     1,    -1,   368,     1,
      -1,   173,     1,    -1,   172,     1,    -1,   300,   347,    -1,
     365,    -1,   369,   365,    -1,   370,   365,    -1,   369,     1,
     127,    -1,   368,    -1,   369,   368,    -1,   356,    -1,   371,
     356,    -1,   372,   356,    -1,   357,    -1,   371,   357,    -1,
     372,   357,    -1,   371,   365,    -1,   372,   365,    -1,   371,
     368,    -1,   372,   368,    -1,   371,    -1,   369,    -1,   369,
     371,    -1,   370,   371,    -1,   372,    -1,   370,    -1,   369,
     372,    -1,   370,   372,    -1,   131,    -1,   377,   130,    -1,
     375,   374,    -1,   375,    -1,   375,   373,    -1,   127,    -1,
     247,   127,    -1,   265,   127,    -1,    56,   124,   247,   125,
     356,    -1,    56,   124,   265,   125,   356,    -1,    56,   124,
     247,   125,   356,    66,   356,    -1,    56,   124,   265,   125,
     356,    66,   356,    -1,    57,   124,   247,   125,   356,    -1,
      57,   124,   265,   125,   356,    -1,    56,   124,   265,    -1,
     379,     1,    -1,    58,   124,   247,   125,   356,    -1,    58,
     124,   265,   356,    -1,    58,   124,   125,   356,    -1,    59,
     356,    58,   124,   247,   125,   127,    -1,    59,   356,    58,
     124,   265,   127,    -1,    60,   124,   378,   378,   125,   356,
      -1,    60,   124,   378,   125,   356,    -1,    60,   124,   378,
     378,   247,   125,   356,    -1,    60,   124,   378,   378,   265,
     356,    -1,    60,   124,   125,   356,    -1,    60,   124,   218,
     133,   247,   125,   356,    -1,    60,   124,   218,   133,   247,
     127,   247,   125,   356,    -1,    60,   124,     1,    -1,    60,
     124,   265,     1,    -1,    60,   124,   378,     1,    -1,    60,
     124,   378,   265,     1,    -1,    60,   124,   378,   378,   265,
      -1,    60,   124,   378,   378,   125,   357,    -1,    60,   124,
     378,   378,   247,   125,   357,    -1,    60,   124,   378,   378,
     265,   357,    -1,    59,   356,    58,   124,   247,   125,    -1,
      59,   356,    58,   124,   247,    -1,    59,   356,    58,   124,
     265,    -1,    59,   356,    58,   124,    -1,    59,   356,    58,
      -1,    59,   356,    -1,    59,    -1,    58,     1,    -1,    58,
     124,   125,     1,    -1,    58,   124,   265,    -1,    58,   124,
     247,   125,   357,    -1,    58,   124,   265,   357,    -1,    61,
     218,   127,    -1,    62,   127,    -1,    63,   127,    -1,    64,
     127,    -1,    64,   247,   127,    -1,    64,   265,   127,    -1,
      64,   223,   127,    -1,    64,   224,   127,    -1,    64,   265,
      -1,    64,   224,    -1,    64,    -1,    61,    -1,   302,   334,
     369,   376,    -1,   302,   334,   376,    -1,   302,   336,   369,
     376,    -1,   302,   336,   376,    -1,   334,   369,   376,    -1,
     334,   376,    -1,   302,   334,   369,   377,    -1,   302,   334,
     377,    -1,   302,   336,   369,   377,    -1,   302,   336,   377,
      -1,   334,   369,   377,    -1,   334,   377,    -1,     5,    -1,
     387,     5,    -1,   385,    -1,   215,    -1,   302,   215,    -1,
     366,    -1,    77,   387,    -1,    77,    31,   387,    -1,    77,
     218,   387,    -1,   127,    -1,   363,   385,    -1,   363,   215,
      -1,   363,   366,    -1,   363,    77,   387,    -1,   363,    77,
      31,   387,    -1,   363,    77,   218,   387,    -1,   363,   133,
      -1,    31,   133,    -1,   102,   218,    -1,   102,   151,    -1,
     393,    -1,   363,   393,    -1,   217,    -1,   302,   217,    -1,
     386,    -1,   363,   217,    -1,   363,   386,    -1,   367,    -1,
     363,   367,    -1,   389,    -1,   391,   389,    -1,   390,   389,
      -1,   391,     1,    -1,   390,     1,    -1,   388,    -1,   391,
     388,    -1,   390,   215,    -1,   390,   363,   215,    -1,   391,
      -1,   390,    -1,    -1,   106,   387,   218,   131,   398,   130,
      -1,   106,   387,   151,   131,   398,   130,    -1,   106,   387,
     131,   398,   130,    -1,   301,   218,   387,   127,    -1,   218,
      -1,   123,   218,    -1,   122,   218,    -1,   395,    -1,   396,
     129,   395,    -1,   108,   396,   127,    -1,   108,   396,   218,
     127,    -1,   394,    -1,   397,    -1,   398,   394,    -1,   398,
     397,    -1,   109,   124,   245,   129,   245,   125,    -1,   107,
     124,   387,   129,   218,   125,    -1,   108,   124,   387,   129,
     218,   125,    -1,   106,   124,   387,   125,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   284,   284,   303,   342,   343,   423,   427,   430,   431,
     432,   471,   473,   478,   483,   488,   490,   495,   497,   502,
     504,   509,   511,   513,   515,   517,   521,   525,   538,   540,
     542,   544,   546,   552,   554,   559,   564,   569,   571,   573,
     578,   579,   583,   584,   595,   599,   600,   602,   607,   608,
     610,   613,   625,   636,   655,   657,   662,   663,   664,   665,
     666,   667,   668,   669,   682,   686,   687,   688,   689,   693,
     694,   695,   696,   697,   698,   699,   703,   705,   710,   712,
     714,   716,   718,   748,   750,   755,   757,   759,   761,   763,
     792,   794,   796,   801,   803,   808,   810,   814,   816,   818,
     820,   825,   828,   831,   834,   899,   901,   906,   908,   910,
     912,   914,   945,   949,   950,   951,   955,   956,   957,   961,
     962,   963,   964,   968,   971,   974,   977,   980,   985,   986,
     988,   990,   992,   994,   999,  1003,  1006,  1009,  1012,  1015,
    1020,  1021,  1023,  1028,  1032,  1034,  1039,  1041,  1046,  1048,
    1053,  1058,  1060,  1065,  1067,  1069,  1071,  1076,  1078,  1080,
    1082,  1087,  1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,
    1096,  1097,  1099,  1100,  1102,  1106,  1109,  1110,  1111,  1112,
    1113,  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,
    1124,  1125,  1129,  1130,  1131,  1135,  1139,  1140,  1141,  1145,
    1146,  1147,  1148,  1149,  1153,  1154,  1166,  1167,  1171,  1172,
    1173,  1174,  1175,  1176,  1177,  1178,  1182,  1186,  1187,  1191,
    1199,  1200,  1204,  1205,  1206,  1210,  1211,  1215,  1216,  1217,
    1218,  1219,  1220,  1260,  1261,  1265,  1273,  1274,  1282,  1283,
    1285,  1286,  1295,  1296,  1300,  1307,  1314,  1320,  1327,  1333,
    1342,  1349,  1355,  1361,  1367,  1373,  1379,  1390,  1395,  1396,
    1401,  1402,  1403,  1407,  1411,  1412,  1413,  1414,  1415,  1416,
    1417,  1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,
    1439,  1440,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,
    1449,  1450,  1451,  1452,  1453,  1455,  1456,  1457,  1458,  1459,
    1461,  1462,  1466,  1470,  1474,  1475,  1479,  1481,  1482,  1483,
    1484,  1485,  1486,  1487,  1488,  1489,  1491,  1492,  1493,  1494,
    1495,  1496,  1497,  1498,  1525,  1526,  1527,  1528,  1532,  1533,
    1534,  1535,  1536,  1540,  1541,  1542,  1543,  1545,  1546,  1547,
    1548,  1551,  1552,  1554,  1558,  1559,  1568,  1569,  1570,  1571,
    1572,  1573,  1574,  1575,  1579,  1580,  1584,  1585,  1586,  1587,
    1588,  1589,  1590,  1594,  1595,  1596,  1597,  1598,  1602,  1603,
    1604,  1605,  1606,  1610,  1618,  1619,  1620,  1621,  1622,  1623,
    1624,  1625,  1626,  1630,  1631,  1632,  1633,  1634,  1636,  1637,
    1638,  1639,  1643,  1644,  1645,  1647,  1648,  1652,  1653,  1654,
    1656,  1657,  1661,  1662,  1663,  1665,  1666,  1670,  1671,  1672,
    1676,  1677,  1678,  1682,  1683,  1684,  1685,  1686,  1688,  1689,
    1690,  1691,  1693,  1694,  1695,  1696,  1698,  1699,  1700,  1701,
    1705,  1706,  1707,  1708,  1709,  1711,  1712,  1713,  1714,  1718,
    1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,
    1732,  1733,  1734,  1735,  1739,  1740,  1741,  1745,  1746,  1747,
    1748,  1750,  1751,  1753,  1754,  1759,  1761,  1766,  1794,  1795,
    1796,  1797,  1799,  1800,  1801,  1802,  1804,  1805,  1809,  1810,
    1819,  1820,  1824,  1825,  1826,  1827,  1828,  1829,  1830,  1834,
    1835,  1839,  1843,  1847,  1854,  1855,  1856,  1857,  1858,  1862,
    1863,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1916,  1917,
    1918,  1919,  1920,  1927,  1928,  1929,  1930,  1934,  1935,  1936,
    1938,  1939,  1943,  1944,  1945,  1947,  1948,  1952,  1953,  1954,
    1956,  1957,  1961,  1962,  1963,  1967,  1968,  1969,  1973,  1974,
    1975,  1976,  1977,  1978,  1979,  1980,  1981,  1983,  1984,  1985,
    1986,  1987,  1988,  1989,  1990,  1992,  1993,  1994,  1995,  1997,
    1998,  1999,  2000,  2002,  2010,  2014,  2019,  2026,  2027,  2031,
    2036,  2037,  2041,  2042,  2043,  2044,  2050,  2051,  2052,  2056,
    2057,  2058,  2059,  2063,  2065,  2069,  2070,  2071,  2072,  2073,
    2074,  2075,  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2089,
    2090,  2091,  2095,  2096,  2097,  2101,  2105,  2106,  2110,  2111,
    2112,  2116,  2117,  2119,  2120,  2121,  2122,  2123,  2125,  2126,
    2127,  2128,  2129,  2131,  2132,  2136,  2137,  2141,  2142,  2143,
    2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,  2157,
    2158,  2160,  2161,  2162,  2163,  2164,  2166,  2167,  2168,  2169,
    2173,  2174,  2178,  2179,  2183,  2187,  2188,  2189,  2194,  2195,
    2199,  2200,  2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,
    2209,  2210,  2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,
    2219,  2220,  2221,  2222,  2223,  2224,  2225,  2226,  2230,  2231,
    2232,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2240,  2241,
    2242,  2243,  2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,
    2252,  2253,  2254,  2255,  2261,  2263,  2265,  2267,  2269,  2271,
    2273,  2275,  2277,  2279,  2284,  2285,  2289,  2295,  2301,  2308,
    2318,  2319,  2320,  2321,  2325,  2326,  2327,  2329,  2330,  2331,
    2333,  2334,  2335,  2339,  2343,  2351,  2360,  2369,  2370,  2372,
    2373,  2377,  2384,  2391,  2394,  2407,  2421,  2424,  2426,  2428,
    2433,  2434,  2438,  2439,  2440,  2441,  2442,  2443,  2444,  2445,
    2449,  2450,  2451,  2452,  2453,  2454,  2455,  2456,  2457,  2458,
    2462,  2463,  2464,  2465,  2466,  2467,  2468,  2469,  2470,  2471,
    2475,  2476,  2477,  2478,  2479,  2480,  2481,  2482,  2483,  2484,
    2485,  2486,  2490,  2491,  2492,  2493,  2494,  2495,  2496,  2497,
    2498,  2499,  2503,  2504,  2508,  2509,  2510,  2511,  2512,  2513,
    2514,  2515,  2516,  2518,  2520,  2528,  2538,  2539,  2543,  2544,
    2545,  2546,  2547,  2548,  2549,  2550,  2551,  2559,  2568,  2569,
    2570,  2571,  2572,  2573,  2574,  2575,  2576,  2577,  2578,  2579,
    2580,  2588,  2597,  2598,  2599,  2600,  2601,  2602,  2603,  2604,
    2605,  2606,  2607,  2608,  2609,  2617,  2626,  2627,  2631,  2632,
    2633,  2634,  2635,  2639,  2640,  2647,  2649,  2658,  2667,  2676,
    2685,  2686,  2687,  2688,  2692,  2693,  2694,  2695,  2696,  2697,
    2698,  2699,  2700,  2704,  2708,  2709,  2710,  2711,  2712,  2717,
    2726,  2735,  2744,  2758,  2759,  2764,  2768,  2769,  2770,  2771,
    2772,  2777,  2786,  2795,  2804,  2818,  2819,  2868,  2869,  2870,
    2871,  2883,  2884,  2885,  2890,  2891,  2892,  2893,  2894,  2898,
    2899,  2903,  2904,  2905,  2909,  2910,  2914,  2915,  2916,  2917,
    2918,  2919,  2920,  2921,  2922,  2923,  2924,  2925,  2926,  2927,
    2928,  2929,  2933,  2934,  2935,  2936,  2937,  2938,  2939,  2940,
    2944,  2945,  2946,  2947,  2951,  2952,  2953,  2954,  2955,  2959,
    2960,  2961,  2962,  2963,  2967,  2968,  2970,  2972,  2974,  2979,
    2980,  2982,  2984,  2989,  2990,  2991,  2992,  2996,  2997,  2998,
    2999,  3003,  3004,  3005,  3006,  3010,  3011,  3012,  3013,  3017,
    3018,  3019,  3020,  3024,  3025,  3026,  3043,  3044,  3045,  3046,
    3059,  3076,  3077,  3082,  3083,  3087,  3088,  3089,  3090,  3093,
    3094,  3098,  3099,  3100,  3104,  3108,  3112,  3113,  3114,  3115,
    3116,  3117,  3118,  3127,  3136,  3137,  3138,  3139,  3143,  3144,
    3148,  3149,  3154,  3155,  3156,  3157,  3158,  3159,  3178,  3179,
    3183,  3184,  3185,  3186,  3187,  3188,  3190,  3191,  3192,  3193,
    3197,  3198,  3199,  3200,  3201,  3203,  3204,  3205,  3209,  3210,
    3211,  3212,  3213,  3214,  3218,  3219,  3220,  3225,  3226,  3227,
    3228,  3229,  3230,  3231,  3232,  3233,  3234,  3235,  3236,  3237,
    3241,  3242,  3243,  3244,  3245,  3246,  3247,  3251,  3252,  3253,
    3257,  3258,  3259,  3263,  3264,  3265,  3266,  3268,  3269,  3270,
    3272,  3273,  3274,  3275,  3277,  3278,  3279,  3283,  3284,  3285,
    3286,  3287,  3289,  3290,  3291,  3292,  3293,  3297,  3298,  3299,
    3300,  3301,  3302,  3303,  3305,  3306,  3307,  3308,  3309,  3313,
    3314,  3315,  3319,  3320,  3324,  3325,  3326,  3327,  3331,  3332,
    3333,  3335,  3336,  3337,  3341,  3345,  3346,  3348,  3349,  3350,
    3354,  3355,  3356,  3357,  3361,  3362,  3366,  3367,  3368,  3372,
    3373,  3374,  3375,  3376,  3377,  3378,  3382,  3383,  3384,  3385,
    3389,  3390,  3391,  3392,  3396,  3400,  3404,  3406,  3409,  3415,
    3416,  3417,  3421,  3422,  3423,  3424,  3425,  3426,  3430,  3431,
    3435,  3436,  3437,  3439,  3440,  3442,  3443,  3444,  3445,  3446,
    3448,  3449,  3453,  3454,  3455,  3456,  3460,  3461,  3462,  3463,
    3465,  3466,  3467,  3468,  3469,  3470,  3471,  3474,  3478,  3479,
    3483,  3484,  3488,  3489,  3490,  3491,  3492,  3493,  3494,  3495,
    3499,  3500,  3501,  3502,  3508,  3509,  3511,  3512,  3515,  3516,
    3519,  3520,  3521,  3522,  3523,  3524,  3528,  3529,  3541,  3542,
    3545,  3548,  3550,  3551,  3552,  3562,  3564,  3565,  3567,  3568,
    3569,  3570,  3580,  3581,  3582,  3583,  3584,  3585,  3589,  3590,
    3599,  3601,  3602,  3604,  3606,  3610,  3611,  3612,  3613,  3614,
    3618,  3619,  3620,  3622,  3627,  3628,  3629,  3633,  3634,  3635,
    3639,  3643,  3644,  3645,  3649,  3650,  3654,  3655,  3659,  3660,
    3661,  3662,  3666,  3670,  3674,  3678
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "INT128", "FLOAT128", "LONG", "SIGNED",
  "UNSIGNED", "FLOAT", "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST",
  "STRUCT", "UNION", "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH",
  "WHILE", "DO", "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX",
  "ELSE", "CLASS", "THISCLASS", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "THREAD",
  "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF", "'*'", "'<'", "'>'", "'('",
  "')'", "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'", "':'", "'$'",
  "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'", "'|'",
  "'?'", "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,    42,    60,    62,    40,    41,   126,    59,    61,    44,
     125,   123,    46,    58,    36,    91,    93,    38,    43,    45,
      33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   146,   147,   147,   148,   148,   149,   150,   151,   151,
     151,   152,   152,   153,   154,   155,   155,   156,   156,   157,
     157,   158,   158,   158,   158,   158,   158,   158,   159,   159,
     159,   159,   159,   160,   160,   161,   162,   163,   163,   163,
     164,   164,   165,   165,   165,   166,   166,   166,   167,   167,
     167,   167,   167,   167,   168,   168,   169,   169,   169,   169,
     169,   169,   169,   169,   169,   170,   170,   170,   170,   171,
     171,   171,   171,   171,   171,   171,   172,   172,   173,   173,
     173,   173,   173,   174,   174,   175,   175,   175,   175,   175,
     176,   176,   176,   177,   177,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   179,   179,   180,   180,   180,
     180,   180,   181,   182,   182,   182,   183,   183,   183,   184,
     184,   184,   184,   185,   185,   185,   185,   185,   186,   186,
     186,   186,   186,   186,   187,   188,   188,   188,   188,   188,
     189,   189,   189,   190,   191,   191,   192,   192,   193,   193,
     194,   195,   195,   196,   196,   196,   196,   197,   197,   197,
     197,   198,   198,   198,   198,   198,   198,   198,   198,   198,
     198,   198,   198,   198,   198,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   200,   200,   200,   201,
     201,   201,   201,   201,   202,   202,   203,   203,   204,   204,
     204,   204,   204,   204,   204,   204,   205,   206,   206,   207,
     208,   208,   209,   209,   209,   210,   210,   211,   211,   211,
     211,   211,   211,   212,   212,   213,   214,   214,   214,   214,
     214,   214,   214,   214,   215,   215,   215,   215,   215,   215,
     216,   217,   217,   217,   217,   217,   217,   218,   219,   219,
     220,   220,   220,   221,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   223,   224,   225,   225,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   227,   227,   227,   227,   228,   228,
     228,   228,   228,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   230,   230,   231,   231,   231,   231,
     231,   231,   231,   231,   232,   232,   233,   233,   233,   233,
     233,   233,   233,   234,   234,   234,   234,   234,   235,   235,
     235,   235,   235,   236,   237,   237,   237,   237,   237,   237,
     237,   237,   237,   238,   238,   238,   238,   238,   238,   238,
     238,   238,   239,   239,   239,   239,   239,   240,   240,   240,
     240,   240,   241,   241,   241,   241,   241,   242,   242,   242,
     243,   243,   243,   244,   244,   244,   244,   244,   244,   244,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   246,
     246,   246,   246,   246,   246,   246,   246,   246,   246,   246,
     247,   247,   247,   247,   248,   248,   248,   249,   249,   249,
     249,   249,   249,   249,   249,   249,   249,   249,   250,   250,
     250,   250,   250,   250,   250,   250,   250,   250,   251,   251,
     252,   252,   253,   253,   253,   253,   253,   253,   253,   254,
     254,   254,   254,   254,   255,   255,   255,   255,   255,   256,
     256,   256,   256,   256,   256,   256,   256,   256,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   258,   258,   258,
     258,   258,   259,   259,   259,   259,   259,   260,   260,   260,
     260,   260,   261,   261,   261,   262,   262,   262,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   264,   264,   264,
     264,   264,   265,   265,   265,   265,   265,   265,   265,   266,
     266,   266,   266,   267,   268,   269,   269,   269,   269,   269,
     269,   269,   270,   270,   270,   270,   270,   270,   270,   271,
     271,   271,   272,   272,   272,   273,   274,   274,   275,   275,
     275,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   277,   277,   278,   278,   278,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     280,   280,   281,   281,   282,   283,   283,   283,   284,   284,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   287,   287,   287,   287,   287,   287,
     287,   287,   287,   287,   288,   288,   289,   289,   289,   289,
     290,   290,   290,   290,   291,   291,   291,   291,   291,   291,
     291,   291,   291,   292,   293,   293,   294,   295,   295,   295,
     295,   296,   296,   296,   296,   296,   296,   296,   296,   296,
     297,   297,   298,   298,   298,   298,   298,   298,   298,   298,
     299,   299,   299,   299,   299,   299,   299,   299,   299,   299,
     300,   300,   300,   300,   300,   300,   300,   300,   300,   300,
     301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
     301,   301,   302,   302,   302,   302,   302,   302,   302,   302,
     302,   302,   303,   303,   304,   304,   304,   304,   304,   304,
     304,   304,   304,   304,   304,   304,   305,   305,   306,   306,
     306,   306,   306,   306,   306,   306,   306,   306,   307,   307,
     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
     307,   307,   308,   308,   308,   308,   308,   308,   308,   308,
     308,   308,   308,   308,   308,   308,   309,   309,   310,   310,
     310,   310,   310,   311,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   312,   312,   312,   312,   312,   312,
     312,   312,   312,   313,   314,   314,   314,   314,   314,   315,
     315,   315,   315,   316,   316,   317,   318,   318,   318,   318,
     318,   319,   319,   319,   319,   320,   320,   321,   321,   321,
     321,   322,   322,   322,   323,   323,   323,   323,   323,   324,
     324,   325,   325,   325,   326,   326,   327,   327,   327,   327,
     327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
     327,   327,   328,   328,   328,   328,   328,   328,   328,   328,
     329,   329,   329,   329,   330,   330,   330,   330,   330,   331,
     331,   331,   331,   331,   332,   332,   332,   332,   332,   333,
     333,   333,   333,   334,   334,   334,   334,   335,   335,   335,
     335,   336,   336,   336,   336,   337,   337,   337,   337,   338,
     338,   338,   338,   339,   339,   339,   340,   340,   340,   340,
     340,   341,   341,   342,   342,   343,   343,   343,   343,   343,
     343,   344,   344,   344,   345,   345,   346,   346,   346,   346,
     346,   346,   346,   346,   347,   347,   347,   347,   348,   348,
     349,   349,   350,   350,   350,   350,   350,   350,   351,   351,
     352,   352,   352,   352,   352,   352,   352,   352,   352,   352,
     353,   353,   353,   353,   353,   353,   353,   353,   354,   354,
     354,   354,   354,   354,   355,   355,   355,   356,   356,   356,
     356,   356,   356,   356,   356,   356,   356,   356,   356,   356,
     357,   357,   357,   357,   357,   357,   357,   358,   358,   358,
     359,   359,   359,   360,   360,   360,   360,   360,   360,   360,
     360,   360,   360,   360,   360,   360,   360,   361,   361,   361,
     361,   361,   361,   361,   361,   361,   361,   362,   362,   362,
     362,   362,   362,   362,   362,   362,   362,   362,   362,   363,
     363,   363,   364,   364,   365,   365,   365,   365,   366,   366,
     366,   366,   366,   366,   367,   368,   368,   368,   368,   368,
     369,   369,   369,   369,   370,   370,   371,   371,   371,   372,
     372,   372,   372,   372,   372,   372,   373,   373,   373,   373,
     374,   374,   374,   374,   375,   376,   377,   377,   377,   378,
     378,   378,   379,   379,   379,   379,   379,   379,   380,   380,
     381,   381,   381,   381,   381,   381,   381,   381,   381,   381,
     381,   381,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   383,   383,   383,   383,   383,   383,   383,   383,
     384,   384,   384,   384,   385,   385,   385,   385,   385,   385,
     386,   386,   386,   386,   386,   386,   387,   387,   388,   388,
     388,   388,   388,   388,   388,   388,   388,   388,   388,   388,
     388,   388,   388,   388,   388,   388,   388,   388,   389,   389,
     389,   389,   389,   389,   389,   390,   390,   390,   390,   390,
     391,   391,   391,   391,   392,   392,   392,   393,   393,   393,
     394,   395,   395,   395,   396,   396,   397,   397,   398,   398,
     398,   398,   399,   400,   401,   402
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     1,     3,     3,     1,     1,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     2,     5,     6,     6,     2,     5,     1,     1,
       1,     4,     1,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     1,     3,     3,     1,     5,
       5,     5,     5,     4,     4,     4,     4,     5,     5,     5,
       5,     4,     4,     4,     4,     5,     5,     5,     5,     5,
       5,     5,     5,     3,     3,     2,     2,     1,     3,     3,
       3,     3,     1,     2,     3,     3,     2,     2,     2,     1,
       2,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     3,     2,     1,     2,     2,     2,     4,
       4,     3,     3,     4,     5,     4,     6,     6,     4,     5,
       4,     6,     6,     5,     5,     2,     2,     2,     5,     3,
       5,     6,     5,     7,     7,     8,     8,     7,     7,     3,
       3,     3,     4,     3,     5,     5,     6,     7,     6,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     4,     4,     1,     1,     2,     2,     3,     5,     2,
       3,     5,     5,     5,     1,     3,     2,     2,     3,     3,
       2,     3,     3,     4,     3,     3,     3,     3,     3,     3,
       4,     4,     4,     1,     1,     4,     3,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     2,     4,     5,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     3,     3,     1,     3,
       3,     3,     3,     1,     1,     1,     4,     4,     4,     3,
       4,     4,     4,     3,     1,     3,     4,     3,     4,     4,
       4,     4,     3,     2,     3,     3,     3,     3,     2,     2,
       2,     3,     4,     1,     1,     2,     3,     3,     3,     3,
       2,     2,     2,     3,     4,     1,     1,     1,     1,     1,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     2,     3,     6,     5,     3,     4,     2,     3,
       3,     3,     3,     4,     4,     4,     2,     3,     3,     3,
       4,     4,     3,     4,     2,     3,     3,     3,     4,     4,
       1,     2,     2,     3,     1,     1,     2,     2,     3,     1,
       1,     2,     2,     3,     1,     2,     3,     2,     2,     1,
       2,     3,     2,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     3,     4,     1,     4,     2,     5,
       3,     1,     1,     1,     1,     1,     1,     3,     3,     2,
       2,     1,     1,     3,     2,     3,     1,     3,     3,     3,
       3,     3,     3,     3,     1,     2,     3,     3,     1,     2,
       1,     2,     2,     2,     2,     3,     1,     1,     3,     3,
       1,     3,     4,     3,     4,     3,     3,     4,     3,     4,
       1,     3,     3,     4,     3,     3,     3,     4,     1,     3,
       3,     3,     3,     3,     1,     3,     2,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     1,     2,     1,     1,     4,     7,
       1,     3,     0,     6,     8,    10,    12,     8,    10,    10,
       5,     7,     9,    11,     7,     9,     9,     3,     4,     4,
       3,     3,     3,     4,     4,     3,     3,     3,     4,     4,
       3,     2,     3,     2,     3,     4,     4,     3,     3,     1,
       1,     1,     1,     1,     2,     3,     2,     2,     2,     3,
       3,     2,     5,     6,     2,     2,     2,     2,     2,     2,
       1,     2,     2,     3,     1,     2,     1,     2,     2,     1,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     2,
       1,     1,     2,     2,     1,     2,     2,     1,     2,     1,
       2,     2,     5,     5,     7,     7,     5,     5,     3,     2,
       5,     4,     4,     7,     6,     6,     5,     7,     6,     4,
       7,     9,     3,     4,     4,     5,     5,     6,     7,     6,
       6,     5,     5,     4,     3,     2,     1,     2,     4,     3,
       5,     4,     3,     2,     2,     2,     3,     3,     3,     3,
       2,     2,     1,     1,     4,     3,     4,     3,     3,     2,
       4,     3,     4,     3,     3,     2,     1,     2,     1,     1,
       2,     1,     2,     3,     3,     1,     2,     2,     2,     3,
       4,     4,     2,     2,     2,     2,     1,     2,     1,     2,
       1,     2,     2,     1,     2,     1,     2,     2,     2,     2,
       1,     2,     2,     3,     1,     1,     0,     6,     6,     5,
       4,     1,     2,     2,     1,     3,     3,     4,     1,     1,
       2,     2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1296,   257,     6,   592,   593,   594,   596,   597,   661,   662,
     663,   664,   665,   666,   667,   669,   672,   673,   670,   671,
     655,   656,   660,   668,   760,   761,   605,  1141,   235,   681,
     917,   918,     0,     0,   921,  1139,  1140,   682,   683,   674,
       0,     0,     0,     0,     0,   922,   923,   685,   684,   686,
     687,   598,   595,   960,     0,  1265,   808,   677,     8,     4,
       0,     0,     0,  1259,     0,  1278,   884,   802,     0,   676,
       0,   650,   652,   810,   812,   657,   804,   806,   743,   675,
       0,     0,   651,   653,     0,     0,     0,     0,     0,   983,
     654,     0,   919,     0,     0,     0,  1261,  1283,  1258,  1280,
    1290,  1285,     0,     0,     0,  1276,     0,  1273,  1256,     0,
       0,  1262,     0,     0,     0,     0,  1275,  1274,     0,   658,
     961,   654,   962,   875,   874,   884,   916,   873,   903,   974,
       0,   915,   979,     0,     0,     0,     0,     0,     0,  1151,
       0,   237,   236,     0,     0,   245,     0,   244,     2,     3,
       0,     5,     0,   607,   606,     0,     0,   627,     0,     0,
       0,     0,   747,     0,   727,   726,     0,  1154,   594,   664,
     665,   666,   667,  1148,   809,     8,  1260,  1279,   884,   803,
     811,   813,   805,   807,   983,   991,   654,     0,     0,  1022,
       0,     0,     0,  1034,     0,     0,   875,     0,     0,     0,
     874,     0,     0,   893,     0,     0,   585,   586,   587,   589,
     590,  1047,   591,   588,   898,   796,   868,   790,     0,   800,
       0,   792,   794,   743,   798,     0,     0,  1046,     0,     0,
    1050,  1060,     0,     0,     0,     0,     0,     0,   984,     0,
     689,   690,   691,   692,   693,   694,   695,   697,   700,   701,
     698,   699,   688,   696,   713,   702,     0,     0,   707,   706,
     708,   709,  1184,   705,     0,     0,   780,   704,   786,   782,
     784,   788,   703,     0,  1160,     0,     0,     0,     0,  1249,
    1255,   594,     0,  1272,  1267,  1281,     0,  1268,  1284,  1266,
    1282,  1277,  1289,  1292,     0,     0,     0,     0,     0,  1287,
    1288,  1291,  1286,     1,     0,  1263,  1264,  1257,     0,     0,
     458,   263,     0,     0,     0,     0,     0,     0,   352,   353,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     273,     0,   347,     0,   350,     0,     0,   346,   348,   349,
     351,     0,   265,     0,   264,   306,   272,   271,   258,   457,
       0,   344,   354,     0,   356,   363,   368,   374,     0,   383,
     392,   397,   402,   407,   410,   413,   430,     0,   479,   478,
     480,   482,   489,   494,   499,   508,   517,   522,   527,   532,
     535,   538,     0,   260,   296,   297,   298,   299,     0,     0,
       0,     0,     0,   659,   963,     0,   905,     0,   910,     0,
       0,     0,     0,     0,     0,     0,   916,   975,   980,     0,
     885,   977,   887,   982,   978,   674,     4,   229,   228,   227,
     233,     0,   264,   354,   219,   480,     0,   206,   249,     0,
       0,   248,   255,     0,     0,  1142,  1143,     0,   168,     0,
     169,   170,     0,     0,     0,     0,     0,   172,   246,     0,
       0,     0,     0,    29,    31,   163,   175,   188,     0,   187,
       0,   116,   119,     0,   195,   128,     0,   164,   140,     0,
     167,   183,   196,   199,     0,     0,   264,     0,     0,   176,
       0,   987,   654,     0,    12,    18,     0,   815,   814,   822,
     816,     0,   818,   820,   743,   827,   826,   250,   256,   247,
       0,     0,   239,   238,   640,   599,   602,   639,   643,   629,
       0,     0,     0,   222,   223,   224,   225,     0,   217,     0,
     756,   749,     0,     0,   746,   753,   748,     0,     0,   759,
     750,     0,     0,   729,   728,     0,     0,     0,     0,     0,
       0,     0,   984,   992,     0,  1024,     0,     0,  1245,  1251,
       0,  1247,  1253,  1035,  1149,     0,     0,     0,  1150,   892,
       0,   264,   583,   584,     0,     0,     0,     0,   607,   606,
     608,     0,   730,     0,     0,   664,     0,     0,  1044,   797,
       8,   884,   791,   801,   793,   795,   799,   916,   873,   654,
     965,   964,     0,     0,     0,   897,     0,     0,   896,     0,
       0,     0,  1076,     0,   894,   895,   985,     0,   986,     0,
       0,  1158,  1146,  1157,    76,  1155,   692,   693,   694,   695,
    1144,   884,   781,   787,   783,   785,   789,   654,     0,  1159,
    1156,  1147,     0,  1161,     0,  1248,  1254,  1162,     0,     0,
       0,     0,     0,     0,     0,     0,  1243,     0,     0,     0,
     702,     0,     0,     0,   157,  1080,  1081,   705,     0,     0,
       0,   264,     0,   354,     0,     0,   480,   567,   572,     0,
    1078,  1166,  1169,  1086,  1077,  1090,     0,     0,     0,     0,
    1188,  1186,  1079,  1092,     0,  1093,  1084,  1091,     0,  1094,
    1185,     0,     0,  1269,   884,     0,     0,     0,  1279,     0,
     873,   991,   654,     0,     0,     0,     0,  1255,  1293,     0,
       0,   413,     0,     0,   920,     0,   337,   472,     0,   333,
     468,   334,   469,     0,   862,   852,   860,   854,   856,   858,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   341,   476,     0,   274,     0,     0,     0,   766,
     762,   764,   768,  1038,     0,   261,     0,   301,   302,     0,
     325,     0,   324,     0,   460,    93,     0,   270,   459,     0,
     314,   315,     0,     0,     0,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   439,     0,     0,   336,   471,
     335,   470,     0,     0,     0,     0,     0,     0,     0,   375,
     500,     0,     0,   373,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   678,     0,   322,   323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   679,   680,     0,     0,     0,  1308,  1309,     0,
       0,     0,   879,     0,     0,     0,   883,     0,     0,     0,
     909,   908,   906,   907,   916,   975,   980,   886,   888,  1002,
      10,     9,     0,     0,     0,   654,   964,   207,     0,     0,
     264,   206,     0,     0,   834,   828,   830,   832,     0,     0,
       0,    16,    20,     0,   185,   184,   186,     0,     0,     0,
       0,   347,     0,   264,     0,    26,     0,    21,    28,    24,
       0,    25,    23,    22,    30,    32,   190,    83,   191,   122,
     162,     0,     0,     0,     0,   132,     0,     0,   134,     0,
       0,   143,   161,   200,   197,   202,   201,   198,   203,   115,
       0,     0,     0,   884,   724,   177,   999,     0,   995,   654,
       0,    11,    17,   714,   900,  1046,     0,     0,     0,   988,
       0,     0,   173,   165,   192,   181,     0,   180,     0,   166,
     884,   179,     0,   607,   606,   823,   817,   819,   821,     0,
       0,     0,   604,   642,     0,     0,     7,   212,   208,   745,
       0,     0,     0,     0,  1021,  1028,  1029,  1030,  1031,  1032,
      64,    53,    92,    39,    38,    57,    69,    45,    48,     0,
      74,    56,     0,     0,     0,  1012,  1014,     0,  1011,  1013,
       0,    41,    44,   916,   985,   976,   993,   981,  1002,   994,
       0,  1003,  1006,  1023,  1025,  1244,  1250,  1246,  1252,  1027,
    1036,  1033,  1037,   891,   889,   890,  1073,  1055,  1064,   612,
     611,     0,     0,   458,   731,     0,     0,   458,   732,     0,
       0,     0,   946,   884,     0,     0,   654,   964,     0,     0,
       0,   938,     0,     0,     0,     0,     0,  1045,   967,     0,
       0,   966,  1049,  1048,     0,   867,  1072,   870,  1058,  1066,
       0,   866,  1071,   869,  1056,  1065,     0,  1075,  1069,   871,
    1051,  1061,     0,  1070,   872,  1053,  1062,   924,   925,   928,
     927,   926,     0,   929,   931,     0,     0,     0,     0,    77,
       0,  1145,  1163,     0,     0,     0,     0,     0,     0,  1227,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     264,     0,  1078,  1225,  1083,  1085,     0,     0,  1233,  1234,
    1235,     0,  1241,     0,     0,     0,     0,     0,     0,   158,
     144,  1089,  1088,  1087,     0,     0,     0,   573,     0,  1082,
       0,     0,     0,     0,   453,     0,     0,   458,     0,     0,
       0,     0,  1167,  1170,  1172,     0,  1168,  1171,  1173,     0,
    1199,  1095,  1270,  1271,   237,   236,     0,     0,     0,   992,
       0,     0,  1251,     0,  1253,  1254,     0,     0,  1152,     0,
       0,   774,   264,   776,   770,   772,   778,  1040,     0,     0,
       0,     0,     0,     0,   863,   853,   861,   855,   857,   859,
     654,   970,   969,     0,   848,   838,   846,   840,   842,   844,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,     0,   767,   763,   765,
     769,  1039,     0,     0,   458,     0,     0,     0,   105,     0,
     300,   458,     0,     0,    94,   458,     0,     0,   461,   313,
     309,   329,   463,   464,   328,   465,   312,     0,     0,   435,
     431,   303,   357,   483,   358,   484,   359,   485,   364,   490,
     365,   491,   369,   495,   370,   496,   377,   502,   378,   503,
     376,   501,   388,   513,   384,   509,   389,   514,   385,   510,
     395,   520,   393,   518,   400,   525,   398,   523,   405,   530,
     403,   528,   408,   533,   411,   536,   563,     0,   579,     0,
       0,     0,     0,   437,   433,   462,   321,   318,     0,   466,
     467,   320,     0,     0,   436,   432,   360,   486,   361,   487,
     362,   488,   366,   492,   367,   493,   371,   497,   372,   498,
     381,   506,   382,   507,   379,   504,   380,   505,   390,   515,
     386,   511,   391,   516,   387,   512,   396,   521,   394,   519,
     401,   526,   399,   524,   406,   531,   404,   529,   409,   534,
     412,   537,   564,     0,     0,     0,     0,   438,   434,     0,
       0,  1301,  1304,     0,     0,  1299,  1310,  1311,     0,     0,
     878,   876,   877,   882,   880,   881,   234,   232,   231,   230,
     264,   654,   967,   241,     0,   207,   240,   127,     0,   125,
     835,   829,   831,   833,     0,   654,     0,    15,    19,     0,
     182,   999,   654,     0,   139,     0,   137,   835,     0,   264,
     654,     0,    27,    84,   117,   120,   118,   121,   129,   130,
     131,   133,   141,   142,   114,   112,   113,    13,   716,   719,
       0,     0,   912,  1046,     0,     0,     0,  1000,   996,     0,
       0,   715,   884,   901,   989,   990,   884,   193,   194,   178,
       0,     0,     0,     0,   600,   601,   603,     0,     0,   632,
     628,     0,     0,     0,     0,     0,   226,   218,   216,     0,
       0,     0,    36,    37,    75,    54,     0,    55,     0,    63,
      61,    72,    67,    73,    60,    90,    39,    70,    62,    91,
      59,    71,    68,     0,    58,     0,   692,    33,    35,    34,
    1015,  1016,     0,   620,   610,     0,   615,   609,     0,   458,
     733,     0,     0,     0,   964,     0,   936,   947,   948,   941,
     939,   940,     0,   968,   949,     0,     0,   942,     0,     0,
       0,  1059,  1067,  1046,  1057,  1052,  1054,  1063,   935,     0,
       0,     0,   932,   710,   711,   712,   458,     0,     0,  1120,
    1130,  1125,     0,     0,     0,  1121,  1132,  1126,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1224,  1212,
       0,  1189,   264,     0,     0,     0,  1232,  1238,  1239,  1236,
    1237,     0,     0,     0,     0,   145,  1117,  1127,  1122,     0,
     159,   570,   568,     0,     0,     0,   451,   574,   571,   569,
     452,   575,     0,   993,  1250,  1252,  1153,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   775,   777,   771,
     773,   779,  1041,     0,   293,   291,     0,     0,   954,   654,
       0,     0,     0,     0,     0,     0,   972,     0,   971,     0,
       0,     0,   849,   839,   847,   841,   843,   845,     0,   267,
       0,   266,   295,     0,     0,     0,     0,     0,     0,  1315,
       0,     0,     0,     0,     0,   355,   481,   262,   108,   106,
     327,   326,    99,   103,   310,     0,   311,   307,   308,   580,
       0,     0,     0,     0,     0,     0,   319,   316,   317,     0,
       0,     0,     0,  1303,  1302,  1306,     0,     0,     0,  1298,
    1297,     0,   964,   218,     0,     0,   123,   126,     0,     0,
       0,     0,     0,  1000,     0,   135,   138,     0,    14,   458,
       0,     0,   725,     0,   884,   913,  1001,   997,   998,   717,
     720,   902,   174,   824,     0,   243,   242,     0,   631,     0,
     213,   214,   204,   209,   210,   220,     0,     0,    51,    46,
      49,    52,    47,    50,    37,    43,    40,    42,     0,     0,
    1019,  1020,   619,     0,   614,     0,   967,   966,   937,   950,
     951,   944,   943,   945,  1043,  1042,     0,   934,   933,    79,
    1118,  1128,  1123,     0,  1119,  1129,  1124,     0,     0,     0,
       0,     0,  1228,  1202,     0,     0,  1201,  1231,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1209,
       0,  1190,  1213,  1191,  1214,     0,     0,     0,  1102,   920,
    1102,     0,     0,   155,     0,     0,     0,   160,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   473,   292,
     864,     0,   969,     0,   952,   955,   956,   277,   278,     0,
     973,   957,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   268,   281,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   477,     0,   331,   330,   455,   581,
     422,   555,   414,   539,   426,   559,   418,   547,   456,   582,
     423,   556,   415,   540,   427,   560,   419,   548,   424,   557,
     416,   541,   428,   561,   420,   549,   425,   558,   417,   542,
     429,   562,   421,   550,  1305,  1307,  1300,   836,     0,   124,
     150,  1001,     0,   136,    86,   914,     0,     0,   825,     0,
       0,     0,     0,     0,     0,   205,     0,   221,     0,     0,
    1017,  1018,  1007,     0,     0,     0,     0,   930,  1192,  1193,
    1196,  1197,  1200,  1230,     0,     0,     0,     0,     0,     0,
       0,  1206,  1215,     0,     0,     0,     0,  1100,     0,  1097,
    1110,     0,  1102,     0,  1102,     0,     0,     0,     0,   475,
     474,   971,   953,   865,   958,   959,   275,   276,   850,   285,
     286,     0,     0,     0,     0,   279,   280,   289,   290,     0,
       0,   294,  1313,  1314,  1312,   343,   837,     0,   718,   721,
     723,   722,     0,     0,   215,   211,     0,  1004,  1009,     0,
       0,     0,     0,     0,     0,     0,  1220,  1204,     0,     0,
    1205,  1217,     0,  1208,  1219,     0,     0,     0,  1102,     0,
    1102,     0,  1102,     0,  1103,     0,     0,     0,   148,     0,
     153,     0,   156,     0,   851,   283,   284,     0,   287,   288,
     171,  1005,  1194,  1195,     0,     0,  1203,  1210,     0,  1207,
    1218,     0,  1114,  1101,     0,     0,     0,  1111,     0,     0,
    1102,  1102,     0,  1102,   147,   146,   151,   149,     0,     0,
     355,   481,   269,     0,     0,     0,  1098,     0,     0,  1102,
    1107,     0,     0,  1104,     0,     0,   154,  1211,     0,  1115,
    1116,  1112,     0,     0,     0,     0,  1102,   152,     0,     0,
    1108,  1109,  1105,     0,  1099,  1113,     0,  1106
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   215,    57,    58,   987,   341,   449,   450,   451,   452,
     453,   454,   455,   456,  1003,  1004,  1005,  1006,  1007,  1008,
    1009,  1010,  1011,  1012,  1013,  1014,   264,   265,   457,   458,
      60,   342,   343,   758,   787,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,  2107,  2108,  2109,   471,   658,
     659,   660,   472,   473,   474,   475,  1801,   417,   513,   418,
     514,   419,   515,   516,   879,   420,   421,    61,    62,    63,
      64,    65,   344,   345,   346,   347,   348,  1015,  1016,   349,
     350,   761,  1283,   351,   663,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   746,
     841,   665,  1340,   368,   369,   666,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   667,   668,  1141,
    1342,   564,   565,   217,    67,   506,   507,   218,    69,   219,
     220,    70,    71,    72,    73,    74,    75,   221,   120,   222,
     270,   944,   945,   223,   224,   225,    79,    80,    81,    82,
      83,   226,   753,  1217,   273,   479,    85,    86,   496,   497,
     889,  1240,   730,  1064,  1065,   126,    87,   480,    89,   481,
     129,   130,   131,   948,   132,   121,    91,  1113,  1114,  1115,
      92,   590,  1231,   483,   592,  1233,   135,   189,   484,   485,
     191,   952,   137,  1033,  1551,  1021,  1022,  1552,   192,   193,
     194,   195,   754,  1218,   230,   231,   232,   233,   234,   235,
     671,   672,  2027,  2028,   673,   674,   675,    95,   486,   274,
      96,    97,   275,   276,   277,   678,   679,   680,   681,   278,
     682,   910,  1635,  1144,   685,   686,   687,  1145,   689,    98,
      99,   383,   100,   101,   102,   103,   104,   105,   847,  1412,
    1413,   848,   849,   384,   385,   386,   387
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1985
static const int yypact[] =
{
   38824, -1985, -1985, -1985, -1985,   277, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985,
   -1985, -1985,   946,    88, -1985, -1985, -1985, -1985, -1985, -1985,
      69,   108,   118,   403,   183, -1985, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985,  2594,  2380, -1985, -1985, -1985,   231, -1985,
     211,   403,    43, -1985,   305,   256,  1066, -1985,   322, -1985,
     575, -1985,   272, -1985, -1985, -1985, -1985, -1985,  1071, -1985,
    1040,   289, -1985,   445,  1470, 38421,  3034,   288, 39124, -1985,
     519,   537, -1985,  1462, 41880, 36866, -1985, -1985, -1985, -1985,
   -1985, -1985, 38928, 38012,   682, -1985,    88, -1985, -1985,   183,
     183,   700,   600,   183, 29474,   403, -1985, -1985,   346, -1985,
    2594, -1985, -1985, -1985,   616, -1985,   697,   635, -1985, -1985,
   39223, -1985, -1985,  2380,  2465,  1618,  2192,  2071, 24095, -1985,
     648,    13,   736, 30593, 41410, -1985, 30721, -1985, -1985, -1985,
     403, -1985,  1188,  1242,  1349,    93, 41410, -1985, 41137, 30849,
   41410, 30977, -1985, 31105, -1985, -1985,   403, -1985, -1985,   963,
     660,   668,   709, -1985, -1985,   892, -1985,   256,   438, -1985,
   -1985, -1985, -1985, -1985,  1270,   920,   519,  2465,  1392,  2071,
   41880, 41880,   502, -1985,  1358,   738,   754,   660,   668,   709,
    1012,   519,  1373, -1985, 27994,   833, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985, -1985, -1985, -1985,   817, -1985,   341, -1985,
     681, -1985, -1985,   850, -1985,   858,  1603, 35938,   356,   420,
   -1985, -1985,   533,   591,   886,   956,   221,   913, -1985,   221,
   -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985, -1985, -1985, -1985,   965,   983, -1985, -1985,
   -1985, -1985, -1985, -1985,   130,    89, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985, 38623, -1985, 17766, 37290, 42087, 17907, -1985,
     915,  1037,   971, -1985, -1985,   256, 38522, -1985, -1985, -1985,
   -1985, -1985, -1985, -1985,   272,   445, 39718, 41880, 40009, -1985,
   -1985, -1985, -1985, -1985,   999,   700,   700, -1985, 29474,    76,
   -1985, -1985, 29548, 29622, 29622,  1010, 41592, 29474, -1985, -1985,
    1032,  1044, 41592, 29474,  1062,  1070,  1082,  1110,  1117, 29696,
   -1985,  1128, -1985, 12802, -1985,   183,  9809, -1985, -1985, -1985,
   -1985,  1131, -1985,   104,  1139, -1985, -1985,    88, -1985, -1985,
   12977, -1985,  1961, 28068, -1985,   750,   482,  1019, 29474,   842,
    1324,  1026,  1144,  1065,  1274,   100,  1961,  1170,   658, -1985,
    1961, -1985,   980,  1225,  1459,  1006,  1476,  1165,  1183,  1205,
    1336,   103,  1961,   700, -1985, -1985, -1985, -1985,  1251,   276,
   41228,  1254,  1281, -1985, -1985, 28142, -1985, 28216, -1985,   593,
     662,  1292,  1304,  2465,  2525,  2546,   697, -1985, -1985,   597,
   -1985, -1985, -1985, -1985, -1985,  1032,  1131, -1985, -1985, -1985,
   -1985,   912,  1054, -1985,  1019, -1985,  1459, 36054, -1985, 24219,
   41137, -1985,   376, 40864, 40106, -1985, -1985,  1308, -1985,   403,
   -1985, -1985,    88, 40300, 39912,  5458, 41501, -1985, -1985,  1169,
    1317,  1317,   323, -1985,  1312, -1985, -1985, -1985,   110,   918,
     126, -1985, -1985, 29945,  1333, -1985,  1528, -1985, -1985,   307,
   -1985, -1985, -1985,  1339, 30081, 30209,   154,  1008,   658, 37078,
   39322, -1985,   519,  1462, -1985, -1985, 36972, -1985, -1985,  1352,
   -1985,   403, -1985, -1985, -1985,  1577, 41592, -1985,   376, -1985,
   30337, 30465,  1362,  1375, -1985,  1377, -1985,  1412, -1985, -1985,
    2580,  1413,   410, -1985, -1985, -1985, -1985,   939,   547, 36054,
     729, -1985, 31233, 31361, -1985,   729, -1985, 31489, 31617,   729,
   -1985, 31745, 31873, -1985, -1985,  2380,  2380,  2380,  2380,  2380,
   22275,   597,  1270,   920,   597, -1985, 28290, 37290, -1985,   915,
   37290, -1985,   915, -1985, -1985,  2380,  2380,   597, -1985, -1985,
    1411,   169, -1985, -1985,  1416,  1427, 40955,  1550,  1424,  1435,
   -1985, 32001, -1985, 32129,   437, -1985, 35703, 28364,  2380, -1985,
    1285,   817, -1985, -1985, -1985, -1985, -1985,   697,  1436,   519,
     733,    71,   391,  1033,  1447, -1985, 40591,  1450, -1985, 40682,
    1463, 40773,  1468, 41046, -1985, -1985, -1985,  1202, -1985, 29474,
     403, -1985, -1985,  1481, -1985, -1985,   963,   660,   668,   709,
   -1985,  1483, -1985, -1985, -1985, -1985, -1985,   519,  1429,   738,
   -1985, -1985,  1490, -1985, 18048, -1985,   915, -1985,   179, 28438,
    1488,  1504,  1509,   148, 18189,  1519,    88,  1527,  1536, 18330,
    1032,  2172,  1556,  1578,    88, -1985, -1985,  1131,  1585,  1595,
    1596,  1457, 16206,  1961, 16497, 25774,  1961,  1961, -1985, 16638,
   38724, -1985, -1985, -1985, -1985, -1985, 18471, 18612, 18753, 18894,
   -1985, -1985, -1985,   915, 19035, -1985, -1985, -1985, 19176, -1985,
   -1985,   183,   183,   700,   526,   403,  1469,  1594, -1985,   697,
     288, -1985,   519,  2465, 41880, 41880, 37290, -1985, -1985, 39815,
   29474,   173,  1599,   218, -1985, 24343, -1985, -1985, 28512, -1985,
   -1985, -1985, -1985, 41592,  1610, -1985, -1985, -1985, -1985, -1985,
   36402, 41592, 24483,    88, 36518, 41592, 29474,   183,   183,   183,
   29474, 12802, -1985, -1985, 41683, -1985, 13140, 13286, 13432, -1985,
   -1985, -1985, -1985, 10981,  1606,   157, 22415, -1985, -1985,   150,
   -1985,   636, -1985, 22555,  1605, -1985, 22695, -1985, -1985,  1609,
   -1985, -1985, 25848,  1631, 29474, -1985, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985, -1985, -1985, -1985, 28068,   163, -1985, -1985,
   -1985, -1985, 29474, 29474, 29474, 29474, 29474, 29474, 29474,  1019,
    1459, 29474, 29474, -1985, 29474, 28068, 28068, 28068, 28068, 28068,
   29474, 29474, 13578, 28068, -1985,  1635, -1985, -1985, 25922,  1638,
   29474, 28068, 29474, 29474, 29474, 29474, 29474, 29474, 29474, 29474,
   29474, 29474, 29474, 28068, 28068, 28068, 28068, 28068, 29474, 29474,
   13724, 28068, -1985, -1985,   365,   817, 41501, -1985, -1985, 38112,
   41228, 41228, -1985,  1597,  1600,  1614, -1985,  1622,  1623,  1624,
   -1985, -1985, -1985, -1985,   697, -1985, -1985, -1985, -1985,  1604,
   -1985, -1985, 24095, 24095, 35822,   519,   919, -1985,   170,  1085,
    1645, 36054,  1090,  1615,  1619, -1985, -1985, -1985,  1577, 36170,
   40203, -1985, -1985,    88, -1985, -1985, -1985, 37184,  1630,    88,
   36286,  2302, 24607,  1365, 40397, -1985,  1636, -1985,   915, -1985,
     915, -1985, -1985, -1985,   915, -1985,  1641, -1985,   792, -1985,
   -1985,  2747,  2747,  1317,  1317, -1985,  1317,   187, -1985,  1317,
    1317, -1985, -1985,   769, -1985,  1339,   769, -1985,  1339,   921,
   28586,  2019, 29474,   624, -1985,  1646,   697, 39421, -1985,   519,
    2465, -1985, -1985,  1039,   833, 35938, 29809,   561,   221, -1985,
     221,  2380, -1985, -1985, -1985, -1985,   178, -1985,   196, -1985,
     154, 37078, 24095, -1985, -1985,  1655, -1985, -1985, -1985, 41137,
   41137, 29474,    88, -1985, 32257,   144, -1985,   807,   824, -1985,
   41137,    88,   882,    88,  1616, -1985, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985,  1317, -1985, -1985, -1985, -1985, -1985, 37394,
    1513, -1985, 22835, 41984, 22975, -1985, -1985, 12630, -1985, -1985,
   40494, -1985, -1985,   697,  1270, -1985,   920, -1985,   697, -1985,
   28290, -1985, -1985, -1985, -1985, -1985,   915, -1985,   915, -1985,
   -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985,
    1412,   167,   174,  1648, -1985, 32385, 32513,  1652, -1985, 32641,
   32769, 32897, -1985,   404,   269,   381,  1223,  1419,  1620,  1658,
    1661, -1985,  1654,  1656,  1657,   519,   597,  2071,    71, 39520,
   28660,   733, -1985, -1985, 41319, -1985, -1985,   817, -1985, -1985,
   41319, -1985, -1985,   817, -1985, -1985, 41319, -1985, -1985,   817,
   -1985, -1985, 41319, -1985,   817, -1985, -1985, -1985, -1985, -1985,
   -1985, -1985,  1663,  1667, -1985,  1302,  1669,  1670,   336, -1985,
   23115, -1985, -1985, 19317,  1668,  1671, 19458, 29474, 29474, -1985,
   28734, 28808,  1674,  1676,  1687, 24836,  1688,    88, 25996,  2523,
    1539, 26070, -1985,  1759, -1985, -1985, 26144,  1691, -1985, -1985,
   -1985,  1692,  1693, 26218, 16779,   183,  1697, 29474, 29474,    88,
   -1985, -1985, -1985, -1985, 21995,   933, 28068, -1985,  1518, -1985,
   29474, 13870, 14016, 28068, -1985, 29474, 14162,  1490, 19599, 19740,
   19881, 20022, -1985, -1985, -1985, 20163, -1985, -1985, -1985, 20304,
   -1985, -1985,   700,   700,  1700,  1702, 35457, 35584,   597, -1985,
     597, 37290, -1985, 37290, -1985, -1985,  1705, 28068, -1985, 28068,
     602, -1985,   154, -1985, -1985, -1985, -1985, 10981,  1704,  1709,
   41772, 24095, 39025, 29474,  1713, -1985, -1985, -1985, -1985, -1985,
     519,  1714,  1716,  1706,  1720, -1985, -1985, -1985, -1985, -1985,
   36634, 26292,  1718,  1721,  1722, 29474,  1717, 36750,  1724,   233,
     360,   684,  1726,  1731,  1735, -1985,    88, -1985, -1985, -1985,
   -1985, -1985, 29474,   183,   198, 37497, 23255,  1736, -1985, 28068,
   -1985,   199, 37600, 23395, -1985,   202, 37703, 23535, -1985, -1985,
   -1985, -1985,   494,  1740, -1985, -1985, -1985, 26366,  5693, -1985,
   -1985,  1736, -1985, -1985, -1985, -1985, -1985, -1985,   750,   980,
     750,   980,   482,  1225,   482,  1225,  1019,  1459,  1019,  1459,
    1019,  1459, -1985, -1985,   842,  1006, -1985, -1985,   842,  1006,
   -1985, -1985,  1324,  1476, -1985, -1985,  1026,  1165, -1985, -1985,
    1144,  1183,  1065,  1205,  1274,  1336, -1985,    56, -1985, 26440,
    1737,  8452,  1738, -1985, -1985, -1985, -1985, -1985,   723, -1985,
   -1985, -1985, 26514, 10708, -1985, -1985, -1985, -1985, -1985, -1985,
   -1985, -1985,   750,   980,   750,   980,   482,  1225,   482,  1225,
    1019,  1459,  1019,  1459,  1019,  1459,  1019,  1459, -1985, -1985,
     842,  1006, -1985, -1985,   842,  1006, -1985, -1985,  1324,  1476,
   -1985, -1985,  1026,  1165, -1985, -1985,  1144,  1183,  1065,  1205,
    1274,  1336, -1985, 26588,  1741, 12295,  1748, -1985, -1985,    88,
      88, -1985, -1985,   475,   793, -1985, -1985, -1985, 38215, 38318,
   -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985,
    1626,  1803,   919, -1985, 24095,    88, -1985, -1985, 24095, -1985,
     687, -1985, -1985, -1985,   411,   519,  2465, -1985, -1985,   388,
    1646,  1604,   519,  2465, -1985,  1744, -1985,   704,   487,  1280,
    2380,  1757, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985, -1985,  2390, -1985, -1985, -1985, -1985, -1985,
   23675,   255,   833, 35938, 21855,   782,   597,   697, -1985,   597,
   29474, -1985,   950, -1985, -1985, -1985,  1764,  1641,  1605,  1646,
    1095, 24095,  1108,  1146, -1985, -1985, -1985, 33025, 33153,  1746,
   -1985,  4269, 41501, 41501, 41501, 41501, -1985, -1985, -1985, 29474,
    1763, 28882, -1985,   915, -1985, -1985, 28956, -1985, 29030, -1985,
   -1985, -1985,  1517,  1513, -1985, -1985,  1317, -1985, -1985, -1985,
   -1985, -1985,  1517,  1513, -1985, 29104,  9057, -1985, -1985, -1985,
   -1985, -1985, 20445, -1985, -1985,    78, -1985, -1985,   190,  1762,
   -1985, 33281, 33409,   519,  1419,  1768, -1985, -1985, -1985, -1985,
   -1985, -1985,   597,   733, -1985,  1769,  1770, -1985,  1772,  1774,
    1775, -1985, -1985, 35938, -1985, -1985, -1985, -1985, -1985, 29474,
    1779,  1192, -1985, -1985, -1985, -1985,   213, 37806, 23815, -1985,
   -1985, -1985, 20586, 21995, 21995, -1985, -1985, -1985, 20727, 26662,
   16920, 26736, 26810, 24976, 26884, 17061, 22135,  1780,  1783, 22135,
   29474, 29178,  1854, 26958,  1693, 11878,   183, 22135,  1793, 12439,
   24836, -1985,  1576, 27032, 25256, 27106, -1985, -1985, -1985, -1985,
   -1985,   116,   183,  1797,   757, -1985, -1985, -1985, -1985, 20868,
   -1985, -1985, -1985,  1794,  1799,    88, -1985, -1985, -1985, -1985,
   -1985, -1985, 41137, -1985, -1985, -1985, -1985, 27180,  1792, 25330,
    1795, 27254,  1796, 25404,  1798,  1801,  1805, -1985, -1985, -1985,
   -1985, -1985, -1985, 14308, -1985, -1985,  1814,  1245, -1985,  2649,
    1816,  1819,  1820,  1812,  1815, 24095,  1716, 39619,  1714, 29474,
   24095, 29474,  1828, -1985, -1985, -1985, -1985, -1985,  1826, -1985,
   29252, -1985, -1985,  1829,  1830, 29474, 29474,  1827, 41683, -1985,
      88,    88, 29474, 14454,    88, -1985, -1985,   700, -1985, -1985,
   -1985, -1985, -1985, -1985, -1985, 14600, -1985, -1985, -1985, -1985,
   28068, 14746, 14892, 28068, 15038, 15184, -1985, -1985, -1985, 15330,
   15476, 15622, 15768, -1985, -1985, -1985,   365,  1840,   644, -1985,
   -1985,   519,   919,  1957,  1257, 24095, -1985, -1985,  1839,   597,
     597,  1317,   597,  1604,  1843, -1985, -1985,  1841, -1985,   216,
   37909, 23955, -1985,   519,   964, -1985,   697, -1985, -1985,  1842,
    1862, -1985, -1985, -1985,  1261, -1985, -1985, 33537,  1846, 33665,
   -1985,  1848, 36054, -1985,  1870, -1985, 29474, 28290,  2415, -1985,
   -1985,  2415, -1985, -1985, -1985,  2415, -1985, -1985, 21009, 21150,
   -1985, -1985, -1985, 33793, -1985, 33921,    71,   733, -1985, -1985,
   -1985, -1985, -1985, -1985, -1985,  2071, 27328, -1985, -1985, -1985,
   -1985, -1985, -1985, 21291, -1985, -1985, -1985, 21432, 24836,  6914,
   24836,  6914, 16351, -1985, 25116, 17202, -1985, -1985, 22135, 22135,
   27402, 24836, 27476, 24696,  1850, 25478, 27550,   121, 21573, -1985,
   29474, -1985, 16351, -1985, 12439, 24836, 25552, 29326,    77,  1873,
      77,   162,  1871, -1985,    88, 29474, 29474,    88, 28068, 28068,
   28068, 28068, 28068, 28068, 28068, 28068, 15914, 16060, -1985, -1985,
   -1985,   519,  1716,  1876, -1985, -1985, -1985, -1985, -1985,  1265,
    1714, -1985,  1882,  1883,  1874,  1875,  1273,  1877,  1885, 24095,
   29474, 12802, -1985, -1985, -1985,  1888,  1891,  1893,  1894, 29474,
    1884,  1887,  1906,  1908, -1985,  1909, -1985, -1985, -1985, -1985,
   -1985, -1985, -1985,   218, -1985, -1985, -1985,   218, -1985, -1985,
   -1985, -1985, -1985,   218, -1985, -1985, -1985,   218, -1985, -1985,
   -1985,   218, -1985, -1985, -1985,   218, -1985, -1985, -1985,   218,
   -1985, -1985, -1985,   218, -1985, -1985, -1985, -1985,  1277, -1985,
   -1985,  1604, 28068, -1985, -1985, -1985, 29474, 29474, -1985, 34049,
   34177, 34305, 34433, 34561, 41501, -1985, 41501, -1985,  6517, 21714,
   -1985, -1985, -1985, 34689, 34817, 34945, 35073, -1985,  1971,  1975,
   -1985, -1985, -1985, -1985, 24836, 29474, 29400,  1873, 17343, 17484,
   25626, -1985, 16351, 25116, 27624, 17625,    88, -1985,   981,   504,
   -1985,   180,    77,  1915,    77,   337,   656,  1920,  1041, -1985,
   -1985,  1714, -1985, -1985, -1985, -1985, -1985, -1985, -1985, -1985,
   -1985,  1314,  1912,  1913,  1925, -1985, -1985, -1985, -1985,  1916,
    1918, -1985, -1985, -1985, -1985, -1985, -1985,  1928, -1985, -1985,
   -1985, -1985, 35201, 35329, -1985, -1985, 27698, -1985, -1985, 24836,
   24836, 27772, 25700, 24836, 27846, 24696,  1930, -1985, 24836, 29474,
   -1985, -1985, 25116, -1985, -1985,  1929,  1934,    77,    77, 29474,
      77,  1947,    77,  1078, -1985,   182,  1317,   576, -1985,   582,
   -1985,  1945, -1985,    88, -1985, -1985, -1985, 28882, -1985, -1985,
   -1985, -1985, -1985, -1985,  1930, 24836, -1985, -1985, 27920, -1985,
   -1985,   183, -1985, -1985,  1184,  1956,  1236, -1985,  1121,  1955,
      77,    77,  1959,    77, -1985, -1985, -1985, -1985,   337,   689,
   -1985, -1985, -1985, 24836,   590,  1963, -1985,  1966,  1969,    77,
   -1985,  1258,  1279, -1985,  1204,   678, -1985, -1985, 29474, -1985,
   -1985, -1985,  1326,  1970,  1973,  1974,    77, -1985,  1977,  1976,
   -1985, -1985, -1985,  1332, -1985, -1985,  1978, -1985
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1985,  3702,    87, 10376, -1985,  1742, -1985, -1985, -1985, -1985,
   -1985, -1985,  1612,  1625,  -988, -1985,  -925,  -449,   185,   191,
    -902,  -873,  -818, -1985,  -696,  -694, -1985, -1985,  1628,  1629,
   -1985,  2650,  4873, -1985,   471,   596,   601, -1985, -1985, -1985,
   -1985,  1632, -1985, -1985, -1985,  -649, -1984,   -44, -1985, -1985,
   -1985, -1985,  1911,  1988,  -124,  -115,   595,  -795, -1985,  -820,
   -1985,  -864, -1985,  1118,  -103,  1240,  -971,   -25,  1824,    12,
    1831,   -43,     0, -1985,  1196, -1985, -1985,  7215,  4146, -1985,
    5630,  -438,  1306, -1985,  3246, -1985,  -330,   299,   488,  -130,
   -1985,   439,  -653,  -228,    22,    60,   105,    64,  8294,  4482,
    -293,  9273,  -813,  2211, -1985,  4249,  -240,   493,   712,  1105,
     762,   152,   197,   189,   273,   292,   318,  4773,  -482,  7609,
    -736,  1545,   248, 11007,   -71,  1147,  -142,  3535, 11111,  8475,
   -1985, -1985, -1985,   -87,   -49,   -35, -1985,  6628, -1985,  2772,
    2142,   645,  -728,  3570,  9121, -1985, 11352, -1985, -1985, -1985,
     -76,  3807, -1985, -1985,  2008,  6685,    14, -1985, -1985,  1099,
    1684,  1398,  1813,   -81,   -72,  6641, 10032,  1130,  4298,  -454,
     -89,  -210,   598,  -874,  -122,  2893, -1985, -1985, -1094, -1985,
    6824,  -520, -1198,  7639,    94,  -723,    51,   460,   727,  1707,
    -258,  -807,  -469, -1012,  -544,  -934,  -921,   327,   785,   973,
     -11,  1863,  -729,  -198,  -336,  -335,  -440, -1985,  -110,  -106,
    9608,  -376,    41, -1101, -1985, -1985, -1985,  2040, -1985,  2638,
    2050,   -65,  3045,   -68,  1878,   859,   908, -1985, -1985, -1985,
     -90,  1075, -1543,  -261, -1985, -1985, -1985,   -26, -1985,  2057,
     -39,    19,  2051,  1548, -1985, -1985, -1985,  2060,  -821,   401,
   -1985,  -802,   809, -1985, -1985, -1985, -1985
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1296
static const yytype_int16 yytable[] =
{
      66,  1500,  1034,  1242,   279,  1159,  1475,   228,   424,  1429,
     953,  1246,   408,   510,   179,   294,   229,   684,  1550,  1476,
     401,  1592,   500,   790,   402,  1536,   295,  1404,  1416,   959,
     288,   501,   110,   112,  1698,   522,   180,   527,   705,   531,
     957,   150,   177,   117,   523,   407,   528,  1417,   532,   399,
     181,   111,   285,  1428,   125,   517,   290,  1739,   400,   786,
    1265,   142,  1266,   118,  1032,   408,   151,  1272,   154,  1273,
    1276,  1081,  1277,   813,     1,   202,  1488,   821,  1427,  1822,
    1866,   307,   108,  1448,   165,   178,   125,  1530,   216,  1540,
     613,     1,  1877,   125,   508,    66,     1,   176,   407,     2,
     548,   551,    66,    66,  1406,   764,   304,   284,   123,   286,
    1532,   916,  1542,   791,   293,   389,   296,   811,   392,  1878,
     839,   307,   547,   550,  1878,  2147,   307,   918,   305,   306,
     216,   611,   309,   125,   125,   429,   188,   188,   422,  1533,
      -8,  1543,   151,   476,   489,  1509,   476,     1,   140,  1129,
     503,  1267,   505,   150,  1322,   505,   489,     1,   518,   476,
     489,   476,   307,   476,  1291,  2032,   534,   307,  1553,  1450,
       1,  1517,     1,     1,   143,  1556,   144,     1,   151,  1497,
     630,  2147,  1388,  2100,   404,  2141,   635,   125,   108,  -454,
     811,  1824,   108,   113,  1534,   576,  1544,  1498,   986,  -109,
    -100,   714,   388,  -104,   561,  1823,   577,   982,  -618,   294,
     676,   294,  2026,  1548,   -82,   179,   151,   -89,   569,   614,
     295,   951,   295,   509,     1,   179,   165,   581,   799,   706,
    1047,  1048,   114,   288,   765,   839,   125,   180,   307,   125,
     917,  1879,   115,  1499,  1449,   812,  2017,   180,   840,  1880,
    1687,   181,   688,   698,  1880,   285,   765,   612,     1,   290,
    1088,  1089,   628,  1094,  1095,  1100,  1101,  1105,  1106,   947,
     594,   695,  1130,   621,  1510,   148,   149,  1536,   661,     1,
    1268,   866,   692,     2,  1536,   766,   694,  2033,  1536,  1263,
    1284,   560,   123,  1268,   723,  2034,    66,  1554,    66,   424,
     766,   693,  1183,  1187,  1557,  2101,   631,  2142,   917,  2097,
     708,  2097,   709,  2102,   865,  2143,   724,  1825,  1207,   982,
    -613,   335,   724,  2016,   188,     1,   765,   882,  -109,  -100,
      30,    31,  -104,   561,  1282,    34,  1284,   188,   139,     1,
       1,  1540,    40,   -82,     1,    54,   -89,   767,  1540,     1,
       2,   307,  1540,   138,   755,   106,  1081,   594,  1719,   907,
     909,   911,   913,  1209,  1542,   307,    45,    46,     1,     2,
    1166,  1542,   711,  1173,     2,  1542,    53,   929,   930,    54,
    1348,   711,   597,  -458,  -458,  -458,   147,   711,   942,   151,
     845,     1,  1082,  1543,  1668,   561,  1672,   561,   596,   956,
    1543,   843,   157,   125,  1543,  -868,     1,     1,   229,   125,
     107,  2106,   203,     1,     1,   684,   684,   684,   684,  1027,
     161,   597,   151,   204,  1597,  1050,  1598,   845,   953,   880,
     518,     2,   145,   884,   581,  1027,   146,   931,   986,   895,
       1,     1,   896,   845,   884,   903,   845,  1055,  1544,  1059,
     912,   705,  1025,   152,   262,  1544,  1056,  1035,  1060,  1544,
    1037,  1595,  1292,  1294,  1296,     2,  1069,  1764,  1025,   408,
    1070,  1670,   567,  1674,   476,   476,   151,   390,     1,   943,
     216,   595,   853,   125,   857,   596,   970,  1409,  1410,  1720,
       1,   974,  1356,  1358,  1360,   165,   975,  1838,  1910,  1690,
     476,   476,   953,   553,  1494,    28,  1495,  1485,  -458,   307,
     599,  -458,   988,  1771,   136, -1043, -1043,  1708,   151,   992,
   -1043,   877,   476,   476,  1717,   148,   149,   476,   476,     1,
    1794,   476,   476,  -868,   600,   125,   125,   125,   125,   125,
    1820,   125,  1767,  1253,   125,   598,  1254,  1081,  1032,   599,
       1,  1549,  1293,  1295,  1297,   125,   125,   125,  1573,   148,
     149,   151,   600,  1531,  1537,  1541,   845,   505,  1061,   540,
    1429,   476,  1488,   476,   534,   162,  1063,   561,   125,     1,
    1326,   151,  1357,  1359,  1361,     1,   994,   994,   994,   994,
     994,   125,   602,   405,   594,   307,  1087,  1416,  1416,  1093,
       1,  1099,  1755,  1104,  1756,     1,   188,   188,  1392,  1536,
    1118,  1816,  1787,   993,  1763,  1788,  1417,  1417,  1776,  1734,
     795,   796,   294,  1735,  1817,     2,   713,     1,  2099, -1026,
       2, -1026,  1447,   295,   123,   713,  1201,  1203,   179,  1427,
      53,   713,  1243,   855,  1140,   859,  1147,   148,   149,   307,
     688,   688,   688,   688,  1160,  1805,  2106,   540, -1068,     1,
     180,   237,   601,   597,  1072,   815,   816,   817,   148,   149,
    1068,  1306,  1308,  1540,  1310,   991,   661,   661,   661,   661,
     947,     1,   303,   185,  1652,  1493, -1068,   593,  1657,   307,
     601,  1659,     1,  1661,   151,  1195,  1542,  1117,  1922,  1370,
    1372,  1374,  1376,   125,  2041,   307,   155,   262,   156,   581,
    1192,  1193,  2146,   951,  2168,  1212, -1074,  1800,   860,  1803,
     603,    54,   596,  1219,  1909,  1543,   723,    94,   308,  1916,
    1224,  1234,   561,  1244,  1224,  1234,  -458,  -458,  -458,     1,
     947,  1212,   424,   424,   845,   148,   149,  1600,  1581,  1582,
    1606,   395,  2106,  1256,  1584,  1480,  1249,  1250,  1251,   203,
    1585,   947,  1547,  -904,  1069,  1269,  1586,  1587,  1070,  1279,
     204,  1976,  1270,  1286,   711,   428,  -458,  -458,  -458,  2031,
    1544,  2110,   818,   600,  1780,   543,  1781,   861,  1647,   536,
     819,   599,  1536,   820,  1978,  1550,     1,   537,   108,  -460,
    -460,  -460,  1183,  1187,  1183,  1187,  2000,   759,  2177,  1765,
     947,   570,   190,  1721,  2166,  1346,  1537,  1541,  1766,  1351,
       1,   396,    94,  1537,  1541,  1074,  1765,  1537,  1541,   297,
      94,  1330,   397,  1468,  1469,  1775,  1470,   401,   538,  1472,
    1473,   402,   424,  1511,  1411,   151,  1414,  1261,  1746,   845,
     845,   845,  1735,  -458,   801,   802,  1540,  1079,   430,  1396,
    1507,  -458,   684,   431,  -458,   684,  1484,   556,  1080,  1508,
    1332,   792,   422,  1430,   216,   400,  1502,  1503,   988,  1542,
     151,   992,  1883,   535,   185,     1,  1884,  1125,   165,  1440,
     581,   793,   794,  1160,   701,  1787,  1788,   581,  1398,  1455,
    1457,  -458,  1459,   684,   845,   136,  1785, -1068,  1543,  1555,
    1558,   601,  1573,  1522,   148,   149,  1334,   684,   684,   684,
     684,  -915,  1274,   870,  -460,  -265,  -265,  -265,  -459,  -459,
    -459,  2103,  1725,  2105,  1285,  1512,     1,  1561,   148,   149,
    1513,   125,  1997,   151,  1400,   408,  1562,   216,  2051,     1,
     125,   108,  1514,     1,   408,  1492,  1027,  1515,   125,  1323,
     125,  1496,   566,  1544,   803,   804,  1903,     1,  1068,  1575,
     151,   943,   422,  1576,     1,  1435,   108,   109,   407,   518,
     518,   571,   505,  1444,   476,   505,  1820,  1389,   572,  1930,
     518,  1518,   151,  1520,  1458,  -915,  -915,  2134,  1331,  2136,
    -915,  2138,   691,   148,   149,  1327,  1887,  -915,  1821,   939,
    1519,   604,   953,   190,   138,   769,   770,   771,   829,   830,
     125,   539,  1726,   704,  1650,   297,  1397,   395,   713,   797,
     798,  -915,  -915,  1393,  1083,   871,   136,   607,  1077,  2161,
    2162,   872,  2164,   874,  1827,   690,  -265,  -915,  2067,  -915,
    -265,   505,   505,  -459,   577,   476,   476,     1,  2172,   476,
     476,   476,   989,   151,  2000,  -216,   125,   125,   990,     1,
    1032,   148,   149,   500,  1791,  2183,   125,   701,   125,   216,
     561,   605,   501,  1333,   845,   148,   149,   151,  1985,   609,
     845,   424,   535,   151,  1298,  1300,   845,   688,  -875,   151,
     688,   822,   845,  1335,   151,  2152,  2096,   610,    30,    31,
    2097,  1399,  1691,    34,  2098,   106,  1692,   404,   151,    34,
      40,   823,   824,   661,  1362,  1364,   661,   710,   831,   832,
      88,  1401,   772,    28,   723,  1140,   940,  1147,   688,  1026,
     773,   539,  1029,   774,    45,    46,  1632,   395,  1537,  1541,
      45,    46,   688,   688,   688,   688,   732, -1042, -1042,  1645,
    1565,   891, -1042,   807,   661,  1286,  2112,  1578,   733,   280,
    2113,   159,  1490,   160,  1641,   148,   149,  -216,   661,   661,
     661,   661,   873,  -216,    88,   766,   736,   148,   149,   504,
    1479,     1,  2054,   158,   737,  1107,   476,   476,   125,  2074,
     125,  2075,  -744,  2139,  -744,  1107,   738,  2097,  1433,   809,
     845,  2140,   151,  1436,   990,    88,    88,   845,  1793,   990,
    1108,   422,   216,    88,   872,    88,     1,  1841,  1845,  1505,
    1108,  1795,    88,    88,   739,  2036,   947,   990,  1109,  1857,
    1702,   740,  1827,   426,  1314,  1318,  2158,  1702,  1109,    34,
    2097,     2,   744,  1937,  2159,   511,   151,   759,  1657,   524,
     123,  1661,   763,    88,    88,   549,   552,  1110,  1111,  1796,
     766,  -903,  1380,  1384,  2001,   990,   947,  1110,  1111,   947,
      45,    46,  1727,     1,   759,  1302,  1304,   808,  1299,  1301,
     810,  -874,   759,  -874,  -874,   814,   905,  1676,    30,    31,
     262,  1199,   835,    34,   424,  1107,  1573,   701,   424,  2155,
      40,  1682,   759,  2097,  1686,  1366,  1368,    88,  1363,  1365,
     995,   996,   997,   998,   999,  1032,   836,  1112,  1580,  2175,
    1108,  1537,  1541,  2097,    45,    46,  1032,  2176,   805,   806,
    1039,  1041,   684,   684,    53,  -903,  -903,   576,  1109,   837,
    -903,   636,   838,   683,   684,  -884,  -884,  -903,   577,  -874,
    -884,  2157,   136,   825,   826,  2097,    88,  -884,  1900,    88,
    -874,   424,   707,  -626,   872,  -626,   842,  1110,  1111,  1618,
    1977,  -903,  -903,  2173,  1988,   850,   872,  2097,  2043,   424,
     872,  -884,  -884,   545,   872,  -874,  2048,  -903,  -903,  -903,
    2066,   136,   872,    88,  2174,  -874,   872,   138,  2097,  1753,
    1754,   766,   851,  1757,   151,   593,    88,   862,   845,   845,
     395,   136,     1,  -874,  -874,  -874,    88,  1590,    88,   863,
     151,  1591,   893,  1758,  1430,  1520,   704,  2114,   422,   915,
    -884,  -884,   866,   872,  1768,  -884,   125,     2,   262,  1645,
    1027,  2179,  -884,   125,  1821,  2097,   123,  2186,  1777,   151,
     125,  2097,   922,   800,  2149,     1,   932,    30,    31,   827,
     828,  1694,    34,     1,   972,   865,  -884,  -884,  2013,    40,
    -625,   125,  -625,  1784,   979,   554,   125,   555,   701,   125,
     833,   834,   151,  1714,    30,    31,   766,   980,     2,    34,
     558,   422,   555,    45,    46,   981,    40,   476,   476,  1303,
    1305,   404,   845,   845,   845,   845,  1032,  1464,  1466, -1021,
     546, -1021,  1465,  1467,   908,  1565,   405,   914,  1040,  1042,
      45,    46,  2001,    88,   426,  1178,  1180,    30,    31,  1367,
    1369,   982,    34,   576,   985,    30,    31,  1043,  1199,    40,
      34,  1049,  1044,     1,   577,  1051,  1121,    40,   555,   947,
     947,   476,   476,  1045,   125,   424,  1052,  1315,  1319,   701,
     424,   204,   125,    45,    46,    88,  1084,   688,   688,  1090,
       1,    45,    46,   581,  1179,  1181,    54,  1912,   766,   688,
    1164,  1913,  1096,   684,  1032,  1381,  1385,  1102,   923,   924,
    1196,   163,   144,   661,   661,     2,     1,  1653,  1654,  1655,
    1278,  1119,     1,  1140,  1120,   661,  1140,  1122,   701,  1140,
     925,  1126,  1036,  1632,   926,  1038,   927,  1140,  1127,     1,
    1140,     2,  1285,  1128,     1,   424,  1345,  -216,     1,  1350,
    1527,     1,  1528,  1146,  1525,  1867,  1526,  2091,     1,  2094,
     299,   302,    30,    31,  1148,  1160,  -216,    34,   928,  1418,
    1419,  1881,   518,  1149,    40,    88,    88,    88,    88,    88,
     766,    88,  1627,  1989,    88,  1992,   424,  1834,    30,    31,
    1157,  1980,  1990,    34,  1993,    88,    88,    88,    45,    46,
      40,    30,    31,    30,    31,   422,    34,   216,    34,  2003,
     422,  2005,  1158,    40,  1027,    40,    88,   766,  2004,  1870,
    2006,  1809,  1161,  1812,    45,    46,  2130,  1810,  1256,  1813,
    1931,  1932,  1162,  1163,  1935,  1197,  1208,    45,    46,    45,
      46,  1262,  1221,  1420,   573,  1274,  1421,  1025,  1790,   397,
     759,  1438,    59,   410,  1521,  1566,  1437,   148,   149,  -216,
    1422,   683,   683,   683,   683,  -216,  1411,   766,  1423,  1424,
    1425,  1454,   684,  1462,   684,   422,   148,   149,  -216,   125,
     125,  1463,   125,  1434,  -216,  1481,   766,  1501,  -736,  1202,
    1204,  1205,  -739,  1567,   151,   116,  1568,  2150,  1588,   424,
    1569,  1589,  1570,  1571,  1593,  1594,  1663,   476,  1029,   476,
    1620,  1603,   845,    59,  1604,   711,   711,  1619,   711,   711,
     153,  1621,  1623,   711,   711,   711,   711,  1628,  1636,  1637,
    1638,  1642,  1662,   476,   430,   476,   125,    59,   688,  1683,
      59,   684,  1666,    88,  1684,  1695,   263,    59,  1697,    88,
    1222,  1699,  1700,  1710,    59,    59,  1711,  1712,  1140,  1140,
    1140,  1140,  1715,  1718,   661,  1722,  1723,    59,  1140,  1140,
     391,  1140,   731,  1140,  1724,  1736,  1729,  2072,   735,  1774,
    1742,  1745,    59,  1797,  1750,  1140,  2073,  2151,    30,    31,
     416,  1752,  1778,    34,  1160,   416,   263,  1645,   416,  1792,
      40,  1806,  -742,  1828,  1829,  1830,  1995,  2029,   263,  2029,
      59,   416,   263,   416,  1837,   416,  1307,  1309,  1831,  1311,
    1832,  1833,  1864,  1858,    45,    46,  1859,  1868,  1885,   422,
     405,   561,  1882,  1886,    53,  1889,  1896,   874,  1891,  1893,
    1897,  1895,   263,   263,  1371,  1373,  1375,  1377,   577,  1899,
     854,  1904,   858,   593,  1905,  1906,   416,  1915,  1907,  1918,
    1919,  1908,   711,   711,   711,   711,   711,   711,   711,   711,
     568,  1920,  1929,  1926,  1928,  1923,  1924,  1975,  -231,    59,
    1979,  1982,  1983,  1991,  2015,  1986,  1994,   426,   426,   775,
     776,   777,   778,   779,   780,   781,   782,   783,   784,   476,
     476,   476,   476,   476,   845,  1987,   845,   688,  1996,   688,
    2030,  2042,  2035,   476,   476,   476,   476,  2044,  2045,  2061,
    2046,  2047,  2062,  2049,  1140,   263,  2144,  2145,   263,   263,
     657,  2050,     1,   661,  2055,   661,  2095,  2056,    59,  2057,
    2058,  2063,    88,  2064,  2065,  1160,  1645,  2079,    59,   263,
      59,  2080,  2104,  1835,  1199,  2111,   711,     2,  2115,  2116,
    2117,  2029,  2118,  2029,  2119,  2120,   123,  2126,   263,  1943,
    1947,  2132,  1953,  1957,   263,  2131,   688,  1961,  1965,  1969,
    1973,    88,   476,   476,  2137,   416,  2148,   426,  1523,  1140,
    1140,  2156,  2160,  1140,  1663,  1140,  2163,  1029,  1140,   785,
    2169,    88,   661,  2170,    30,    31,  2171,  2180,   963,    34,
    2181,  2182,  2184,  2185,  2165,  2187,    40,  1645,  1516,  1160,
    1804,   964,  1426,  1160,   965,   966,  2029,  2029,   969,  2029,
     696,  2029,  1073,  1471,  1349,  1140,  1782,   697,   900,  1506,
      45,    46,    59,  1247,  1998,   734,   629,   416,  2133,   416,
      53,   892,   298,    54,  1477,   287,    30,    31,  1160,  1645,
    2154,    34,   289,  1140,   301,   291,   677,  1974,    40,  2029,
    2029,     0,  2029,     0,     0,  1160,     0,     0,  2053,    59,
       0,   416,    59,     0,     0,   263,    59,  2060,  2029,     0,
       0,   894,    45,    46,  1124,    59,   263,     0,    59,     0,
       0,     0,     0,     0,     0,  2029,    88,    88,   683,     0,
       0,   683,     0,     0,     0,     0,   713,   713,   713,   713,
     713,   713,   713,   713,     0,     0,   416,   416,    20,    21,
       0,    59,    59,     0,     0,     0,     0,     0,   416,     0,
       0,     0,     0,   973,  2069,  2071,     0,     0,   263,   683,
       0,     0,   416,   416,     0,     0,     0,    30,    31,     0,
       0,     0,    34,   683,   683,   683,   683,     0,     0,    40,
       0,    59,     0,     0,   416,   416,     0,    30,    31,   416,
     416,     0,    34,   416,   416,     0,  1664,     0,  1665,    40,
       0,     0,   657,    45,    46,     0,   493,     0,     0,   263,
       0,     0,   263,     0,     0,     0,  1155,     0,   493,     0,
     713,     0,   493,    45,    46,     0,     0,     0,    59,     0,
       0,     0,     0,   416,     0,   416,     0,   412,    59,   416,
       0,     0,     0,     0,     0,     0,   426,     0,    88,     0,
      88,     0,     0,     0,     0,     0,     0,     0,    59,  -960,
       0,    59,     0,    59,     0,    59,     0,     0,    20,    21,
       0,     0,    59,     0,   478,     0,     0,   478,     0,   759,
     759,   759,   759,   759,   759,   759,   759,  1663,  1029,     0,
     478,     0,   478,     0,   478,     0,     0,    30,    31,     0,
       0,     0,    34,     1,     0,   934,   937,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,     2,     0,
       0,   934,   937,    45,    46,   625,     0,   123,   657,   657,
     657,   657,  -458,    53,     0,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,   934,   937,     0,     0,     0,   934,   937,
       0,     0,   934,   937,     0,     0,   263,   263,   263,     0,
       0,    59,     0,   759,     0,    30,    31,   416,   728,     0,
      34,     0,   935,   938,   728,   263,     0,    40,     1,     0,
       0,     0,   263,   263,   416,     0,   263,   263,     0,     0,
       0,     0,     0,   416,     0,     0,    59,  1478,   935,   938,
       0,    45,    46,     2,     0,    59,     0,     0,   657,     0,
       0,    53,   123,     0,    54,   657,     0,     0,   657,     0,
     935,   938,  -458,  -458,     0,   935,   938,     0,     0,   935,
     938,     0,  -458,     0,     0,     0,  1504,  -458,  -458,  -458,
       0,  -458,  -458,  -458,  -458,  -458,     0,  -458,  -458,   426,
      30,    31,     0,   426,     0,    34,     0,  -458,  1020,     0,
       0,     0,    40,     0,     0,     0,  -458,  -458,  -458,  -458,
    -458,     0,     0,     0,     0,     0,     0,     0,     0,    20,
      21,     0,     0,     0,     0,   887,    45,    46,     0,     0,
       0,   983,     0,  -641,     0,     0,   887,     0,    59,    54,
      88,    59,    59,    59,     0,     0,     0,     0,    30,    31,
      30,    31,     0,    34,     0,    34,   426,     0,  -641,     0,
      40,  1814,    40,     0,   416,   416,    59,  -641,  -641,  -641,
    -641,    30,    31,    59,   426,  1579,    34,     0,     0,     0,
       0,   263,    59,    40,    45,    46,    45,    46,   978,    59,
      20,    21,   263,     0,   416,     0,    59,  1626,     0,     0,
     867,     0,     0,     0,     0,  -641,  -641,    45,    46,     0,
    -641,     0,     0,     0,     0,     0,     0,  -641,     0,    30,
      31,   868,     0,     0,    34,     0,  1617,     0,   683,   683,
       0,    40,     0,     0,     0,   478,   478,     0,     0,    59,
     683,  -641,  -641,     0,    88,     0,     0,    59,     0,     0,
       0,  -641,     0,     0,  -641,    45,    46,   984,     0,   982,
    -641,   478,   478,    59,   416,    53,     0,     0,     0,     0,
       0,    59,    59,     0,    30,    31,   416,     0,     0,    34,
       0,  1220,    59,   478,   478,     0,    40,     0,   478,   478,
       0,     0,   478,   478,     0,     0,     0,     0,   310,     0,
       1,   311,   108,     0,   657,   263,   657,     0,     0,     0,
      45,    46,   263,     0,  1020,     0,     0,     0,  1693,     0,
      53,  1020,    77,  1222,  1020,     2,     0,     0,     0,     0,
       0,     0,   478,     0,   478,     0,     0,     0,     0,     0,
    1713,     0,     0,   459,     0,     0,   459,   416,   416,     0,
     426,   416,   416,   416,     0,   426,     0,     0,     0,   459,
       0,   459,     0,   459,   315,     0,     0,     0,     0,   316,
     317,    59,   416,     0,     0,     0,    59,     0,     0,     0,
       0,     0,    59,   320,     0,     0,     0,     0,    59,     0,
       0,     0,     0,     0,    59,     0,   321,     0,     0,     0,
     322,   323,   324,   325,   326,   327,   328,   183,     0,     0,
       0,     0,   657,     0,     0,   657,   330,    77,   657,     0,
     426,   718,  1228,  1238,    77,    77,  1228,  1238,     0,     0,
       0,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    90,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   657,     0,     0,     0,
       0,   426,     0,     0,   633,   637,     0,     0,     0,     0,
     657,   657,   657,   657,     0,     0,     0,     0,     0,   683,
       0,     0,     0,     0,     0,     0,     0,     0,   416,   416,
       0,     0,     0,   263,     0,   263,     0,   133,     0,     0,
       0,     0,    59,     0,     0,     0,    88,     0,     0,    59,
       0,     0,   263,   416,    59,     0,   934,   937,     0,     0,
     934,   937,     0,     0,     0,     0,     0,   166,   186,   201,
       0,     0,   263,     0,     0,     0,   239,     0,    90,   263,
       0,     0,     0,     0,     0,    90,    90,     0,     0,   585,
       0,     0,     0,     0,     0,     0,     0,   263,   657,     0,
       0,     0,     0,     0,   263,   657,     0,     0,   263,   657,
    1020,  1020,  1020,     0,   426,     0,   201,   409,   411,   413,
     414,  1443,     0,     0,     0,  1789,   482,     1,     0,   482,
       0,     0,  1443,   935,   938,     0,     0,   935,   938,     0,
       0,     0,   482,     0,   482,     0,   482,     0,   183,     0,
       0,     0,     2,     0,     0,     0,     0,     0,   183,     0,
      77,   196,   197,   198,   199,     0,     0,     0,     0,     0,
     544,   411,   413,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   683,     0,
     683,     0,     0,     0,     0,   751,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,   574,
     589,    40,     0,     0,   459,   459,     0,     0,  1020,     0,
       0,     0,   478,   478,     0,     0,   967,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,     0,     0,     0,
     459,   459,     0,     0,     0,    53,     0,     0,    54,     0,
      59,    59,   625,     0,     0,     0,   627,   683,     0,     0,
       0,     0,   459,   459,     0,     0,   416,   459,   459,   186,
     416,   459,   459,     0,     0,   633,     0,     0,   633,   702,
       0,    90,     0,     0,     0,   478,     0,     0,     0,   585,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   459,   657,   459,     0,    59,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   416,  1914,     0,  1917,     0,     0,   416,
     416,   585,     0,     0,    59,    59,    59,    59,     0,     0,
    1925,  1927,     0,     0,     0,     0,   478,   478,     0,     0,
     478,   478,   478,  1020,  1020,     0,     0,     0,     0,     0,
    1020,  1020,     0,     0,  1020,  1020,     0,     0,     0,     0,
       0,   585,     0,     0,     0,     0,   409,   411,   413,     0,
       0,     0,     0,   416,   416,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   633,   637,  1184,  1188,     0,     0,
     875,   634,   638,     0,     0,    59,     0,   482,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   133,   263,
     657,     0,     0,     0,   633,   657,   657,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   657,     0,
     352,   657,   625,     0,     0,     0,     0,   482,   482,   657,
       0,     0,   949,     0,     0,     0,   960,     0,     0,   482,
       0,     0,  1706,     0,   423,     0,     0,     0,   166,  1706,
       0,     0,     0,   482,   482,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    59,     0,     0,   478,   478,     0,
       0,     0,   875,     0,     0,   482,   482,     0,   934,   937,
     482,   482,     0,     0,   482,   482,     0,     0,   201,   201,
     201,   201,   201,     0,     0,     0,     0,   416,     0,    59,
       0,     0,   416,     0,     0,     0,     0,     0,   201,   201,
     423,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      59,     0,     0,     0,   482,  2052,   482,     0,     0,  1066,
       0,  1075,   934,   937,  2059,     0,     0,     0,     0,     0,
       0,   183,     0,     0,     0,     0,   413,  1215,  1020,     0,
       0,     0,     0,     0,     0,   935,   938,     0,     0,     0,
       0,     0,     0,     0,   751,     0,     0,   416,     0,     0,
       0,     0,     0,  1215,     0,     0,  1215,     0,     0,     0,
       0,     0,   263,   657,     0,  1259,     0,     0,     0,     0,
       0,  2068,  2070,     0,     0,    68,     0,     0,     0,   416,
       0,   416,     0,     0,    59,     0,     0,     0,     0,   935,
     938,     0,     0,     0,   423,     0,     0,     0,   716,   719,
     721,     0,     0,   423,     0,   416,     0,   416,     0,   423,
      78,     0,     0,     0,     0,   742,     0,     0,     0,     0,
       0,     0,   352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   634,     0,     0,   634,  1200,     0,     0,   423,
     657,   657,   702,     0,   423,  1020,  1020,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   585,     0,
      68,     0,     0,  1230,     0,     0,     0,  1230,     0,     0,
      68,     0,     0,     0,   459,     0,     0,    68,    68,     0,
       0,   423,     0,   423,     0,     0,   875,     0,     0,     0,
       0,     0,     0,   585,     0,    78,     0,     0,     0,     0,
       0,   416,   585,   416,     0,    78,     0,     0,     0,   585,
       0,     0,    78,    78,   751,   423,   585,     0,     0,   491,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   491,     0,     0,     0,   491,     0,     0,     0,     0,
       0,     0,    56,     0,     0,   459,   459,     0,     0,   459,
     459,   459,     0,     0,   494,     0,     0,     0,   478,   478,
       0,   634,   638,  1185,  1189,     0,   494,   585,     0,     0,
     494,   416,   416,   416,   416,   416,    59,     0,    59,     0,
       0,     0,     0,   585,     0,   416,   416,   416,   416,     0,
       0,   634,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,  1607,     0,     0,  1431,     0,     0,
       0,     0,   478,   478,   875,     0,     0,     0,     0,     0,
       0,   166,   875,  1445,     0,     0,   423,   174,  1020,  1020,
    1452,     0,     0,   875,     0,  1460,     0,    56,     0,     0,
       0,     0,  1648,     0,    56,    56,     0,    84,     0,     0,
       0,     0,     0,     0,   416,   416,  1184,  1188,  1184,  1188,
       0,    68,     0,   423,     0,     0,     0,     0,     0,     0,
       0,    68,     0,    68,   133,     0,     0,     0,     0,   633,
       0,   633,     0,  1489,     0,     0,   459,   459,   589,     0,
       0,     0,     0,     0,   133,   352,    78,     0,     0,     0,
       0,     0,     0,     0,   949,     0,    78,     0,    78,     0,
       0,     0,     0,     0,     0,     0,     0,   482,     0,     0,
       0,     0,     0,     0,     0,   423,     0,   411,     0,     0,
       0,     0,    84,     0,     0,     0,     0,     0,     0,     0,
     934,   937,    84,   934,   937,     0,     0,     0,     0,    84,
      84,     0,     0,   949,   934,   937,   934,   937,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   482,   482,
       0,   495,   482,   482,   482,     0,   423,     0,     0,  1563,
     409,     0,     0,   495,     0,     0,     0,   495,   491,     0,
     413,     0,     0,     0,     0,     0,     0,   935,   938,   491,
     935,   938,   352,   934,   937,     0,   352,     0,   174,  1680,
       0,   935,   938,   935,   938,     0,     0,     0,   174,     0,
      56,     0,   423,   494,     0,     0,     0,     0,   478,   423,
     478,     0,   423,     0,   494,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   491,   352,     0,   478,     0,   478,     0,   423,   423,
     423,   423,   423,   423,   423,     0,     0,   423,   423,     0,
     423,   423,   423,   423,   423,   423,   423,   423,     0,   352,
     935,   938,     0,     0,     0,     0,   494,   352,   423,   423,
     423,   423,   423,   423,   423,   423,   423,   423,   423,   423,
     423,   423,   423,   423,   423,   423,     0,   352,     0,   482,
     482,     0,     0,    84,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    84,     0,    84,     0,     0,     0,     0,
     875,     0,     0,   875,     0,  1689,     0,     0,   423,   423,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   579,
       0,     0,     0,  1230,     0,     0,     0,     0,     0,     0,
    1230,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   459,   459,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1602,     0,
       0,  1608,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   579,     0,     0,     0,     0,   423,     0,   423,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     478,   478,   478,   478,   478,     0,     0,     0,     0,  1649,
       0,   459,   459,     0,   478,   478,   478,   478,   423,     0,
       0,   579,     0,  1185,  1189,  1185,  1189,   423,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     888,  1842,  1846,     0,    68,     0,   634,     0,   634,     0,
       0,   888,     0,     0,  1601,   585,     0,  1607,   423,     0,
     423,     0,     0,     0,     0,  1648,     0,     0,     0,     0,
    1798,     0,  -630,     0,     0,     0,     0,     0,     0,    78,
       0,     0,     0,   478,   478,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -630,     0,     0,
       0,     0,     0,   888,     0,     0,  -630,  -630,  -630,  -630,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1761,     0,   423,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1770,
       0,     0,     0,     0,  -630,  -630,   409,     0,     0,  -630,
       0,     0,   128,   201,     0,   585,  -630,     0,     0,     0,
       0,     0,     0,   370,     0,     0,   423,     0,     0,     0,
       0,     0,     0,     0,  1783,     0,   589,   423,     0,     0,
    -630,  -630,     0,   184,   128,     0,     0,   425,     0,     0,
    -630,   238,     0,  -630,     0,     0,  1799,     0,   982,  -630,
     482,   482,     0,   352,   352,     0,     0,     0,     0,     0,
       0,   174,     0,     0,     0,     0,     0,  1211,     0,     0,
       0,     0,     0,     0,   491,     0,     0,     0,     0,     0,
       0,   128,   128,     0,     0,   491,     0,     0,     0,     0,
       0,     0,     0,  1211,     0,     0,  1211,   459,     0,   459,
       0,     0,     0,   425,   482,   482,     0,   409,     0,   494,
       0,     0,     0,     0,     0,     0,     0,   423,     0,   423,
     494,     0,     0,   459,     0,   459,   589,     0,     0,     0,
       0,     0,     0,     0,     0,   542,     0,     0,     0,     0,
     751,   423,     0,     0,     0,     0,  1842,  1846,     0,   789,
       0,     0,     0,     0,     0,     0,     0,     0,   423,     0,
       0,     0,   423,     0,     0,   352,    84,     0,     0,   423,
       0,     0,     0,   423,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   606,     0,     0,   608,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   579,     0,
       0,     0,     0,     0,     0,     0,     0,   425,     0,     0,
       0,   717,   720,   722,     0,     0,   425,     0,     0,     0,
       0,   128,   425,     0,   585,     0,     0,     0,   743,     0,
       0,     0,  1901,   579,   184,   370,     0,     0,     0,     0,
       0,     0,   579,     0,     0,     0,   367,     0,     0,   579,
       0,     0,   425,     0,     0,     0,   579,   425,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   459,
     459,   459,   459,   459,   425,     0,   425,     0,  1843,  1847,
       0,     0,     0,   459,   459,   459,   459,   579,     0,     0,
       0,   638,     0,     0,   638,     0,     0,     0,     0,     0,
       0,     0,   638,   579,     0,     0,     0,     0,   425,     0,
     423,     0,     0,     0,   423,     0,     0,     0,     0,     0,
     482,     0,   482,   751,     0,   875,   888,     0,     0,     0,
       0,   128,     0,     0,     0,     0,     0,   888,     0,     0,
       0,     0,     0,     0,     0,     0,   482,     0,   482,     0,
       0,     0,   459,   459,     0,     0,   423,     0,   413,     0,
       0,     0,     0,     0,     0,     0,   423,     0,     0,     0,
       0,     0,     0,   128,     0,     0,     0,   423,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     664,     0,     0,     0,     0,   423,     0,   352,     0,     0,
       0,     0,   423,     0,   423,     0,     0,     0,     0,     0,
       0,   238,     0,     0,     0,     0,     0,     0,     0,   425,
       0,   423,     0,     0,     0,  1152,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   762,     0,
       0,     0,     0,     0,     0,     0,   425,     0,     0,     0,
       0,     0,     0,   128,   128,   128,   128,   128,     0,  1024,
       0,     0,   608,     0,   423,     0,     0,     0,     0,     0,
       0,     0,     0,   128,   128,   128,     0,     0,   370,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   128,     0,     0,     0,     0,     0,
       0,     0,   482,   482,   482,   482,   482,   382,   425,     0,
       0,     0,     0,     0,     0,     0,   482,   482,   482,   482,
       0,     0,     0,   638,   638,     0,     0,     0,     0,     0,
       0,     0,  1675,     0,     0,     0,     0,     0,  1281,  1677,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   423,     0,     0,     0,   423,   423,   423,     0,     0,
       0,  1313,  1317,  1321,  1325,  1329,   352,     0,  1338,   425,
       0,   423,   423,     0,  1281,   482,   482,     0,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   563,     0,  1379,
    1383,  1387,  1391,  1395,     0,   370,  1338,   423,   423,   370,
     423,   423,     0,     0,     0,   423,   423,   423,   423,     0,
       0,   238,     0,     0,     0,   425,     0,     0,     0,     0,
       0,   423,   425,     0,     0,   425,   460,     0,     0,   460,
       0,     0,     0,     0,     0,     0,     0,   423,  1031,     0,
       0,     0,   460,     0,   460,   370,   460,     0,     0,     0,
       0,   425,   425,   425,   425,   425,   425,   425,     0,     0,
     425,   425,   423,   425,   425,   425,   425,   425,   425,   425,
     425,     0,   370,     0,     0,     0,     0,     0,     0,     0,
     370,   425,   425,   425,   425,   425,   425,   425,   425,   425,
     425,   425,   425,   425,   425,   425,   425,   425,   425,     0,
     370,  1116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   382,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   425,   425,     0,     0,     0,   664,     0,     0,     0,
       0,   352,   352,     0,   423,   423,   423,   423,   423,   423,
     423,   423,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   664,   664,
     664,   664,     0,     0,     0,   423,   423,     0,   563,     0,
     563,     0,     0,     0,     0,   423,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   579,     0,     0,     0,   425,
       0,   425,     0,     0,     0,     0,     0,     0,     0,     0,
     128,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1248,     0,
       0,   425,  1252,     0,     0,     0,     0,     0,   423,     0,
     425,     0,   423,   423,     0,     0,     0,     0,     0,   128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   762,     0,   606,     0,   608,   128,
       0,   425,     0,   425,     0,     0,     0,     0,  1290,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1624,   579,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1344,     0,     0,     0,     0,
     762,     0,     0,  1355,     0,     0,     0,     0,     0,     0,
       0,     0,  1651,  1019,     0,     0,     0,     0,     0,  1658,
       0,     0,     0,  1408,     0,     0,     0,     0,     0,   425,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   352,     0,   460,   460,     0,
     563,     0,     0,  1338,     0,  1338,     0,     0,     0,   968,
       0,     0,     0,   352,   128,   128,     0,     0,     0,   425,
       0,     0,     0,   460,   460,     0,     0,     0,     0,     0,
     425,     0,   382,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   460,   460,     0,     0,     0,
     460,   460,     0,     0,   460,   460,   370,   370,     0,     0,
       0,     0,   563,     0,   352,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   460,     0,   460,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,     0,
     425,     0,   425,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,   425,   123,   606,     0,   608,     0,
       0,     0,     0,     0,   579,     0,     0,     0,     0,   382,
       0,   425,  1031,   382,     0,   425,     0,     0,   370,     0,
       0,     0,   425,     0,     0,   315,   425,     0,     0,  1019,
     316,   317,   318,    30,    31,     0,  1019,     0,    34,  1019,
       0,     0,     0,   319,   320,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,   382,
       0,   322,   323,   324,   325,   326,   327,   328,   329,    45,
      46,     0,     0,     0,     0,     0,     0,   330,   331,   901,
       0,     0,   902,   745,   334,     0,   382,     0,     0,     0,
       0,     0,   335,   336,   382,   337,   338,   339,   340,     0,
       0,     0,     0,     0,     0,   664,     0,     0,   664,     0,
       0,     0,     0,     0,   382,     0,     0,   664,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1643,
    1644,     0,     0,     0,     0,     0,   664,     0,  1290,     0,
       0,     0,  1656,     0,     0,  1355,     0,  1660,     0,     0,
     664,   664,   664,   664,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   425,     0,     0,     0,   425,     0,     0,
       0,     0,     0,     0,   310,     0,     1,   311,   108,   312,
       0,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1019,     0,   563,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     0,     0,   425,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   425,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     425,  1731,     0,     0,   563,     0,     0,     0,   128,     0,
     315,     0,     0,     0,     0,   316,   317,   318,   425,     0,
     370,     0,     0,   477,     0,   425,   477,   425,   319,   320,
       0,     0,     0,     0,     0,  1019,     0,  1019,     0,   477,
       0,   477,   321,   477,   425,     0,   322,   323,   324,   325,
     326,   327,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   331,   332,     0,     0,   333,  1174,   334,
       0,     0,  1175,     0,     0,     0,     0,   335,   336,  1738,
     337,   338,   339,   340,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   425,     0,     0,
       0,     0,     0,   563,     0,     0,     0,   460,     0,     0,
       0,     0,   128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1936,     0,     0,     0,     0,  1939,  1941,  1945,  1949,
    1951,  1955,     0,  1019,     0,  1959,  1963,  1967,  1971,     0,
       0,     0,     0,     0,   563,     0,     0,     0,   662,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   460,   460,
     382,   382,   460,   460,   460,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   425,     0,     0,     0,   425,   425,
     425,     0,     0,     0,     0,     0,     0,     0,     0,   370,
       0,     0,     0,     0,   425,   425,     0,     0,     0,     0,
       0,   370,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     425,   425,     0,   425,   425,     0,   563,     0,   425,   425,
     425,   425,     0,  1031,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   425,     0,     0,     0,   563,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     425,     0,     0,     0,  1031,     0,     0,     0,     0,  1019,
       0,     0,   382,     0,     0,     0,  1019,     0,     0,     0,
    1019,     0,     0,     0,     0,   425,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   460,
     460,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   664,   664,     0,     0,     0,
       0,     0,     0,     0,     0,   664,     0,   664,   664,     0,
       0,   664,     0,     0,   477,   477,     0,     0,     0,   664,
       0,     0,   664,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   128,     0,     0,     0,     0,     0,
     477,   477,     0,     0,   370,   370,     0,   425,   425,   425,
     425,   425,   425,   425,   425,     0,     0,     0,     0,     0,
       0,     0,   477,   477,     0,     0,     0,   477,   477,     0,
       0,   477,   477,     0,     0,     0,     0,     0,   425,   425,
    1017,     0,     0,     0,     0,     0,     0,     0,   425,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1031,     0,     0,     0,     0,     0,     0,     0,
       0,   477,     0,   477,  1933,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1731,     0,     0,
       0,     0,  1656,     0,     0,  1660,     0,     0,     0,     0,
       0,   425,     0,     0,     0,   425,   425,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1019,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   563,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   662,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1031,
       0,     0,     0,     0,   382,     0,     0,     0,     0,  1019,
    1031,  1019,     0,     0,     0,     0,   662,   662,   662,   662,
       0,     0,     0,     0,     0,     0,     0,     0,  1019,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     664,   664,   664,   664,     0,     0,   664,     0,     0,     0,
     664,   664,     0,   664,     0,   664,     0,     0,   370,     0,
       0,     0,     0,     0,     0,     0,     0,   664,     0,     0,
       0,     0,     0,     0,     0,     0,   370,  2037,  2038,     0,
       0,  1019,     0,     0,     0,     0,     0,     0,     0,     0,
     460,   460,     0,     0,     0,     0,  1017,     0,     0,     0,
       0,     0,     0,  1017,     0,     0,  1017,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   370,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   460,   460,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   563,     0,   563,     0,     0,     0,     0,     0,
    1031,     0,     0,   382,     0,     0,     0,     0,   563,   563,
       0,     0,     0,     0,     0,   382,   664,     0,     0,     0,
       0,     0,     0,     0,     0,   664,     0,   664,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   310,     0,
       1,   311,   108,   312,     0,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,   477,   477,     0,  1019,     0,     0,     0,  1031,     0,
       0,   664,   664,     0,     0,   664,     0,   664,     0,     0,
     664,     0,     0,     0,   664,     0,     0,     0,     0,     0,
       0,  2135,     0,     0,   315,     0,     0,     0,     0,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,  1031,
       0,     0,   319,   320,     0,     0,     0,   664,     0,     0,
       0,     0,     0,     0,   477,     0,   321,     0,     0,     0,
     322,   323,   324,   325,   326,   327,   328,   329,    76,     0,
       0,     0,     0,     0,     0,   664,   330,   331,   332,     0,
       0,   333,  1017,   334,  1017,     0,  2076,  2077,  1030,     0,
    2178,   335,   336,     0,   337,   338,   339,   340,   382,   382,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     460,     0,   460,     0,     0,     0,     0,     0,     0,     0,
       0,   119,     0,     0,     0,   477,   477,     0,     0,   477,
     477,   477,     0,   563,     0,     0,   460,     0,   460,     0,
       0,     0,   563,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   182,     0,     0,     0,     0,     0,     0,
       0,     0,   269,    76,     0,     0,     0,     0,     0,     0,
      76,    76,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   393,     0,
    1017,     0,     0,   662,     0,     0,   662,     0,     0,   563,
     563,     0,     0,     0,     0,   662,     0,     0,     0,     0,
       0,     0,   492,   227,     0,   406,     0,     0,     0,     0,
       0,     0,     0,     0,   492,     0,     0,     0,   492,     0,
       0,     0,     0,     0,   662,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   662,   662,
     662,   662,     0,     0,     0,   227,     0,     0,   269,   269,
       0,     0,     0,   427,     0,     0,   477,   477,   406,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   519,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   584,     0,     0,     0,     0,
       0,     0,   460,   460,   460,   460,   460,     0,   587,     0,
       0,     0,   382,     0,     0,     0,   460,   460,   460,   460,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     382,     0,     0,     0,     0,     0,  1017,     0,     0,     0,
       0,   624,     0,  1017,   269,   269,   269,  1017,     0,     0,
       0,     0,     0,     0,   182,   310,     0,     1,   311,   108,
     312,     0,   313,   314,   182,   269,    76,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   699,     0,     0,
       0,   382,     2,     0,   727,   460,   460,     0,     0,     0,
     727,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   750,     0,     0,     0,     0,     0,     0,  1131,  1132,
    1133,   642,  1134,  1135,  1136,  1137,   647,   648,  1138,     0,
       0,   315,     0,     0,     0,     0,   316,   317,   318,     0,
       0,     0,     0,     0,    34,     0,     0,     0,     0,   319,
     320,  1139,     0,   652,   653,   654,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     0,   322,   323,   324,
     325,   326,   327,   328,   329,    45,    46,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,  -453,
     334,   655,     0,  -453,   864,   262,     0,   656,   335,   336,
     869,   337,   338,   339,   340,   584,     0,     0,     0,     0,
       0,   886,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   886,     0,     0,   846,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   670,     0,     0,     0,     0,   584,     0,     0,
    1017,     0,     0,     0,   881,   519,     0,     0,     0,   890,
     946,     0,     0,     0,   977,     0,     0,     0,   897,     0,
       0,   904,     0,     0,     0,     0,     0,   477,   477,     0,
       0,     0,     0,     0,     0,     0,     0,   584,     0,     0,
       0,     0,     0,     0,     0,     0,  1017,     0,  1017,     0,
       0,     0,     0,     0,     0,   955,     0,     0,   269,     0,
       0,   971,     0,     0,     0,   269,     0,     0,   269,     0,
       0,     0,  1023,     0,     0,  1028,     0,     0,     0,     0,
       0,   477,   477,     0,     0,     0,     0,     0,  1023,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   587,
       0,     0,     0,     0,     0,     0,     0,     0,  1017,     0,
       0,     0,   587,   662,   662,     0,     0,     0,     0,     0,
       0,     0,     0,   662,     0,   662,   662,     0,     0,   662,
       0,   227,     0,     0,     0,     0,     0,   662,     0,     0,
     662,   227,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   906,     0,     0,     0,     0,     0,  1156,
       0,   227,     0,     0,   227,     0,   227,     0,   227,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   269,   269,   269,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   269,   269,   269,     0,     0,   182,     0,     0,
       0,     0,     0,  1214,   699,     0,     0,     0,     0,     0,
     699,   269,     0,     0,     0,     0,     0,     0,  1227,  1237,
     750,     0,  1227,  1237,     0,     0,     0,     0,     0,  1214,
       0,     0,  1214,     0,     0,     0,     0,     0,     0,     0,
       0,  1258,     0,     0,   269,     0,     0,     0,     0,     0,
       0,   269,     0,     0,   269,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1017,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   477,     0,   477,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   477,     0,   477,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1142,     0,
       0,     0,     0,     0,   584,     0,     0,     0,   662,   662,
     662,   662,     0,     0,   662,     0,     0,     0,   662,   662,
       0,   662,     0,   662,     0,     0,     0,     0,     0,     0,
     670,   670,   670,   670,     0,   662,     0,     0,     0,   584,
       0,     0,     0,     0,     0,     0,     0,  1442,   584,     0,
       0,     0,     0,     0,     0,   584,     0,     0,  1442,   119,
     750,   699,   584,     0,   846,   846,   846,     0,  1451,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   760,     0,     0,     0,     0,     0,   427,   427,   227,
       0,     0,     0,     0,     0,     0,     0,     0,   788,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   584,     0,     0,     0,     0,     0,     0,
       0,  1487,     0,     0,     0,     0,   587,     0,     0,   584,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   946,     0,     0,     0,     0,     0,     0,   477,
     477,   477,   477,   477,     0,     0,     0,     0,     0,     0,
       0,     0,  1483,   477,   477,   477,   477,     0,     0,    93,
     269,   269,   269,     0,   662,     0,     0,     0,   624,     0,
       0,     0,     0,   662,     0,   662,     0,   427,     0,     0,
       0,   946,     0,     0,   519,   519,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   519,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   134,     0,     0,     0,     0,     0,     0,
       0,     0,   477,   477,     0,     0,     0,     0,   406,   662,
     662,     0,     0,   662,     0,   662,     0,   587,   662,   587,
       0,     0,   662,     0,   187,   134,     0,     0,     0,   236,
       0,     0,     0,     0,    93,     0,     0,     0,     0,     0,
       0,    93,    93,     0,     0,     0,     0,     0,   269,     0,
       0,   269,     0,     0,   269,   662,     0,     0,     0,   394,
       0,     0,     0,     0,   227,     0,     0,  1156,     0,   227,
       0,     0,   403,     0,     0,  1583,     0,  1491,     0,     0,
       0,  1583,     0,   662,     0,     0,     0,   227,     0,     0,
       0,     0,   269,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   269,   269,   269,   269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   541,     0,     0,     0,   269,
       0,   269,     0,     0,     0,     0,     0,     0,     0,   699,
     557,   699,     0,     0,     0,  1679,     0,     0,   624,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1151,     0,   591,     0,  1705,     0,
       0,     0,     0,     0,     0,  1705,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   669,     0,     0,
       0,     0,     0,   269,   269,     0,     0,     0,     0,     0,
     269,   269,     0,     0,   269,   269,   427,   227,     0,     0,
       0,     0,   134,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   187,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   703,     0,    93,     0,     0,
       0,     0,   748,     0,     0,     0,     0,   670,     0,     0,
     670,     0,     0,     0,     0,     0,     0,     0,     0,  1142,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   760,   670,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1289,   670,   670,   670,   670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1312,  1316,  1320,  1324,  1328,     0,     0,  1337,  1343,     0,
       0,     0,     0,   760,     0,     0,  1354,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1378,  1382,
    1386,  1390,  1394,     0,   748,  1337,  1407,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   876,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,     0,     0,   699,     0,     0,
       0,     0,     0,     0,  1773,     0,     0,     0,     0,     0,
       0,     0,     0,   846,   846,     0,     0,     0,   269,     0,
       0,   584,     0,     0,     0,     0,     0,     0,   950,   427,
       0,   958,  1451,   427,   587,     0,     0,  1786,     0,     0,
    1028,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   876,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   134,   134,   134,   134,   134,     0,
       0,     0,     0,     0,     0,     0,   427,     0,     0,     0,
       0,     0,     0,     0,   134,   134,     0,   427,  1802,   427,
    1802,     0,     0,     0,     0,   864,     0,     0,     0,     0,
       0,   584,     0,   587,     0,  1067,     0,  1076,     0,     0,
       0,     0,     0,     0,   587,   269,   269,     0,  1078,     0,
       0,   269,   269,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   269,     0,     0,   269,     0,     0,
       0,     0,     0,     0,     0,   269,     0,     0,  1154,     0,
       0,     0,     0,     0,     0,     0,   557,     0,     0,     0,
       0,     0,     0,     0,  1172,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   669,   669,   669,   669,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   748,     0,     0,   748,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1198,     0,     0,     0,     0,   750,   519,   703,     0,
     748,     0,     0,  1151,     0,     0,  1172,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1232,
       0,     0,     0,  1232,     0,     0,     0,     0,     0,     0,
     427,  1289,   227,  1288,     0,   427,     0,     0,  1354,     0,
       0,     0,   876,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   269,   269,
     699,   699,     0,  1981,     0,     0,     0,     0,     0,     0,
       0,  1341,  1337,     0,  1337,     0,     0,   670,   670,  1353,
     584,     0,     0,     0,     0,     0,     0,  1142,     0,  1142,
     670,     0,     0,   670,     0,     0,     0,     0,     0,  1405,
     427,   670,     0,   310,  1142,     1,   311,   108,   312,     0,
     313,   314,     0,     0,     0,     0,     0,  1023,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,  1730,     0,   269,   269,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   562,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   748,     0,   876,  1432,     0,     0,     0,     0,   315,
     876,     0,     0,     0,   316,   317,   318,     0,   876,  1446,
       0,     0,     0,     0,     0,     0,  1453,   319,   320,   876,
     122,   134,     0,     0,     0,     0,     0,     0,     0,   750,
       0,   321,     0,     0,     0,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,   268,
       0,   330,   331,   332,     0,     0,   333,  1174,   334,     0,
     134,  1743,     0,     0,     0,  1744,   335,   336,  1486,   337,
     338,   339,   340,     0,   591,     0,     0,     0,     0,     0,
     134,     0,   712,     0,   427,     0,     0,     0,     0,     0,
     950,   562,     0,     0,     0,     0,     0,   562,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   950,
       0,     0,     0,     0,     0,   268,   268,     0,     0,     0,
       0,     0,  1142,  1142,  1142,  1142,     0,     0,  1142,   427,
       0,   427,   670,   670,     0,  1142,     0,  1142,     0,   562,
       0,   562,     0,     0,     0,     0,     0,     0,     0,  1142,
       0,     0,   583,     0,     0,  1564,     0,     0,     0,     0,
       0,     0,     0,     0,  1572,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   669,     0,     0,   669,  1610,  1612,     0,  1615,
       0,     0,     0,     0,     0,     0,     0,  1625,   623,     0,
       0,   268,   268,   268,     0,  1634,     0,     0,     0,     0,
       0,     0,  1172,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   268,   669,     0,     0,     0,     0,     0,     0,
    1172,     0,     0,     0,     0,  1172,     0,   669,   669,   669,
     669,   726,     0,     0,     0,     0,     0,   726,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   749,     0,
       0,     0,     0,     0,     0,     0,  1669,     0,  1673,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1018,     0,     0,     0,  1142,     0,
       0,     0,     0,     0,     0,     0,     0,  1142,     0,  1142,
    1172,     0,     0,     0,     0,     0,   876,     0,     0,   876,
       0,  1232,     0,     0,     0,     0,     0,     0,     0,  1696,
       0,   562,     0,     0,     0,     0,     0,     0,     0,  1232,
       0,     0,     0,     0,     0,     0,  1232,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1172,     0,     0,     0,
       0,     0,   583,  1142,  1142,     0,     0,  1142,     0,  1142,
       0,     0,  1142,     0,     0,     0,  1142,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   562,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1172,  1142,
    1730,     0,     0,     0,   583,  1938,  1940,  1944,  1948,  1950,
    1954,  1172,     0,     0,  1958,  1962,  1966,  1970,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1142,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   583,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1206,     0,     0,     0,     0,     0,
       0,     0,  1172,     0,     0,   268,     0,     0,     0,     0,
       0,     0,   268,     0,     0,   268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1018,     0,     0,     0,     0,     0,     0,  1018,  -875,     0,
    1018,  -875,  -875,  -875,     0,  -875,  -875,     0,     0,     0,
    1762,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1769,     0,     0,     0,     0,     0,
       0,  1772,     0,     0,     0,     0,     0,     0,     0,   403,
       0,     0,     0,  1940,  1944,  1950,  1954,  1958,  1962,  1966,
    1970,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1453,     0,   591,     0,  -875,     0,     0,     0,     0,  -875,
    -875,  -875,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -875,     0,     0,     0,     0,     0,     0,     0,
       0,   268,   268,   268,   268,     0,  -875,     0,     0,     0,
    -875,  -875,  -875,  -875,  -875,  -875,  -875,  -875,     0,     0,
       0,     0,     0,     0,     0,     0,  -875,  -875,     0,   268,
     268,   268,     0,  -875,  -875,     0,  -875,  -875,  -875,     0,
    1213,  -875,  -875,     0,  -875,  -875,  -875,  -875,   268,     0,
       0,     0,  1826,     0,     0,  1226,  1236,   749,     0,  1226,
    1236,     0,   669,   669,     0,   271,  1213,     0,  1172,  1213,
    1172,     0,   591,  1172,   669,     0,     0,     0,  1257,  1860,
    1863,   268,  1865,     0,  1018,     0,   562,     0,   268,     0,
       0,   268,  1172,     0,  1876,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   562,  1172,     0,     0,     0,
    1172,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1018,     0,  1018,     0,
       0,   271,   271,     0,     0,     0,     0,     0,     0,     0,
       0,   583,     0,     0,     0,     0,     0,     0,  1902,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   586,     0,
       0,     0,     0,     0,     0,     0,   583,     0,     0,     0,
       0,     0,     0,     0,     0,   583,     0,     0,     0,     0,
       0,     0,   583,     0,   562,     0,     0,   749,     0,   583,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   626,     0,     0,   271,   271,   271,
    1432,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1018,     0,     0,     0,   271,     0,
       0,     0,  1772,     0,     0,   562,     0,     0,     0,     0,
     583,     0,     0,     0,     0,     0,     0,   729,     0,     0,
       0,   876,     0,   729,     0,  1172,   583,     0,     0,     0,
       0,     0,     0,     0,   752,     0,     0,     0,     0,     0,
       0,     0,     0,   669,  1172,     0,     0,     0,     0,     0,
       0,  1172,     0,     0,     0,  1865,     0,  2019,     0,     0,
       0,     0,     0,     0,     0,     0,  2025,   268,   268,   268,
       0,     0,     0,     0,     0,   623,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   562,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     748,     0,     0,     0,     0,     0,     0,     0,     0,   562,
    1696,     0,     0,     0,     0,     0,     0,     0,   586,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1018,     0,     0,     0,     0,     0,     0,  1018,     0,     0,
       0,  1018,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,     0,     0,   268,     0,
     586,   268,     0,     0,     0,     0,   747,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2082,  2085,     0,  1172,     0,  1172,
       0,     0,   669,  1172,   669,     0,     0,     0,     0,   268,
     586,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   268,   268,   268,   268,     0,     0,     0,
       0,   271,     0,     0,     0,     0,     0,     0,   271,     0,
       0,   271,     0,     0,     0,     0,   268,     0,   268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1172,     0,  1678,  1172,     0,   623,     0,     0,     0,     0,
       0,   669,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1704,     0,     0,   747,     0,
       0,     0,  1704,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1172,     0,     0,
     268,   268,     0,     0,     0,     0,     0,   268,   268,     0,
       0,   268,   268,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1018,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   562,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   271,   271,   271,
     271,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     310,     0,     1,   311,   108,   312,     0,   313,   314,     0,
    1018,     0,  1018,     0,     0,   271,   271,   271,     0,     0,
       0,     0,     0,     0,     0,     0,  1216,     2,     0,  1018,
       0,     0,     0,     0,   271,     0,     0,     0,     0,     0,
       0,  1229,  1239,   752,     0,  1229,  1239,     0,     0,     0,
       0,     0,  1216,     0,     0,  1216,     0,     0,     0,     0,
       0,     0,     0,     0,  1260,     0,   315,   271,     0,     0,
       0,   316,   317,   318,   271,     0,     0,   271,     0,     0,
       0,     0,  1018,     0,   319,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,     0,
       0,     0,   322,   323,   324,   325,   326,   327,   328,   329,
       0,     0,  1153,     0,     0,     0,     0,     0,   330,   331,
     332,     0,     0,   333,     0,   334,     0,     0,  1171,     0,
     756,     0,  1176,   335,   336,   757,   337,   338,   339,   340,
       0,     0,     0,     0,     0,   268,     0,     0,   583,     0,
       0,     0,     0,     0,     0,     0,     0,   586,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   747,     0,
       0,   747,     0,   562,     0,   562,     0,     0,     0,     0,
       0,     0,   586,     0,     0,  1241,     0,     0,     0,   562,
     562,   586,     0,     0,   747,     0,     0,     0,   586,     0,
    1171,  1176,     0,   752,     0,   586,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1942,  1946,     0,  1952,  1956,
       0,     0,     0,  1960,  1964,  1968,  1972,  1287,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   583,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   268,   268,     0,  1018,   586,     0,   268,   268,
       0,     0,     0,     0,     0,  1339,   127,     0,     0,     0,
       0,   268,   586,  1352,   268,     0,     0,     0,     0,     0,
       0,     0,   268,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1403,     0,     0,     0,   127,   127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   271,   271,   271,     0,     0,     0,     0,
       0,   626,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   127,   127,     0,     0,     0,
       0,     0,     0,     0,     0,   747,     0,     0,     0,     0,
       0,     0,  1942,  1946,  1952,  1956,  1960,  1964,  1968,  1972,
       0,     0,     0,   749,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   562,     0,     0,     0,     0,   127,
       0,     0,     0,   562,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   271,     0,     0,   271,     0,     0,   271,     0,     0,
       0,     0,  1143,     0,     0,   268,   268,     0,     0,   588,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1018,   583,     0,     0,
     562,   562,     0,     0,     0,   271,  1182,  1186,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   271,
     271,   271,   271,     0,     0,   127,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   127,     0,
       0,     0,   271,     0,   271,     0,     0,     0,   700,     0,
       0,     0,     0,   268,   268,     0,     0,     0,  1681,     0,
       0,   626,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1707,     0,     0,     0,     0,     0,     0,  1707,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   271,   271,     0,     0,
       0,     0,     0,   271,   271,     0,   749,   271,   271,     0,
    1609,  1611,     0,  1614,     0,     0,     0,     0,     0,     0,
       0,  1153,     0,     0,  1176,     0,     0,     0,     0,  1633,
       0,     0,     0,     0,     0,     0,  1171,  1176,     0,     0,
     124,     0,     0,     0,     0,   127,     0,   141,     0,     0,
       0,   588,     0,     0,  1171,  1176,     0,     0,     0,  1171,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     164,   175,   200,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   127,     0,     0,
    1667,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     124,   588,     0,     0,  1171,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   502,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1171,  1176,     0,   124,     0,     0,     0,   127,   127,   127,
     127,   127,     0,   127,     0,     0,   700,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   127,   127,   127,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   271,   164,   580,   586,     0,     0,     0,   127,     0,
     588,     0,  1171,     0,  1176,     0,     0,     0,     0,     0,
       0,     0,     0,   588,     0,  1171,  1176,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   175,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   580,     0,     0,     0,  1171,     0,  1176,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   586,     0,     0,     0,     0,   310,
       0,     1,   311,   108,   312,     0,   313,   314,   271,   271,
       0,     0,     0,     0,   271,   271,     0,     0,     0,     0,
       0,  1599,     0,     0,  1605,   700,     2,   271,     0,     0,
     271,   700,     0,  1622,     0,     0,     0,     0,   271,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1646,     0,     0,   315,     0,     0,     0,   124,
     316,   317,   318,     0,     0,   124,  1182,  1186,  1182,  1186,
       0,     0,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       0,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,   580,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,  1174,   334,     0,     0,  1175,     0,   752,
       0,     0,   335,   336,  1748,   337,   338,   339,   340,     0,
       0,     0,     0,     0,     0,   580,     0,     0,     0,     0,
       0,     0,  1836,     0,     0,     0,     0,     0,     0,     0,
       0,   164,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1171,  1176,  1171,  1176,     0,  1171,  1855,     0,
       0,     0,     0,  1609,  1862,     0,  1633,     0,  1176,     0,
       0,   271,   271,     0,     0,     0,  1171,  1176,  1633,     0,
       0,   124,   124,   124,   124,   124,     0,   124,     0,     0,
     124,     0,   588,   586,     0,     0,     0,     0,     0,   588,
       0,   124,   124,   124,   127,     0,     0,     0,     0,     0,
    1171,     0,  1176,     0,  1171,     0,  1176,     0,     0,     0,
     533,     0,   580,     0,   124,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,     0,     0,
       0,     0,     0,   127,     0,     0,     0,     0,     0,   271,
     271,     0,   588,     0,     1,     0,     0,   588,     0,     0,
       0,     0,     0,   127,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   588,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,   752,     0,     0,     0,     0,     0,     0,    29,
       0,     0,   588,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,  1194,     0,     0,     0,     0,     0,     0,     0,   124,
       0,     0,    42,     0,     0,   580,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   127,   127,
       0,   266,    53,     0,     0,   874,     0,     0,   588,  1171,
     588,     0,     0,     0,     0,     0,   577,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1171,     0,
       0,     0,     0,  1176,     0,  1171,  1855,     0,  1176,  1633,
       0,  2018,     0,  2020,     0,     0,     0,     0,     0,  1176,
    2024,   490,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   490,     0,     0,     0,   490,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   747,     0,     0,   266,   266,     0,
       0,     0,     0,     0,     0,   267,     0,     0,     0,     0,
       0,  1840,  1844,     0,     0,     0,     0,     0,     0,     0,
       0,  1853,     0,  1856,  1599,     0,     0,  1605,     0,     0,
     700,     0,   700,     0,   582,  1646,     0,     0,  1869,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   267,     0,     0,     0,     0,
       0,     0,     0,     0,   164,     0,   580,   267,     0,     0,
       0,   267,     0,   580,     0,     0,     0,     0,   580,     0,
     622,     0,     0,   266,   266,   266,     0,     0,  2081,  2084,
       0,  1171,  1176,  1171,     0,     0,     0,  1171,  1855,     0,
       0,   267,   267,     0,   266,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,     0,     0,
       0,     0,     0,   725,     0,     0,   124,     0,     0,   725,
       0,   580,     0,     0,     0,     0,     0,   124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   580,     0,     0,
       0,     0,     0,     0,  1171,  1176,     0,  1171,  1855,     0,
       0,     0,  2128,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   267,     0,     0,   267,   267,   267,
       0,     0,     0,     0,     0,     0,   580,     0,     0,     0,
       0,  1171,     0,     0,     0,     0,     0,     0,   267,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   267,     0,     0,
       0,     0,     0,   267,   582,     0,     0,     0,     0,     0,
     885,     0,   124,   124,     0,     0,   272,     0,     0,     0,
       0,   885,   124,     0,   124,     0,  2008,  2009,  2010,  2011,
       0,     0,  2012,     0,     0,     0,  1840,  1844,     0,  1853,
       0,  1856,     0,     0,     0,     0,     0,     0,   588,     0,
       0,     0,     0,  2021,     0,   588,   582,     0,     0,     0,
       0,     0,   127,     0,     0,     0,   272,     0,     0,     0,
       0,     0,     0,   976,     0,     0,     0,     0,   272,     0,
       0,     0,   272,   588,     0,   588,     0,     0,   588,     0,
       0,   588,     0,     0,     0,     0,   582,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   272,   272,   267,     0,     0,   266,     0,     0,
       0,     0,     0,     0,   266,   267,     0,   266,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,     0,   124,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   127,     0,     0,     0,
       0,     0,     0,     0,   588,     0,     0,   267,     0,     0,
       0,     0,     0,     0,     0,   588,     0,     0,     0,     0,
       0,     0,  2012,     0,     0,   272,     0,     0,   272,   272,
     272,  2090,     0,  2093,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   272,
       0,   267,     0,     0,     0,     0,     0,     0,   267,     0,
       0,   267,     0,     0,     0,     0,     0,     0,   272,     0,
       0,     0,     0,     0,   272,     0,     0,     0,     0,     0,
       0,     0,     0,   266,   266,   266,   266,  2122,  2123,     0,
       0,  2090,     0,  2093,     0,     0,  2127,     0,     0,     0,
    2129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   266,   266,   266,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     266,     0,     0,  2129,     0,     0,     0,  1225,  1235,     0,
       0,  1225,  1235,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2167,     0,   266,     0,     0,     0,     0,     0,     0,
     266,     0,     0,   266,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   272,     0,   267,   267,   267,
     267,     0,     0,     0,     0,     0,   272,     0,     0,     0,
       0,   588,   588,     0,   588,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   267,   267,   267,     0,     0,
       0,     0,   124,     0,     0,     0,     0,     0,     0,   124,
       0,     0,     0,     0,   267,     0,   124,     0,     0,     0,
       0,   267,   267,     0,     0,   267,   267,     0,   272,     0,
       0,     0,     0,   582,     0,     0,     0,   124,   127,   580,
       0,     0,   124,     0,     0,   124,     0,   267,     0,     0,
       0,     0,     0,     0,   267,     0,     0,   267,     0,   310,
       0,     1,   311,   108,   312,     0,   313,   314,   582,     0,
       0,     0,   272,     0,     0,     0,  1441,   582,     0,   272,
       0,     0,   272,     0,   582,     0,     2,  1441,     0,     0,
       0,   582,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,     0,     0,     0,     0,   315,     0,     0,   124,     0,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   580,
       0,     0,   582,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   582,     0,
       0,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
     267,     0,   333,  1174,   334,  1640,     0,  1175,     0,     0,
       0,   267,   335,   336,     0,   337,   338,   339,   340,   266,
     266,   266,     0,     0,     0,     0,     0,   622,   272,   272,
     272,   272,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   272,   272,   272,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   272,     0,     0,     0,     0,
       0,     0,   272,   272,     0,     0,   272,   272,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   272,     0,
       0,     0,     0,     0,     0,   272,     0,     0,   272,     0,
       0,     0,     0,   267,   267,   267,     0,   266,     0,     0,
     266,   267,     0,   266,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   124,     0,   124,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   266,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   266,   266,   266,   266,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,     0,     0,     0,     0,     0,   266,     0,
     266,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   622,     0,     0,
       0,   267,     0,     0,   267,     0,     0,   267,     0,     0,
       0,   272,     0,     0,     0,     0,     0,  1703,     0,     0,
       0,     0,   272,     0,  1703,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   266,   266,     0,   267,     0,     0,     0,   266,
     266,     0,     0,   266,   266,     0,     0,     0,     0,   267,
     267,   267,   267,     0,     0,     0,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,   267,     0,   267,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,   267,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   267,     0,     0,     0,     0,     0,     0,   267,     0,
       0,     0,   315,     0,   272,   272,   272,   316,   317,   318,
       0,     0,   272,     0,     0,     0,   267,   267,     0,     0,
     319,   320,     0,   267,   267,     0,     0,   267,   267,     0,
       0,     0,     0,     0,   321,     0,     0,     0,   322,   323,
     324,   325,   326,   327,   328,   329,     0,     0,     0,     0,
       0,     0,     0,     0,   330,   331,   332,     0,     0,   333,
    1174,   334,     0,     0,  1743,     0,     0,     0,  1751,   335,
     336,     0,   337,   338,   339,   340,     0,     0,     0,     0,
    -458,     0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,     0,     0,
       0,     0,   272,     0,     0,   272,     0,     0,   272,     0,
       0,     0,     0,     0,     0,     0,     0,   266,     0,     0,
     582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -458,     0,     0,     0,
       0,  -458,  -458,  -458,     0,     0,   272,     0,     0,     0,
       0,     0,     0,     0,  -458,  -458,     0,     0,     0,     0,
     272,   272,   272,   272,     0,     0,     0,     0,  -458,     0,
       0,     0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
       0,     0,     0,   272,     0,   272,     0,     0,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,     0,
       0,  -458,   272,  -458,  -458,     0,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,     0,     0,     0,     0,     0,
     582,   267,   272,     0,     0,     0,     0,     0,     0,   272,
       0,     0,     0,     0,   266,   266,     0,     0,     0,     0,
     266,   266,     0,     0,     0,     0,     0,   272,   272,     0,
       0,     0,     0,   266,   272,   272,   266,     0,   272,   272,
       0,   768,     0,     0,   266,     0,     0,   769,   770,   771,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -345,     0,
       0,     0,     0,     0,     0,  -345,  -345,     0,   267,   267,
    -345,     0,     0,     0,   267,   267,  -345,  -345,  -345,     0,
       0,     0,     0,     0,     0,     0,     0,   267,     0,     0,
     267,  -345,     0,     0,     0,     0,     0,     0,   267,     0,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
       0,  -345,  -345,  -345,   772,     0,     0,  -345,  1545,  -345,
    -345,     0,   773,     0,     0,   774,     0,  -345,  -345,  -345,
       0,  -345,  -345,  -345,  -345,  -345,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   266,   266,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   310,     0,     1,   311,   108,   312,   582,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,   272,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   266,   266,     0,     0,   315,
      29,     0,     0,     0,   316,   317,   318,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,   319,   415,    40,
      41,   267,   267,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,    42,     0,   322,   323,   324,   325,   326,
     327,   328,   329,    45,    46,    47,    48,    49,    50,     0,
       0,   330,   331,   332,     0,     0,   333,   745,   334,     0,
       0,     0,     0,     0,     0,     0,   335,   336,     0,   337,
     338,   339,   340,     0,     0,     0,     0,     0,     0,   272,
     272,     0,     0,     0,     0,   272,   272,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   272,   267,
     267,   272,     0,     0,     0,     0,     0,  -345,   768,   272,
    -345,  -345,  -345,  -345,   769,   770,   771,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,     0,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,  -345,     0,  -345,  -345,  -345,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,   772,  -345,  -345,  -345,  -345,  -345,  -345,  -345,   773,
    -345,  -345,   774,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   272,   272,     0,     0,     0,     0,     0,     0,
    -450,  1167,     0,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,     0,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,     0,     0,  -450,  -450,  -450,
     272,   272,  -450,  -450,  -450,  -450,  -450,     0,     0,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,     0,  -450,     0,  -450,
    -450,  -450,     0,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -304,   310,     0,     1,
     311,   108,   312,  -304,   313,   314,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,     2,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,     0,     0,   315,  -304,  -304,     0,     0,   316,   317,
     318,  -304,  -304,     0,     0,  -304,  -304,  -304,  -304,  -304,
    -304,   319,   320,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,     0,  -304,     0,   321,  -304,  -304,     0,   322,
     323,   324,   325,   326,   327,   328,   329,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,   330,   331,   332,  -304,  -304,
     333,  1255,   334,  -304,  -304,  1170,  -304,  -304,  -304,  -304,
     335,   336,  -304,   337,   338,   339,   340,  -304,  -304,  -304,
    -304,  -304,  -305,   310,     0,     1,   311,   108,   312,  -305,
     313,   314,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
       2,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,     0,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,     0,   315,
    -305,  -305,     0,     0,   316,   317,   318,  -305,  -305,     0,
       0,  -305,  -305,  -305,  -305,  -305,  -305,   319,   320,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,  -305,
       0,   321,  -305,  -305,     0,   322,   323,   324,   325,   326,
     327,   328,   329,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,   330,   331,   332,  -305,  -305,   333,  1174,   334,  -305,
    -305,  1175,  -305,  -305,  -305,  -305,   335,   336,  -305,   337,
     338,   339,   340,  -305,  -305,  -305,  -305,  -305,  -565,   310,
       0,     1,   311,   108,   312,  -565,   313,   314,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,     2,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,     0,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,     0,     0,   315,  -565,  -565,     0,     0,
     316,   317,   318,  -565,  -565,     0,     0,  -565,  -565,  -565,
    -565,  -565,  -565,   319,   320,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,     0,  -565,     0,   321,  -565,  -565,
       0,   322,   323,   324,   325,   326,   327,   328,   329,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,   330,   331,   332,
    -565,  -565,   333,  -565,   334,  -565,  -565,  -565,  -565,   756,
    -565,  1336,   335,   336,  -565,   337,   338,   339,   340,  -565,
    -565,  -565,  -565,  -565,  -566,   310,     0,     1,   311,   108,
     312,  -566,   313,   314,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,     2,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,
       0,   315,  -566,  -566,     0,     0,   316,   317,   318,  -566,
    -566,     0,     0,  -566,  -566,  -566,  -566,  -566,  -566,   319,
     320,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
       0,  -566,     0,   321,  -566,  -566,     0,   322,   323,   324,
     325,   326,   327,   328,   329,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,   330,   331,   332,  -566,  -566,   333,  -566,
     334,  -566,  -566,  -566,  -566,   756,  -566,  1402,   335,   336,
    -566,   337,   338,   339,   340,  -566,  -566,  -566,  -566,  -566,
    -576,   310,     0,     1,   311,   108,   312,  -576,   313,   314,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     2,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,     0,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,     0,     0,   315,  -576,  -576,
       0,     0,   316,   317,   318,  -576,  -576,     0,     0,  -576,
    -576,  -576,  -576,  -576,  -576,   319,   320,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,     0,   321,
    -576,  -576,     0,   322,   323,   324,   325,   326,   327,   328,
     329,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,   330,
     331,   332,  -576,  -576,   333,  -576,   334,  -576,  -576,  1170,
    -576,  -576,  -576,  -576,   335,   336,  -576,   337,   338,   339,
     340,  -576,  -576,  -576,  -576,  -576,  -578,   310,     0,     1,
     311,   108,   312,  -578,   313,   314,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     2,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,     0,     0,   315,  -578,  -578,     0,     0,   316,   317,
     318,  -578,  -578,     0,     0,  -578,  -578,  -578,  -578,  -578,
    -578,   319,   320,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,     0,  -578,     0,   321,  -578,  -578,     0,   322,
     323,   324,   325,   326,   327,   328,   329,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,   330,   331,   332,  -578,  -578,
     333,  1174,   334,  -578,  -578,  1175,  -578,  -578,  -578,  -578,
     335,   336,  -578,   337,   338,   339,   340,  -578,  -578,  -578,
    -578,  -578,  -577,   310,     0,     1,   311,   108,   312,  -577,
     313,   314,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       2,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,     0,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,     0,   315,
    -577,  -577,     0,     0,   316,   317,   318,  -577,  -577,     0,
       0,  -577,  -577,  -577,  -577,  -577,  -577,   319,   320,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,
       0,   321,  -577,  -577,     0,   322,   323,   324,   325,   326,
     327,   328,   329,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,   330,   331,   332,  -577,  -577,   333,  -577,   334,  -577,
    -577,  1170,  -577,  -577,  -577,  -577,   335,   336,  -577,   337,
     338,   339,   340,  -577,  -577,  -577,  -577,  -577,  -338,  1898,
       0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,     0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,     0,     0,  -338,  -338,  -338,     0,     0,
    -338,  -338,  -338,  -338,  -338,     0,     0,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,     0,  -338,     0,  -338,  -338,  -338,
       0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -342,  1934,     0,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,     0,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,     0,
       0,  -342,  -342,  -342,     0,     0,  -342,  -342,  -342,  -342,
    -342,     0,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
       0,  -342,     0,  -342,  -342,  -342,     0,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -332,   310,     0,     1,   311,   108,   312,  -332,   313,   314,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,     2,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,     0,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,     0,     0,   315,  -332,  -332,
       0,     0,   316,   317,   318,  -332,  -332,     0,     0,  -332,
    -332,  -332,  -332,  -332,  -332,   319,   320,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,     0,  -332,     0,   321,
    -332,  -332,     0,   322,   323,   324,   325,   326,   327,   328,
     329,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,   330,
     331,   332,  -332,  -332,   333,  -332,   334,  -332,  -332,  -332,
    -332,   756,  -332,  -332,   335,   336,  -332,   337,   338,   339,
     340,  -332,  -332,  -332,  -332,  -332,  -543,   310,     0,     1,
     311,   108,   312,  -543,   313,   314,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,     2,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,     0,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,     0,     0,   315,  -543,  -543,     0,     0,   316,   317,
     318,  -543,  -543,     0,     0,  -543,  -543,  -543,  -543,  -543,
    -543,   319,   320,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,     0,  -543,     0,   321,  -543,  -543,     0,   322,
     323,   324,   325,   326,   327,   328,   329,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,   330,   331,   332,  -543,  -543,
     333,  -543,   334,  -543,  -543,  -543,  -543,   756,  -543,  -543,
     335,   336,  -543,   337,   338,   339,   340,  -543,  -543,  -543,
    -543,  -543,  -551,   310,     0,     1,   311,   108,   312,  -551,
     313,   314,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
       2,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,     0,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,     0,     0,   315,
    -551,  -551,     0,     0,   316,   317,   318,  -551,  -551,     0,
       0,  -551,  -551,  -551,  -551,  -551,  -551,   319,   320,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,     0,  -551,
       0,   321,  -551,  -551,     0,   322,   323,   324,   325,   326,
     327,   328,   329,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,   330,   331,   332,  -551,  -551,   333,  -551,   334,  -551,
    -551,  -551,  -551,   756,  -551,  -551,   335,   336,  -551,   337,
     338,   339,   340,  -551,  -551,  -551,  -551,  -551,  -544,   310,
       0,     1,   311,   108,   312,  -544,   313,   314,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,     2,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,     0,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,     0,     0,   315,  -544,  -544,     0,     0,
     316,   317,   318,  -544,  -544,     0,     0,  -544,  -544,  -544,
    -544,  -544,  -544,   319,   320,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,     0,  -544,     0,   321,  -544,  -544,
       0,   322,   323,   324,   325,   326,   327,   328,   329,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,   330,   331,   332,
    -544,  -544,   333,  -544,   334,  -544,  -544,  -544,  -544,   756,
    -544,  -544,   335,   336,  -544,   337,   338,   339,   340,  -544,
    -544,  -544,  -544,  -544,  -552,   310,     0,     1,   311,   108,
     312,  -552,   313,   314,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,     2,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,
       0,   315,  -552,  -552,     0,     0,   316,   317,   318,  -552,
    -552,     0,     0,  -552,  -552,  -552,  -552,  -552,  -552,   319,
     320,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
       0,  -552,     0,   321,  -552,  -552,     0,   322,   323,   324,
     325,   326,   327,   328,   329,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,   330,   331,   332,  -552,  -552,   333,  -552,
     334,  -552,  -552,  -552,  -552,   756,  -552,  -552,   335,   336,
    -552,   337,   338,   339,   340,  -552,  -552,  -552,  -552,  -552,
    -545,   310,     0,     1,   311,   108,   312,  -545,   313,   314,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     2,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,     0,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,     0,     0,   315,  -545,  -545,
       0,     0,   316,   317,   318,  -545,  -545,     0,     0,  -545,
    -545,  -545,  -545,  -545,  -545,   319,   320,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,     0,   321,
    -545,  -545,     0,   322,   323,   324,   325,   326,   327,   328,
     329,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,   330,
     331,   332,  -545,  -545,   333,  -545,   334,  -545,  -545,  -545,
    -545,   756,  -545,  -545,   335,   336,  -545,   337,   338,   339,
     340,  -545,  -545,  -545,  -545,  -545,  -553,   310,     0,     1,
     311,   108,   312,  -553,   313,   314,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,     2,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,     0,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,     0,     0,   315,  -553,  -553,     0,     0,   316,   317,
     318,  -553,  -553,     0,     0,  -553,  -553,  -553,  -553,  -553,
    -553,   319,   320,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,     0,  -553,     0,   321,  -553,  -553,     0,   322,
     323,   324,   325,   326,   327,   328,   329,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,   330,   331,   332,  -553,  -553,
     333,  -553,   334,  -553,  -553,  -553,  -553,   756,  -553,  -553,
     335,   336,  -553,   337,   338,   339,   340,  -553,  -553,  -553,
    -553,  -553,  -546,   310,     0,     1,   311,   108,   312,  -546,
     313,   314,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
       2,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,     0,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,     0,     0,   315,
    -546,  -546,     0,     0,   316,   317,   318,  -546,  -546,     0,
       0,  -546,  -546,  -546,  -546,  -546,  -546,   319,   320,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,     0,  -546,
       0,   321,  -546,  -546,     0,   322,   323,   324,   325,   326,
     327,   328,   329,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,   330,   331,   332,  -546,  -546,   333,  -546,   334,  -546,
    -546,  -546,  -546,   756,  -546,  -546,   335,   336,  -546,   337,
     338,   339,   340,  -546,  -546,  -546,  -546,  -546,  -554,   310,
       0,     1,   311,   108,   312,  -554,   313,   314,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,     2,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,     0,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,     0,     0,   315,  -554,  -554,     0,     0,
     316,   317,   318,  -554,  -554,     0,     0,  -554,  -554,  -554,
    -554,  -554,  -554,   319,   320,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,     0,  -554,     0,   321,  -554,  -554,
       0,   322,   323,   324,   325,   326,   327,   328,   329,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,   330,   331,   332,
    -554,  -554,   333,  -554,   334,  -554,  -554,  -554,  -554,   756,
    -554,  -554,   335,   336,  -554,   337,   338,   339,   340,  -554,
    -554,  -554,  -554,  -554,  -340,  2039,     0,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,     0,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,     0,
       0,  -340,  -340,  -340,     0,     0,  -340,  -340,  -340,  -340,
    -340,     0,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
       0,  -340,     0,  -340,  -340,  -340,     0,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -339,  2040,     0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,     0,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,     0,     0,  -339,  -339,  -339,
       0,     0,  -339,  -339,  -339,  -339,  -339,     0,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,     0,  -339,     0,  -339,
    -339,  -339,     0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -345,   768,     0,  -345,
    -345,  -345,  -345,   769,   770,   771,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,     0,     0,  -345,  -345,  -345,     0,     0,  -345,  -345,
    -345,  -345,  -345,     0,     0,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,  -345,     0,  -345,  -345,  -345,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
     772,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  1165,  -345,
    -345,   774,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -458,     0,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -458,     0,
       0,     0,     0,  -458,  -458,  -458,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -458,  -458,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -458,     0,     0,     0,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,     0,     0,     0,     0,     0,     0,     0,     0,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,     0,  -458,
    -458,     0,     0,  -458,     0,  -458,  -458,     0,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -450,  1167,     0,
    -450,  -450,  -450,  -450,     0,  -450,  -450,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
       0,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,     0,     0,  -450,  -450,  -450,     0,     0,  -450,
    -450,  -450,  -450,  -450,     0,     0,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,     0,  -450,     0,  -450,  -450,  -450,     0,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,
       0,  -450,  -450,  -450,  -450,     0,  -450,  -450,  -450,  1168,
    -450,  -450,  -450,     0,  -450,  -450,  -450,  -450, -1096,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096,     0, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096,     0,     0,   315, -1096, -1096,     0,     0,
     316,   317,   318, -1096, -1096,     0,     0, -1096, -1096, -1096,
   -1096, -1096, -1096,   319,   320, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096,     0, -1096,     0,   321, -1096, -1096,
       0,   322,   323,   324,   325,   326,   327,   328,   329, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096,   330,   331,   332,
       0,     0,   333,  1174,   334, -1096,     0,  1175, -1096, -1096,
       0, -1096,   335,   336,     0,   337,   338,   339,   340, -1240,
     310,     0,     1,   311,   108,   312,     0,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240,     0, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240,     0,     0,   315, -1240, -1240,     0,
       0,   316,   317,   318, -1240, -1240,     0,     0, -1240, -1240,
   -1240, -1240, -1240, -1240,   319,   320, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240,     0, -1240,     0,   321, -1240,
   -1240,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,   330,   331,
     332,     0,     0,   333,  1174,   334,  1640,     0,  1175, -1240,
   -1240,     0, -1240,   335,   336,     0,   337,   338,   339,   340,
   -1198,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1198,
   -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198,
   -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198,
   -1198, -1198, -1198,     0, -1198, -1198, -1198, -1198, -1198, -1198,
   -1198, -1198, -1198, -1198, -1198,     0,     0,   315, -1198, -1198,
       0,     0,   316,   317,   318, -1198, -1198,     0,     0, -1198,
   -1198, -1198, -1198, -1198, -1198,   319,   320, -1198, -1198, -1198,
   -1198, -1198, -1198, -1198, -1198, -1198,     0, -1198,     0,   321,
   -1198, -1198,     0,   322,   323,   324,   325,   326,   327,   328,
     329, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198,   330,
     331,   332,     0,     0,   333,  1849,   334, -1198,     0,  1175,
   -1198, -1198,     0, -1198,   335,   336,     0,   337,   338,   339,
     340, -1229,   310,     0,     1,   311,   108,   312,     0,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229,     0,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,     0,     0,   315, -1229,
   -1229,     0,     0,   316,   317,   318, -1229, -1229,     0,     0,
   -1229,    34, -1229, -1229, -1229, -1229,   319,   320,  1139, -1229,
     652,   653,   654, -1229, -1229, -1229, -1229,     0, -1229,     0,
     321, -1229, -1229,     0,   322,   323,   324,   325,   326,   327,
     328,   329,    45,    46, -1229, -1229, -1229, -1229, -1229, -1229,
     330,   331,   332,     0,     0,   333,  1174,   334,   655,     0,
    1175, -1229,   262,     0,   656,   335,   336,     0,   337,   338,
     339,   340,  -577,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,     0,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,     0,   315,
    -577,  -577,     0,     0,   316,   317,   318,  -577,  -577,     0,
       0,  -577,  -577,  -577,  -577,  -577,  -577,   319,   320,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,
       0,   321,  -577,  -577,     0,   322,   323,   324,   325,   326,
     327,   328,   329,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,   330,   331,   332,     0,     0,   333,  -577,   334,  1169,
       0,  1170,  -577,  -577,     0,  -577,   335,   336,     0,   337,
     338,   339,   340, -1221,   310,     0,     1,   311,   108,   312,
       0,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221,     0, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,     0,     0,
     315, -1221, -1221,     0,     0,   316,   317,   318, -1221, -1221,
       0,     0, -1221, -1221, -1221, -1221, -1221, -1221,   319,   320,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,     0,
   -1221,     0,   321, -1221, -1221,     0,   322,   323,   324,   325,
     326,   327,   328,   329, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221,   330,   331,   332,     0,     0,   333,  2086,   334,
   -1221,     0,  1170, -1221, -1221,     0, -1221,   335,   336,     0,
     337,   338,   339,   340, -1222,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222,     0, -1222, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,     0,
       0,   315, -1222, -1222,     0,     0,   316,   317,   318, -1222,
   -1222,     0,     0, -1222, -1222, -1222, -1222, -1222, -1222,   319,
     320, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
       0, -1222,     0,   321, -1222, -1222,     0,   322,   323,   324,
     325,   326,   327,   328,   329, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222,   330,   331,   332,     0,     0,   333,  1174,
     334,  2087,     0,  1175, -1222, -1222,     0, -1222,   335,   336,
       0,   337,   338,   339,   340, -1216,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,     0,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
       0,     0,   315, -1216, -1216,     0,     0,   316,   317,   318,
   -1216, -1216,     0,     0, -1216,    34, -1216, -1216, -1216, -1216,
     319,   320,  1139, -1216,   652,   653,   654, -1216, -1216, -1216,
   -1216,     0, -1216,     0,   321, -1216, -1216,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46, -1216, -1216,
   -1216, -1216, -1216, -1216,   330,   331,   332,     0,     0,   333,
    1174,   334,   655,     0,  1175, -1216,   262,     0,   656,   335,
     336,     0,   337,   338,   339,   340, -1164,   630,     0, -1164,
   -1164, -1164, -1164,     0, -1164, -1164,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1164, -1164, -1164, -1164, -1164, -1164,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,     0,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,
   -1164,     0,     0, -1164, -1164, -1164,     0,     0, -1164, -1164,
   -1164, -1164, -1164,     0,     0, -1164, -1164, -1164, -1164, -1164,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,
   -1164, -1164,     0, -1164,     0, -1164, -1164, -1164,     0, -1164,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,     0,     0,
   -1164,     0, -1164,   631,     0, -1164, -1164, -1164,     0, -1164,
   -1164, -1164,     0, -1164, -1164, -1164, -1164, -1187,   310,     0,
       1,   311,   108,   312,     0,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,    20,    21,   252,   253,    24,    25,    26,
       0,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,     0,     0,   315,   254, -1187,     0,     0,   316,
     317,   318,    30,    31,     0,     0, -1187,    34, -1187, -1187,
   -1187, -1187,   319,   650,   651,   256,   652,   653,   654, -1187,
   -1187, -1187, -1187,     0, -1187,     0,   321, -1187,   257,     0,
     322,   323,   324,   325,   326,   327,   328,   329,    45,    46,
     258,   259,   260,   261,   212,   213,   330,   331,   332,     0,
       0,   333,     0,   334,   655,     0, -1187, -1187,   262,     0,
     656,   335,   336,     0,   337,   338,   339,   340, -1165,   630,
       0, -1165, -1165, -1165, -1165,     0, -1165, -1165,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
   -1165,     0, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165,     0,     0, -1165, -1165, -1165,     0,     0,
   -1165, -1165, -1165, -1165, -1165,     0,     0, -1165, -1165, -1165,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165, -1165,     0, -1165,     0, -1165, -1165, -1165,
       0, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
       0,     0, -1165,     0, -1165,   631,     0, -1165, -1165, -1165,
       0, -1165, -1165, -1165,     0, -1165, -1165, -1165, -1165, -1226,
     310,     0,     1,   311,   108,   312,     0,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226, -1226,     0,  1131,  1132,  1133,   642,  1134,  1135,  1136,
    1137,   647,   648,  1138,     0,     0,   315, -1226, -1226,     0,
       0,   316,   317,   318, -1226, -1226,     0,     0, -1226,    34,
   -1226, -1226, -1226, -1226,   319,   320,  1139, -1226,   652,   653,
     654, -1226, -1226, -1226, -1226,     0, -1226,     0,   321, -1226,
   -1226,     0,   322,   323,   324,   325,   326,   327,   328,   329,
      45,    46, -1226, -1226, -1226, -1226, -1226, -1226,   330,   331,
     332,     0,     0,   333,     0,   334,   655,     0, -1226, -1226,
     262,     0,   656,   335,   336,     0,   337,   338,   339,   340,
   -1242,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242,     0, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242,     0,     0,   315, -1242, -1242,
       0,     0,   316,   317,   318, -1242, -1242,     0,     0, -1242,
   -1242, -1242, -1242, -1242, -1242,   319,   320, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242,     0, -1242,     0,   321,
   -1242, -1242,     0,   322,   323,   324,   325,   326,   327,   328,
     329, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,   330,
     331,   332,     0,     0,   333,     0,   334,  1150,     0, -1242,
   -1242,   756,     0, -1242,   335,   336,     0,   337,   338,   339,
     340, -1177,  1177,     0,     1,   311,   108,   312,     0,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,    20,    21,   252,
     253,    24,    25,    26,     0,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,     0,     0,   315,   254,
   -1177,     0,     0,   316,   317,   318,    30,    31,     0,     0,
   -1177,    34, -1177, -1177, -1177, -1177,   319,   650,   651,   256,
     652,   653,   654, -1177, -1177, -1177, -1177,     0, -1177,     0,
     321, -1177,   257,     0,   322,   323,   324,   325,   326,   327,
     328,   329,    45,    46,   258,   259,   260,   261,   212,   213,
     330,   331,   332,     0,     0,   333,     0,   334,   655,     0,
   -1177, -1177,   262,     0,   656,   335,   336,     0,   337,   338,
     339,   340, -1181,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   206,   207,   208,   209,   210,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,    20,    21,
     252,   253,    24,    25,    26,     0,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,     0,     0,   315,
     254, -1181,     0,     0,   316,   317,   318,    30,    31,     0,
       0, -1181,    34, -1181, -1181, -1181, -1181,   319,   650,   651,
     256,   652,   653,   654, -1181, -1181, -1181, -1181,     0, -1181,
       0,   321, -1181,   257,     0,   322,   323,   324,   325,   326,
     327,   328,   329,    45,    46,   258,   259,   260,   261,   212,
     213,   330,   331,   332,     0,     0,   333,     0,   334,   655,
       0, -1181, -1181,   262,     0,   656,   335,   336,     0,   337,
     338,   339,   340, -1176,   310,     0,     1,   311,   108,   312,
       0,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,    20,
      21,   252,   253,    24,    25,    26,     0,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,     0,     0,
     315,   254, -1176,     0,     0,   316,   317,   318,    30,    31,
       0,     0, -1176,    34, -1176, -1176, -1176, -1176,   319,   650,
     651,   256,   652,   653,   654, -1176, -1176, -1176, -1176,     0,
   -1176,     0,   321, -1176,   257,     0,   322,   323,   324,   325,
     326,   327,   328,   329,    45,    46,   258,   259,   260,   261,
     212,   213,   330,   331,   332,     0,     0,   333,     0,   334,
     655,     0, -1176, -1176,   262,     0,   656,   335,   336,     0,
     337,   338,   339,   340, -1180,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   206,   207,   208,   209,   210,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
      20,    21,   252,   253,    24,    25,    26,     0,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,     0,
       0,   315,   254, -1180,     0,     0,   316,   317,   318,    30,
      31,     0,     0, -1180,    34, -1180, -1180, -1180, -1180,   319,
     650,   651,   256,   652,   653,   654, -1180, -1180, -1180, -1180,
       0, -1180,     0,   321, -1180,   257,     0,   322,   323,   324,
     325,   326,   327,   328,   329,    45,    46,   258,   259,   260,
     261,   212,   213,   330,   331,   332,     0,     0,   333,     0,
     334,   655,     0, -1180, -1180,   262,     0,   656,   335,   336,
       0,   337,   338,   339,   340, -1083,  1190,     0, -1083, -1083,
   -1083, -1083,     0, -1083, -1083,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1083, -1083, -1083, -1083, -1083, -1083, -1083,
   -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083,
   -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083,     0, -1083,
   -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083,
       0,     0, -1083, -1083, -1083,     0,     0, -1083, -1083, -1083,
   -1083, -1083,     0,     0, -1083, -1083, -1083, -1083, -1083, -1083,
   -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083,
   -1083,     0, -1083,     0, -1083, -1083, -1083,     0, -1083, -1083,
   -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083, -1083,
   -1083, -1083, -1083, -1083, -1083, -1083, -1083,     0,     0, -1083,
       0, -1083, -1083,     0, -1083, -1083, -1083,     0, -1083, -1083,
   -1083,     0, -1083, -1083, -1083, -1083, -1085,  1191,     0, -1085,
   -1085, -1085, -1085,     0, -1085, -1085,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1085, -1085, -1085, -1085, -1085, -1085,
   -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085,
   -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085,     0,
   -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085,
   -1085,     0,     0, -1085, -1085, -1085,     0,     0, -1085, -1085,
   -1085, -1085, -1085,     0,     0, -1085, -1085, -1085, -1085, -1085,
   -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085,
   -1085, -1085,     0, -1085,     0, -1085, -1085, -1085,     0, -1085,
   -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085,
   -1085, -1085, -1085, -1085, -1085, -1085, -1085, -1085,     0,     0,
   -1085,     0, -1085, -1085,     0, -1085, -1085, -1085,     0, -1085,
   -1085, -1085,     0, -1085, -1085, -1085, -1085, -1131,   310,     0,
       1,   311,   108,   312,     0,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,    20,    21,   252,   253,    24,    25,    26,
       0,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,     0,     0,   315,   254, -1131,     0,     0,   316,
     317,   318,    30,    31,     0,     0, -1131,    34, -1131, -1131,
   -1131, -1131,   319,   650,   651,   256,   652,   653,   654, -1131,
   -1131, -1131, -1131,     0, -1131,     0,   321, -1131,   257,     0,
     322,   323,   324,   325,   326,   327,   328,   329,    45,    46,
     258,   259,   260,   261,   212,   213,   330,   331,   332,     0,
       0,   333,     0,   334,   655,     0, -1131, -1131,   262,     0,
     656,   335,   336,     0,   337,   338,   339,   340, -1133,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   206,   207,   208,
     209,   210,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,    20,    21,   252,   253,    24,    25,
      26,     0,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,     0,     0,   315,   254, -1133,     0,     0,
     316,   317,   318,    30,    31,     0,     0, -1133,    34, -1133,
   -1133, -1133, -1133,   319,   650,   651,   256,   652,   653,   654,
   -1133, -1133, -1133, -1133,     0, -1133,     0,   321, -1133,   257,
       0,   322,   323,   324,   325,   326,   327,   328,   329,    45,
      46,   258,   259,   260,   261,   212,   213,   330,   331,   332,
       0,     0,   333,     0,   334,   655,     0, -1133, -1133,   262,
       0,   656,   335,   336,     0,   337,   338,   339,   340, -1178,
     310,     0,     1,   311,   108,   312,     0,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,    20,    21,   252,   253,    24,
      25,    26,     0,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,     0,     0,   315,   254, -1178,     0,
       0,   316,   317,   318,    30,    31,     0,     0, -1178,    34,
   -1178, -1178, -1178, -1178,   319,   650,   651,   256,   652,   653,
     654, -1178, -1178, -1178, -1178,     0, -1178,     0,   321, -1178,
     257,     0,   322,   323,   324,   325,   326,   327,   328,   329,
      45,    46,   258,   259,   260,   261,   212,   213,   330,   331,
     332,     0,     0,   333,     0,   334,   655,     0, -1178, -1178,
     262,     0,   656,   335,   336,     0,   337,   338,   339,   340,
   -1182,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   206,
     207,   208,   209,   210,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,    20,    21,   252,   253,
      24,    25,    26,     0,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,     0,     0,   315,   254, -1182,
       0,     0,   316,   317,   318,    30,    31,     0,     0, -1182,
      34, -1182, -1182, -1182, -1182,   319,   650,   651,   256,   652,
     653,   654, -1182, -1182, -1182, -1182,     0, -1182,     0,   321,
   -1182,   257,     0,   322,   323,   324,   325,   326,   327,   328,
     329,    45,    46,   258,   259,   260,   261,   212,   213,   330,
     331,   332,     0,     0,   333,     0,   334,   655,     0, -1182,
   -1182,   262,     0,   656,   335,   336,     0,   337,   338,   339,
     340, -1179,   310,     0,     1,   311,   108,   312,     0,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,    20,    21,   252,
     253,    24,    25,    26,     0,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,     0,     0,   315,   254,
   -1179,     0,     0,   316,   317,   318,    30,    31,     0,     0,
   -1179,    34, -1179, -1179, -1179, -1179,   319,   650,   651,   256,
     652,   653,   654, -1179, -1179, -1179, -1179,     0, -1179,     0,
     321, -1179,   257,     0,   322,   323,   324,   325,   326,   327,
     328,   329,    45,    46,   258,   259,   260,   261,   212,   213,
     330,   331,   332,     0,     0,   333,     0,   334,   655,     0,
   -1179, -1179,   262,     0,   656,   335,   336,     0,   337,   338,
     339,   340, -1183,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   206,   207,   208,   209,   210,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,    20,    21,
     252,   253,    24,    25,    26,     0,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,     0,     0,   315,
     254, -1183,     0,     0,   316,   317,   318,    30,    31,     0,
       0, -1183,    34, -1183, -1183, -1183, -1183,   319,   650,   651,
     256,   652,   653,   654, -1183, -1183, -1183, -1183,     0, -1183,
       0,   321, -1183,   257,     0,   322,   323,   324,   325,   326,
     327,   328,   329,    45,    46,   258,   259,   260,   261,   212,
     213,   330,   331,   332,     0,     0,   333,     0,   334,   655,
       0, -1183, -1183,   262,     0,   656,   335,   336,     0,   337,
     338,   339,   340, -1174,   630,     0, -1174, -1174, -1174, -1174,
       0, -1174, -1174,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174,     0, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,     0,     0,
   -1174, -1174, -1174,     0,     0, -1174, -1174, -1174, -1174, -1174,
       0,     0, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,     0,
   -1174,     0, -1174, -1174, -1174,     0, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174,     0,     0, -1174,     0, -1174,
     631,     0, -1174, -1174, -1174,     0, -1174, -1174, -1174,     0,
   -1174, -1174, -1174, -1174, -1175,   630,     0, -1175, -1175, -1175,
   -1175,     0, -1175, -1175,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175,     0, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,     0,
       0, -1175, -1175, -1175,     0,     0, -1175, -1175, -1175, -1175,
   -1175,     0,     0, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
       0, -1175,     0, -1175, -1175, -1175,     0, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175,     0,     0, -1175,     0,
   -1175,   631,     0, -1175, -1175, -1175,     0, -1175, -1175, -1175,
       0, -1175, -1175, -1175, -1175, -1008,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1008, -1008, -1008, -1008, -1008, -1008,
   -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008,
   -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008,     0, -1008,
   -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008,
       0,     0,   315, -1008, -1008,     0,     0,   316,   317,   318,
   -1008, -1008,     0,     0, -1008, -1008, -1008, -1008, -1008, -1008,
     319,   320, -1008, -1008, -1008, -1008, -1008, -1008, -1008, -1008,
   -1008,     0, -1008,     0,   321, -1008, -1008,     0,   322,   323,
     324,   325,   326,   327,   328,   329, -1008, -1008, -1008, -1008,
   -1008, -1008, -1008, -1008,   330,   331,   332,     0,     0,   333,
       0,   334, -1008,     0,  1818,  1819,  1030,     0, -1008,   335,
     336,     0,   337,   338,   339,   340, -1137,   630,     0, -1137,
   -1137, -1137, -1137,     0, -1137, -1137,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1137, -1137, -1137, -1137, -1137, -1137,
   -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137,
   -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137,     0,
   -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137,
   -1137,     0,     0, -1137, -1137, -1137,     0,     0, -1137, -1137,
   -1137, -1137, -1137,     0,     0, -1137, -1137, -1137, -1137, -1137,
   -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137,
   -1137, -1137,     0, -1137,     0, -1137, -1137, -1137,     0, -1137,
   -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137,
   -1137, -1137, -1137, -1137, -1137, -1137, -1137, -1137,     0,     0,
   -1137,     0, -1137,   631,     0, -1137, -1137, -1137,     0, -1137,
   -1137, -1137,     0, -1137, -1137, -1137, -1137, -1138,   630,     0,
   -1138, -1138, -1138, -1138,     0, -1138, -1138,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1138, -1138, -1138, -1138, -1138,
   -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138,
   -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138,
       0, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138,
   -1138, -1138,     0,     0, -1138, -1138, -1138,     0,     0, -1138,
   -1138, -1138, -1138, -1138,     0,     0, -1138, -1138, -1138, -1138,
   -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138,
   -1138, -1138, -1138,     0, -1138,     0, -1138, -1138, -1138,     0,
   -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138,
   -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138,     0,
       0, -1138,     0, -1138,   631,     0, -1138, -1138, -1138,     0,
   -1138, -1138, -1138,     0, -1138, -1138, -1138, -1138, -1134,   630,
       0, -1134, -1134, -1134, -1134,     0, -1134, -1134,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134,     0, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134,     0,     0, -1134, -1134, -1134,     0,     0,
   -1134, -1134, -1134, -1134, -1134,     0,     0, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134,     0, -1134,     0, -1134, -1134, -1134,
       0, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
       0,     0, -1134,     0, -1134,   631,     0, -1134, -1134, -1134,
       0, -1134, -1134, -1134,     0, -1134, -1134, -1134, -1134, -1010,
     310,     0,     1,   311,   108,   312,     0,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1010, -1010,
   -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010,
   -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010,
   -1010, -1010,     0, -1010, -1010, -1010, -1010, -1010, -1010, -1010,
   -1010, -1010, -1010, -1010,     0,     0,   315, -1010, -1010,     0,
       0,   316,   317,   318, -1010, -1010,     0,     0, -1010, -1010,
   -1010, -1010, -1010, -1010,   319,   320, -1010, -1010, -1010, -1010,
   -1010, -1010, -1010, -1010, -1010,     0, -1010,     0,   321, -1010,
   -1010,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   -1010, -1010, -1010, -1010, -1010, -1010, -1010, -1010,   330,   331,
     332,     0,     0,   333,     0,   334, -1010,     0, -1010,  1999,
    1030,     0, -1010,   335,   336,     0,   337,   338,   339,   340,
   -1004,  2002,     0, -1004, -1004, -1004, -1004,     0, -1004, -1004,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1004, -1004,
   -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004,
   -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004,
   -1004, -1004, -1004,     0, -1004, -1004, -1004, -1004, -1004, -1004,
   -1004, -1004, -1004, -1004, -1004,     0,     0, -1004, -1004, -1004,
       0,     0, -1004, -1004, -1004, -1004, -1004,     0,     0, -1004,
   -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004,
   -1004, -1004, -1004, -1004, -1004, -1004,     0, -1004,     0, -1004,
   -1004, -1004,     0, -1004, -1004, -1004, -1004, -1004, -1004, -1004,
   -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004,
   -1004, -1004,     0,     0, -1004,     0, -1004, -1004,     0, -1004,
   -1004, -1004,     0, -1004, -1004, -1004,     0, -1004, -1004, -1004,
   -1004, -1135,   630,     0, -1135, -1135, -1135, -1135,     0, -1135,
   -1135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1135,
   -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135,     0, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135, -1135,     0,     0, -1135, -1135,
   -1135,     0,     0, -1135, -1135, -1135, -1135, -1135,     0,     0,
   -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135, -1135, -1135,     0, -1135,     0,
   -1135, -1135, -1135,     0, -1135, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135, -1135,
   -1135, -1135, -1135,     0,     0, -1135,     0, -1135,   631,     0,
   -1135, -1135, -1135,     0, -1135, -1135, -1135,     0, -1135, -1135,
   -1135, -1135, -1136,   630,     0, -1136, -1136, -1136, -1136,     0,
   -1136, -1136,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136, -1136, -1136,     0, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136, -1136, -1136, -1136, -1136,     0,     0, -1136,
   -1136, -1136,     0,     0, -1136, -1136, -1136, -1136, -1136,     0,
       0, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136,     0, -1136,
       0, -1136, -1136, -1136,     0, -1136, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136, -1136,     0,     0, -1136,     0, -1136,   631,
       0, -1136, -1136, -1136,     0, -1136, -1136, -1136,     0, -1136,
   -1136, -1136, -1136, -1223,   310,     0,     1,   311,   108,   312,
       0,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223,     0, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,     0,     0,
     315, -1223, -1223,     0,     0,   316,   317,   318, -1223, -1223,
       0,     0, -1223, -1223, -1223, -1223, -1223, -1223,   319,   320,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,     0,
   -1223,     0,   321, -1223, -1223,     0,   322,   323,   324,   325,
     326,   327,   328,   329, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223,   330,   331,   332,     0,     0,   333,     0,   334,
   -1223,     0, -1223, -1223, -1223,     0, -1223,   335,   336,     0,
     337,   338,   339,   340, -1005,  2078,     0, -1005, -1005, -1005,
   -1005,     0, -1005, -1005,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005,
   -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005,
   -1005, -1005, -1005, -1005, -1005, -1005, -1005,     0, -1005, -1005,
   -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005,     0,
       0, -1005, -1005, -1005,     0,     0, -1005, -1005, -1005, -1005,
   -1005,     0,     0, -1005, -1005, -1005, -1005, -1005, -1005, -1005,
   -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005,
       0, -1005,     0, -1005, -1005, -1005,     0, -1005, -1005, -1005,
   -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005,
   -1005, -1005, -1005, -1005, -1005, -1005,     0,     0, -1005,     0,
   -1005, -1005,     0, -1005, -1005, -1005,     0, -1005, -1005, -1005,
       0, -1005, -1005, -1005, -1005,  -911,   594,     0,  -911,  -911,
    -911,  -911,     0,  -911,  -911,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -911,  -911,  -911,  -911,  -911,  -911,  -911,
    -911,  -911,  -911,  -911,  -911,  -911,  -911,  -911,  -911,  -911,
    -911,  -911,  -911,  -911,  -911,  -911,  -911,  -911,     0,     0,
    -911,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -911,  -911,  -911,     0,     0,  -911,  -911,  -911,
    -911,  -911,     0,     0,  -911,  -911,  -911,  -911,  -911,  -911,
    -911,  -911,  -911,  -911,  -911,     0,     0,  -911,  -911,  -911,
    -911,     0,  -911,     0,  -911,  -911,  -911,     0,  -911,  -911,
    -911,  -911,  -911,  -911,  -911,  -911,  -911,  -911,  -911,  -911,
    -911,  -911,  -911,  -911,  -911,  -911,  -911,     0,     0,  -911,
     860,  -911,  -911,     0,   596,  -911,  -911,     0,     0,  -911,
    -911,     0,  -911,  -911,  -911,  -911,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,   651,   256,   652,   653,   654,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,   655,     0,     0,     0,   262,     0,   656,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,  1131,
    1132,  1133,   642,  1134,  1135,  1136,  1137,   647,   648,  1138,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,   651,   256,   652,   653,   654,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,   655,     0,     0,     0,   262,     0,   656,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1000,     0,  1001,  1002,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,  1264,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1000,     0,  1001,  -110,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,  1271,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1000,     0,  1001,   -98,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,  1275,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1000,     0,  1001,  -102,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1529,     0,  1001,   -65,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1538,     0,  1001,  1539,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,  1596,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1000,     0,  1001,   -81,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1538,     0,  1001,  -107,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1538,     0,  1001,   -97,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1538,     0,  1001,  -101,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,  1779,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1000,     0,  1001,   -88,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1538,     0,  1001,   -78,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,    20,    21,   252,   253,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,   254,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,     0,     0,
     319,   650,    40,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,   257,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,   258,   259,
     260,   261,   212,   213,   330,   331,   332,     0,     0,   333,
       0,   334,  1538,     0,  1001,   -85,   756,     0,     0,   335,
     336,     0,   337,   338,   339,   340,   310,     0,     1,   311,
     108,   312,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,    29,     0,     0,     0,   316,   317,   318,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
     319,   415,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,     0,    42,     0,   322,   323,
     324,   325,   326,   327,   328,   329,    45,    46,    47,    48,
      49,    50,   212,   213,   330,   331,   332,     0,     0,   333,
     310,   334,     1,   311,   108,   312,     0,   313,   314,   335,
     336,     0,   337,   338,   339,   340,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   878,    29,     0,     0,
       0,   316,   317,   318,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,   319,   415,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,     0,
      42,     0,   322,   323,   324,   325,   326,   327,   328,   329,
      45,    46,    47,    48,    49,    50,   212,   213,   330,   331,
     332,     0,     0,   333,   310,   334,     1,   311,   108,   312,
       0,   313,   314,   335,   336,     0,   337,   338,   339,   340,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1210,    29,     0,     0,     0,   316,   317,   318,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,   319,   415,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,     0,    42,     0,   322,   323,   324,   325,
     326,   327,   328,   329,    45,    46,    47,    48,    49,    50,
       0,     0,   330,   331,   332,     0,     0,   333,   745,   334,
       0,     0,     0,     0,     0,     0,     0,   335,   336,     0,
     337,   338,   339,   340,   310,     0,     1,   311,   108,   312,
       0,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,    29,     0,     0,     0,   316,   317,   318,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,   319,   415,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,     0,    42,     0,   322,   323,   324,   325,
     326,   327,   328,   329,    45,    46,    47,    48,    49,    50,
       0,     0,   330,   331,   332,     0,     0,   333,   310,   334,
       1,   311,   108,   312,   262,   313,   314,   335,   336,     0,
     337,   338,   339,   340,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     8,     9,    10,   575,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,     0,     0,     0,   316,
     317,   318,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,   319,   415,    40,    41,     0,   310,     0,     1,
     311,   108,   312,     0,   313,   314,   321,     0,    42,     0,
     322,   323,   324,   325,   326,   327,   328,   329,    45,    46,
      47,    48,    49,    50,     2,     0,   330,   331,   901,     0,
       0,   902,   745,   334,     0,     0,     0,     0,     0,     0,
       0,   335,   336,     0,   337,   338,   339,   340,     0,     0,
    1131,  1132,  1133,   642,  1134,  1135,  1136,  1137,   647,   648,
    1138,     0,     0,   315,     0,     0,     0,     0,   316,   317,
     318,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,   319,   320,  1139,     0,   652,   653,   654,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     0,   322,
     323,   324,   325,   326,   327,   328,   329,    45,    46,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,  1174,   334,   655,     0,  1175,     0,   262,     0,   656,
     335,   336,     0,   337,   338,   339,   340,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1131,  1132,  1133,   642,  1134,  1135,  1136,  1137,   647,   648,
    1138,     0,     0,   315,     0,     0,     0,     0,   316,   317,
     318,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,   319,   320,  1139,     0,   652,   653,   654,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     0,   322,
     323,   324,   325,   326,   327,   328,   329,    45,    46,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,     0,   334,   655,     0,     0,     0,   262,     0,   656,
     335,   336,     0,   337,   338,   339,   340,  1852,     0,     1,
     311,   108,   312,     0,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1131,  1132,  1133,   642,  1134,  1135,  1136,  1137,   647,   648,
    1138,     0,     0,   315,     0,     0,     0,     0,   316,   317,
     318,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,   319,   320,  1139,     0,   652,   653,   654,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     0,   322,
     323,   324,   325,   326,   327,   328,   329,    45,    46,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,     0,   334,   655,     0,     0,     0,   262,     0,   656,
     335,   336,     0,   337,   338,   339,   340,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,     0,     0,   315,     0,     0,     0,     0,   316,   317,
     318,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,   319,   320,  1139,     0,   652,   653,   654,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     0,   322,
     323,   324,   325,   326,   327,   328,   329,    45,    46,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,     0,   334,   655,     0,     0,     0,   262,     0,   656,
     335,   336,     0,   337,   338,   339,   340,  1872,     0,     1,
     311,   108,   312,     0,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,  1174,   334,  1873,     0,  1175,     0,     0,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,  1174,   334,     0,     0,  1743,
       0,     0,     0,  1890,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,  1174,
     334,     0,     0,  1743,     0,     0,     0,  1894,   335,   336,
       0,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,  2022,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,  1174,   334,  1873,     0,  1175,     0,     0,
       0,     0,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,  1174,   334,  1873,
       0,  1175,     0,     0,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,  2088,   334,  2089,     0,  1170,     0,     0,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,  1174,   334,  2087,     0,  1175,
       0,     0,     0,     0,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,     0,
     334,  1169,     0,  1170,     0,     0,     0,     0,   335,   336,
       0,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,  1280,   334,     0,     0,     0,     0,   756,
       0,     0,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,  1347,   334,     0,
       0,     0,     0,   756,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,     0,   334,  1150,     0,     0,     0,   756,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,  1629,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,  1174,   334,     0,     0,  1175,
       0,     0,     0,     0,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,  1630,
     334,  1631,     0,     0,     0,     0,     0,     0,   335,   336,
       0,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,     0,   334,  1639,     0,  1170,     0,     0,
       0,     0,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,  1709,   334,     0,
       0,  1170,     0,     0,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,     0,   334,     0,     0,  1170,     0,     0,     0,     0,
     335,   336,  1737,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,     0,   334,     0,     0,  1740,
       0,     0,     0,  1741,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,     0,
     334,     0,     0,  1170,     0,     0,     0,     0,   335,   336,
    1747,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,     0,   334,     0,     0,  1740,     0,     0,
       0,  1749,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,  1848,   334,     0,
       0,  1170,     0,     0,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,  1850,   334,     0,     0,  1170,     0,     0,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,  1851,   334,     0,     0,  1175,
       0,     0,     0,     0,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,  1854,
     334,     0,     0,  1170,     0,     0,     0,     0,   335,   336,
       0,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,  1630,   334,  1631,     0,     0,     0,     0,
       0,     0,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,  1874,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,     0,   334,  1871,
       0,  1170,     0,     0,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,  1875,   334,  1631,     0,     0,     0,     0,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,     0,   334,     0,     0,  1740,
       0,     0,     0,  1888,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,     0,
     334,     0,     0,  1740,     0,     0,     0,  1892,   335,   336,
       0,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,  2007,   334,     0,     0,  1170,     0,     0,
       0,     0,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,  1849,   334,     0,
       0,  1175,     0,     0,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,  2014,   334,     0,     0,  1170,     0,     0,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,  1875,   334,  1631,     0,     0,
       0,     0,     0,     0,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,  2092,
     334,     0,     0,  1170,     0,     0,     0,     0,   335,   336,
       0,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,     0,   334,     0,     0,     0,  2121,  1030,
       0,     0,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,  2124,   334,     0,
       0,  1170,     0,     0,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,  2125,   334,     0,     0,  1170,     0,     0,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,  2153,   334,     0,     0,  1170,
       0,     0,     0,     0,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,     0,
     334,     0,     0,     0,     0,     0,     0,     0,   335,   336,
     559,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,     0,   334,     0,     0,     0,     0,   756,
       0,     0,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,     0,   334,     0,
       0,     0,     0,     0,     0,     0,   335,   336,   852,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,     0,   334,     0,     0,     0,     0,     0,     0,     0,
     335,   336,   856,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,     0,   334,     0,     0,     0,
       0,  1030,     0,     0,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,     0,
     334,     0,     0,     0,     0,     0,     0,     0,   335,   336,
    1071,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,     0,   334,     0,     0,     0,     0,     0,
       0,  1123,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,  1474,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,   745,   334,     0,
       0,     0,     0,     0,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,     0,   334,     0,     0,     0,     0,   756,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,     0,   334,     0,     0,     0,
       0,     0,     0,     0,   335,   336,  1577,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,  1613,
     334,     0,     0,     0,     0,     0,     0,     0,   335,   336,
       0,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,     0,   334,     0,     0,     0,     0,     0,
       0,  1616,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,  1808,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   333,     0,   334,     0,
       0,     0,     0,  1807,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,  1811,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,     0,   334,     0,     0,     0,     0,   756,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,  1815,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,     0,   334,     0,     0,     0,
       0,   756,     0,     0,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,     0,
     334,     0,     0,     0,     0,   756,     0,     0,   335,   336,
       0,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   333,  1861,   334,     0,     0,     0,     0,     0,
       0,     0,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,  1921,     0,   334,     0,
       0,     0,     0,  1807,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,   310,     0,     1,   311,   108,   312,     0,   313,   314,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     2,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,   332,     0,     0,
     333,  2023,   334,     0,     0,     0,     0,     0,     0,     0,
     335,   336,     0,   337,   338,   339,   340,   315,     0,     0,
       0,     0,   316,   317,   318,   310,     0,     1,   311,   108,
     312,     0,   313,   314,     0,   319,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
       0,     0,     2,   322,   323,   324,   325,   326,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,   330,
     331,   332,     0,     0,   333,  2083,   334,     0,     0,     0,
       0,     0,     0,     0,   335,   336,     0,   337,   338,   339,
     340,   315,     0,     0,     0,     0,   316,   317,   318,   310,
       0,     1,   311,   108,   312,     0,   313,   314,     0,   319,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,     0,     0,     2,   322,   323,   324,
     325,   326,   327,   328,   329,     0,     0,     0,     0,     0,
       0,     0,     0,   330,   331,   332,     0,     0,   333,     0,
     334,     0,     0,     0,     0,     0,     0,     0,   335,   336,
       0,   337,   338,   339,   340,   315,     0,     0,     0,     0,
     316,   317,   318,   310,     0,     1,   311,   108,   312,     0,
     313,   314,     0,   319,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
       2,   322,   323,   324,   325,   326,   327,   328,   329,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,   332,
       0,     0,   715,     0,   334,     0,     0,     0,     0,     0,
       0,     0,   335,   336,     0,   337,   338,   339,   340,   315,
       0,     0,     0,     0,   316,   317,   318,   310,     0,     1,
     311,   108,   312,     0,   313,   314,     0,   319,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,     0,     0,     2,   322,   323,   324,   325,   326,
     327,   328,   329,     0,     0,     0,     0,     0,     0,     0,
       0,   330,   331,   332,     0,     0,   718,     0,   334,     0,
       0,     0,     0,     0,     0,     0,   335,   336,     0,   337,
     338,   339,   340,   315,     0,     0,     0,     0,   316,   317,
     318,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   319,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,     0,     0,     0,   322,
     323,   324,   325,   326,   327,   328,   329,     0,     0,  -899,
     594,     0,  -899,  -899,  -899,   330,   331,   332,     0,     0,
     741,     0,   334,     0,     0,     0,     0,     0,     0,     0,
     335,   336,     0,   337,   338,   339,   340,  -899,  -899,  -899,
    -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,
    -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,
    -899,  -899,     0,     0,  -899,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -899,  -899,  -899,     0,
       0,  -899,  -899,     0,  -899,  -899,     0,     0,  -899,  -899,
    -899,  -899,  -899,  -899,     0,  -899,  -899,  -899,  -899,     0,
       0,  -899,  -899,  -899,  -899,     0,  -899,     0,  -899,  -899,
    -899,     0,  -899,  -899,  -899,  -899,  -899,  -899,  -899,     0,
    -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,     0,
    -899,     0,     0,  -899,   595,  -899,  -899,     0,   596,  -899,
       0,     0,     0,  -899,  -899,  -189,   919,     0,  -189,  -189,
    -189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,     0,
    -189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -189,  -189,  -189,     0,     0,  -189,  -189,     0,
    -189,  -189,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,
       0,  -189,  -189,  -189,  -189,     0,     0,  -189,  -189,  -189,
    -189,     0,  -189,     0,  -189,  -189,  -189,     0,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,     0,  -189,     0,     0,  -189,
       0,  -189,   920,     0,   921,  -189,     0,     0,     0,  -189,
    -189,  -253,   933,     0,     1,   311,   108,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,  -253,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   315,    29,
     433,     0,     0,   316,   317,     0,    30,    31,     0,     0,
     434,    34,   435,   436,    37,    38,     0,   415,    40,    41,
     437,     0,     0,   438,   439,   440,   441,     0,   442,     0,
     443,   444,    42,     0,   322,   323,   324,   325,   326,   327,
     328,     0,    45,    46,    47,    48,    49,    50,   212,   213,
     330,     0,    53,     0,     0,   445,     0,   446,   447,  -251,
     936,  -253,     1,   311,   108,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,  -251,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,    29,   433,     0,
       0,   316,   317,     0,    30,    31,     0,     0,   434,    34,
     435,   436,    37,    38,     0,   415,    40,    41,   437,     0,
       0,   438,   439,   440,   441,     0,   442,     0,   443,   444,
      42,     0,   322,   323,   324,   325,   326,   327,   328,     0,
      45,    46,    47,    48,    49,    50,   212,   213,   330,     0,
      53,     0,     0,   445,     0,   446,   447,  -254,   933,  -251,
       1,   311,   108,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,  -254,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,   433,     0,     0,   316,
     317,     0,    30,    31,     0,     0,   434,    34,   435,   436,
      37,    38,     0,   415,    40,    41,   437,     0,     0,   438,
     439,   440,   441,     0,   442,     0,   443,   444,    42,     0,
     322,   323,   324,   325,   326,   327,   328,     0,    45,    46,
      47,    48,    49,    50,   212,   213,   330,     0,    53,     0,
       0,   445,     0,   446,   447,  -252,   936,  -254,     1,   311,
     108,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
    -252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,    29,   433,     0,     0,   316,   317,     0,
      30,    31,     0,     0,   434,    34,   435,   436,    37,    38,
       0,   415,    40,    41,   437,     0,     0,   438,   439,   440,
     441,     0,   442,     0,   443,   444,    42,     0,   322,   323,
     324,   325,   326,   327,   328,     0,    45,    46,    47,    48,
      49,    50,   212,   213,   330,     0,    53,     0,     0,   445,
       0,   446,   447,     0,   432,  -252,     1,   311,   108,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,    29,   433,     0,     0,   316,   317,     0,    30,    31,
       0,     0,   434,    34,   435,   436,    37,    38,     0,   415,
      40,    41,   437,     0,     0,   438,   439,   440,   441,     0,
     442,     0,   443,   444,    42,     0,   322,   323,   324,   325,
     326,   327,   328,     0,    45,    46,    47,    48,    49,    50,
     212,   213,   330,     0,    53,     0,     0,   445,     0,   446,
     447,     0,   498,   448,     1,   311,   108,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   315,    29,
     433,     0,     0,   316,   317,     0,    30,    31,     0,     0,
     434,    34,   435,   436,    37,    38,     0,   415,    40,    41,
     437,     0,     0,   438,   439,   440,   441,     0,   442,     0,
     443,   444,    42,     0,   322,   323,   324,   325,   326,   327,
     328,     0,    45,    46,    47,    48,    49,    50,   212,   213,
     330,     0,    53,     0,     0,   445,     0,   446,   447,     0,
     520,   499,     1,   311,   108,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,    29,   433,     0,
       0,   316,   317,     0,    30,    31,     0,     0,   434,    34,
     435,   436,    37,    38,     0,   415,    40,    41,   437,     0,
       0,   438,   439,   440,   441,     0,   442,     0,   443,   444,
      42,     0,   322,   323,   324,   325,   326,   327,   328,     0,
      45,    46,    47,    48,    49,    50,   212,   213,   330,     0,
      53,     0,     0,   445,     0,   446,   447,     0,   525,   521,
       1,   311,   108,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,   433,     0,     0,   316,
     317,     0,    30,    31,     0,     0,   434,    34,   435,   436,
      37,    38,     0,   415,    40,    41,   437,     0,     0,   438,
     439,   440,   441,     0,   442,     0,   443,   444,    42,     0,
     322,   323,   324,   325,   326,   327,   328,     0,    45,    46,
      47,    48,    49,    50,   212,   213,   330,     0,    53,     0,
       0,   445,     0,   446,   447,     0,   529,   526,     1,   311,
     108,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,    29,   433,     0,     0,   316,   317,     0,
      30,    31,     0,     0,   434,    34,   435,   436,    37,    38,
       0,   415,    40,    41,   437,     0,     0,   438,   439,   440,
     441,     0,   442,     0,   443,   444,    42,     0,   322,   323,
     324,   325,   326,   327,   328,     0,    45,    46,    47,    48,
      49,    50,   212,   213,   330,     0,    53,     0,     0,   445,
       0,   446,   447,     0,   933,   530,     1,   311,   108,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,    29,   433,     0,     0,   316,   317,     0,    30,    31,
       0,     0,   434,    34,   435,   436,    37,    38,     0,   415,
      40,    41,   437,     0,     0,   438,   439,   440,   441,     0,
     442,     0,   443,   444,    42,     0,   322,   323,   324,   325,
     326,   327,   328,     0,    45,    46,    47,    48,    49,    50,
     212,   213,   330,     0,    53,     0,     0,   445,     0,   446,
     447,     0,   936,  -754,     1,   311,   108,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   315,    29,
     433,     0,     0,   316,   317,     0,    30,    31,     0,     0,
     434,    34,   435,   436,    37,    38,     0,   415,    40,    41,
     437,     0,     0,   438,   439,   440,   441,     0,   442,     0,
     443,   444,    42,     0,   322,   323,   324,   325,   326,   327,
     328,     0,    45,    46,    47,    48,    49,    50,   212,   213,
     330,     0,    53,     0,     0,   445,     0,   446,   447,     0,
     933,  -755,     1,   311,   108,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,    29,   433,     0,
       0,   316,   317,     0,    30,    31,     0,     0,   434,    34,
     435,   436,    37,    38,     0,   415,    40,    41,   437,     0,
       0,   438,   439,   440,   441,     0,   442,     0,   443,   444,
      42,     0,   322,   323,   324,   325,   326,   327,   328,     0,
      45,    46,    47,    48,    49,    50,   212,   213,   330,     0,
      53,     0,     0,   445,     0,   446,   447,     0,   936,  -751,
       1,   311,   108,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,   433,     0,     0,   316,
     317,     0,    30,    31,     0,     0,   434,    34,   435,   436,
      37,    38,     0,   415,    40,    41,   437,     0,     0,   438,
     439,   440,   441,     0,   442,     0,   443,   444,    42,     0,
     322,   323,   324,   325,   326,   327,   328,     0,    45,    46,
      47,    48,    49,    50,   212,   213,   330,     0,    53,     0,
       0,   445,     0,   446,   447,     0,   933,  -752,     1,   311,
     108,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,    29,   433,     0,     0,   316,   317,     0,
      30,    31,     0,     0,   434,    34,   435,   436,    37,    38,
       0,   415,    40,    41,   437,     0,     0,   438,   439,   440,
     441,     0,   442,     0,   443,   444,    42,     0,   322,   323,
     324,   325,   326,   327,   328,     0,    45,    46,    47,    48,
      49,    50,   212,   213,   330,     0,    53,     0,     0,   445,
       0,   446,   447,     0,   936,  -757,     1,   311,   108,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,    29,   433,     0,     0,   316,   317,     0,    30,    31,
       0,     0,   434,    34,   435,   436,    37,    38,     0,   415,
      40,    41,   437,     0,     0,   438,   439,   440,   441,     0,
     442,     0,   443,   444,    42,     0,   322,   323,   324,   325,
     326,   327,   328,     0,    45,    46,    47,    48,    49,    50,
     212,   213,   330,     0,    53,     0,     0,   445,     0,   446,
     447,     0,  1053,  -758,     1,   311,   108,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   315,    29,
     433,     0,     0,   316,   317,     0,    30,    31,     0,     0,
     434,    34,   435,   436,    37,    38,     0,   415,    40,    41,
     437,     0,     0,   438,   439,   440,   441,     0,   442,     0,
     443,   444,    42,     0,   322,   323,   324,   325,   326,   327,
     328,     0,    45,    46,    47,    48,    49,    50,   212,   213,
     330,     0,    53,     0,     0,   445,     0,   446,   447,     0,
    1057,  1054,     1,   311,   108,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,    29,   433,     0,
       0,   316,   317,     0,    30,    31,     0,     0,   434,    34,
     435,   436,    37,    38,     0,   415,    40,    41,   437,     0,
       0,   438,   439,   440,   441,     0,   442,     0,   443,   444,
      42,     0,   322,   323,   324,   325,   326,   327,   328,     0,
      45,    46,    47,    48,    49,    50,   212,   213,   330,     0,
      53,     0,     0,   445,     0,   446,   447,     0,   310,  1058,
       1,   311,   108,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,   433,     0,     0,   316,
     317,     0,    30,    31,     0,     0,   434,    34,   435,   436,
      37,    38,     0,   415,    40,    41,   437,     0,     0,   438,
     439,   440,   441,     0,   442,     0,   443,   444,    42,     0,
     322,   323,   324,   325,   326,   327,   328,     0,    45,    46,
      47,    48,    49,    50,   212,   213,   330,     0,    53,     0,
       0,   445,     0,   446,   447,     0,   933,  -649,     1,   311,
     108,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,    29,   433,     0,     0,   316,   317,     0,
      30,    31,     0,     0,   434,    34,   435,   436,    37,    38,
       0,   415,    40,    41,   437,     0,     0,   438,   439,   440,
     441,     0,   442,     0,   443,   444,    42,     0,   322,   323,
     324,   325,   326,   327,   328,     0,    45,    46,    47,    48,
      49,    50,   212,   213,   330,     0,    53,     0,     0,   445,
       0,   446,   447,     0,   936,  -734,     1,   311,   108,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,    29,   433,     0,     0,   316,   317,     0,    30,    31,
       0,     0,   434,    34,   435,   436,    37,    38,     0,   415,
      40,    41,   437,     0,     0,   438,   439,   440,   441,     0,
     442,     0,   443,   444,    42,     0,   322,   323,   324,   325,
     326,   327,   328,     0,    45,    46,    47,    48,    49,    50,
     212,   213,   330,     0,    53,     0,     0,   445,     0,   446,
     447,     0,   933,  -735,     1,   311,   108,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   315,    29,
     433,     0,     0,   316,   317,     0,    30,    31,     0,     0,
     434,    34,   435,   436,    37,    38,     0,   415,    40,    41,
     437,     0,     0,   438,   439,   440,   441,     0,   442,     0,
     443,   444,    42,     0,   322,   323,   324,   325,   326,   327,
     328,     0,    45,    46,    47,    48,    49,    50,   212,   213,
     330,     0,    53,     0,     0,   445,     0,   446,   447,     0,
     936,  -737,     1,   311,   108,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,    29,   433,     0,
       0,   316,   317,     0,    30,    31,     0,     0,   434,    34,
     435,   436,    37,    38,     0,   415,    40,    41,   437,     0,
       0,   438,   439,   440,   441,     0,   442,     0,   443,   444,
      42,     0,   322,   323,   324,   325,   326,   327,   328,     0,
      45,    46,    47,    48,    49,    50,   212,   213,   330,     0,
      53,     0,     0,   445,     0,   446,   447,     0,  1559,  -738,
       1,   311,   108,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,   433,     0,     0,   316,
     317,     0,    30,    31,     0,     0,   434,    34,   435,   436,
      37,    38,     0,   415,    40,    41,   437,     0,     0,   438,
     439,   440,   441,     0,   442,     0,   443,   444,    42,     0,
     322,   323,   324,   325,   326,   327,   328,     0,    45,    46,
      47,    48,    49,    50,   212,   213,   330,     0,    53,     0,
       0,   445,     0,   446,   447,     0,   933,  1560,     1,   311,
     108,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,    29,   433,     0,     0,   316,   317,     0,
      30,    31,     0,     0,   434,    34,   435,   436,    37,    38,
       0,   415,    40,    41,   437,     0,     0,   438,   439,   440,
     441,     0,   442,     0,   443,   444,    42,     0,   322,   323,
     324,   325,   326,   327,   328,     0,    45,    46,    47,    48,
      49,    50,   212,   213,   330,     0,    53,     0,     0,   445,
       0,   446,   447,     0,   936,  -644,     1,   311,   108,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,    29,   433,     0,     0,   316,   317,     0,    30,    31,
       0,     0,   434,    34,   435,   436,    37,    38,     0,   415,
      40,    41,   437,     0,     0,   438,   439,   440,   441,     0,
     442,     0,   443,   444,    42,     0,   322,   323,   324,   325,
     326,   327,   328,     0,    45,    46,    47,    48,    49,    50,
     212,   213,   330,     0,    53,     0,     0,   445,     0,   446,
     447,     0,   933,  -645,     1,   311,   108,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   315,    29,
     433,     0,     0,   316,   317,     0,    30,    31,     0,     0,
     434,    34,   435,   436,    37,    38,     0,   415,    40,    41,
     437,     0,     0,   438,   439,   440,   441,     0,   442,     0,
     443,   444,    42,     0,   322,   323,   324,   325,   326,   327,
     328,     0,    45,    46,    47,    48,    49,    50,   212,   213,
     330,     0,    53,     0,     0,   445,     0,   446,   447,     0,
     936,  -740,     1,   311,   108,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,    29,   433,     0,
       0,   316,   317,     0,    30,    31,     0,     0,   434,    34,
     435,   436,    37,    38,     0,   415,    40,    41,   437,     0,
       0,   438,   439,   440,   441,     0,   442,     0,   443,   444,
      42,     0,   322,   323,   324,   325,   326,   327,   328,     0,
      45,    46,    47,    48,    49,    50,   212,   213,   330,     0,
      53,     0,     0,   445,     0,   446,   447,     0,   310,  -741,
       1,   311,   108,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,   433,     0,     0,   316,
     317,     0,    30,    31,     0,     0,   434,    34,   435,   436,
      37,    38,     0,   415,    40,    41,   437,     0,     0,   438,
     439,   440,   441,     0,   442,     0,   443,   444,    42,     0,
     322,   323,   324,   325,   326,   327,   328,     0,    45,    46,
      47,    48,    49,    50,   212,   213,   330,     0,    53,     0,
       0,   445,     0,   446,   447,     0,   310,  -648,     1,   311,
     108,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,    29,   433,     0,     0,   316,   317,     0,
      30,    31,     0,     0,   434,    34,   435,   436,    37,    38,
       0,   415,    40,    41,   437,     0,     0,   438,   439,   440,
     441,     0,   442,     0,   443,   444,    42,     0,   322,   323,
     324,   325,   326,   327,   328,     0,    45,    46,    47,    48,
      49,    50,   212,   213,   330,     0,    53,     0,     0,   445,
       0,   446,   447,     0,   310,  -646,     1,   311,   108,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,    29,   433,     0,     0,   316,   317,     0,    30,    31,
       0,     0,   434,    34,   435,   436,    37,    38,     0,   415,
      40,    41,   437,     0,     0,   438,   439,   440,   441,     0,
     442,     0,   443,   444,    42,     0,   322,   323,   324,   325,
     326,   327,   328,     0,    45,    46,    47,    48,    49,    50,
     212,   213,   330,     0,    53,     0,     0,   445,     0,   446,
     447,     0,   310,  -624,     1,   311,   108,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   315,    29,
     433,     0,     0,   316,   317,     0,    30,    31,     0,     0,
     434,    34,   435,   436,    37,    38,     0,   415,    40,    41,
     437,     0,     0,   438,   439,   440,   441,     0,   442,     0,
     443,   444,    42,     0,   322,   323,   324,   325,   326,   327,
     328,     0,    45,    46,    47,    48,    49,    50,   212,   213,
     330,     0,    53,     0,     0,   445,     0,   446,   447,     0,
     933,  -623,     1,   311,   108,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,    29,   433,     0,
       0,   316,   317,     0,    30,    31,     0,     0,   434,    34,
     435,   436,    37,    38,     0,   415,    40,    41,   437,     0,
       0,   438,   439,   440,   441,     0,   442,     0,   443,   444,
      42,     0,   322,   323,   324,   325,   326,   327,   328,     0,
      45,    46,    47,    48,    49,    50,   212,   213,   330,     0,
      53,     0,     0,   445,     0,   446,   447,     0,   936,  -637,
       1,   311,   108,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,   433,     0,     0,   316,
     317,     0,    30,    31,     0,     0,   434,    34,   435,   436,
      37,    38,     0,   415,    40,    41,   437,     0,     0,   438,
     439,   440,   441,     0,   442,     0,   443,   444,    42,     0,
     322,   323,   324,   325,   326,   327,   328,     0,    45,    46,
      47,    48,    49,    50,   212,   213,   330,     0,    53,     0,
       0,   445,     0,   446,   447,     0,   310,  -638,     1,   311,
     108,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,    29,   433,     0,     0,   316,   317,     0,
      30,    31,     0,     0,   434,    34,   435,   436,    37,    38,
       0,   415,    40,    41,   437,     0,     0,   438,   439,   440,
     441,     0,   442,     0,   443,   444,    42,     0,   322,   323,
     324,   325,   326,   327,   328,     0,    45,    46,    47,    48,
      49,    50,   212,   213,   330,     0,    53,     0,     0,   445,
       0,   446,   447,     0,   933,  -647,     1,   311,   108,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,    29,   433,     0,     0,   316,   317,     0,    30,    31,
       0,     0,   434,    34,   435,   436,    37,    38,     0,   415,
      40,    41,   437,     0,     0,   438,   439,   440,   441,     0,
     442,     0,   443,   444,    42,     0,   322,   323,   324,   325,
     326,   327,   328,     0,    45,    46,    47,    48,    49,    50,
     212,   213,   330,     0,    53,     0,     0,   445,     0,   446,
     447,     0,   936,  -633,     1,   311,   108,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   315,    29,
     433,     0,     0,   316,   317,     0,    30,    31,     0,     0,
     434,    34,   435,   436,    37,    38,     0,   415,    40,    41,
     437,     0,     0,   438,   439,   440,   441,     0,   442,     0,
     443,   444,    42,     0,   322,   323,   324,   325,   326,   327,
     328,     0,    45,    46,    47,    48,    49,    50,   212,   213,
     330,     0,    53,     0,     0,   445,     0,   446,   447,     0,
     933,  -634,     1,   311,   108,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,    29,   433,     0,
       0,   316,   317,     0,    30,    31,     0,     0,   434,    34,
     435,   436,    37,    38,     0,   415,    40,    41,   437,     0,
       0,   438,   439,   440,   441,     0,   442,     0,   443,   444,
      42,     0,   322,   323,   324,   325,   326,   327,   328,     0,
      45,    46,    47,    48,    49,    50,   212,   213,   330,     0,
      53,     0,     0,   445,     0,   446,   447,     0,   936,  -621,
       1,   311,   108,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,   433,     0,     0,   316,
     317,     0,    30,    31,     0,     0,   434,    34,   435,   436,
      37,    38,     0,   415,    40,    41,   437,     0,     0,   438,
     439,   440,   441,     0,   442,     0,   443,   444,    42,     0,
     322,   323,   324,   325,   326,   327,   328,     0,    45,    46,
      47,    48,    49,    50,   212,   213,   330,     0,    53,     0,
       0,   445,     0,   446,   447,     0,   933,  -622,     1,   311,
     108,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   315,    29,   433,     0,     0,   316,   317,     0,
      30,    31,     0,     0,   434,    34,   435,   436,    37,    38,
       0,   415,    40,    41,   437,     0,     0,   438,   439,   440,
     441,     0,   442,     0,   443,   444,    42,     0,   322,   323,
     324,   325,   326,   327,   328,     0,    45,    46,    47,    48,
      49,    50,   212,   213,   330,     0,    53,     0,     0,   445,
       0,   446,   447,     0,   936,  -616,     1,   311,   108,   335,
     336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     315,    29,   433,     0,     0,   316,   317,     0,    30,    31,
       0,     0,   434,    34,   435,   436,    37,    38,     0,   415,
      40,    41,   437,     0,     0,   438,   439,   440,   441,     0,
     442,     0,   443,   444,    42,     0,   322,   323,   324,   325,
     326,   327,   328,     0,    45,    46,    47,    48,    49,    50,
     212,   213,   330,     0,    53,     0,     0,   445,     0,   446,
     447,     0,   933,  -617,     1,   311,   108,   335,   336,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   315,    29,
     433,     0,     0,   316,   317,     0,    30,    31,     0,     0,
     434,    34,   435,   436,    37,    38,     0,   415,    40,    41,
     437,     0,     0,   438,   439,   440,   441,     0,   442,     0,
     443,   444,    42,     0,   322,   323,   324,   325,   326,   327,
     328,     0,    45,    46,    47,    48,    49,    50,   212,   213,
     330,     0,    53,     0,     0,   445,     0,   446,   447,     0,
     936,  -635,     1,   311,   108,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   315,    29,   433,     0,
       0,   316,   317,     0,    30,    31,     0,     0,   434,    34,
     435,   436,    37,    38,     0,   415,    40,    41,   437,     0,
       0,   438,   439,   440,   441,     0,   442,     0,   443,   444,
      42,     0,   322,   323,   324,   325,   326,   327,   328,     0,
      45,    46,    47,    48,    49,    50,   212,   213,   330,     0,
      53,     0,     0,   445,     0,   446,   447,     0,   432,  -636,
       1,   311,   108,   335,   336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,    29,   433,     0,     0,   316,
     317,     0,    30,    31,     0,     0,   434,    34,   435,   436,
      37,    38,     0,   415,    40,    41,   437,     0,     0,   438,
     439,   440,   441,     0,   442,     0,   443,   444,    42,     0,
     322,   323,   324,   325,   326,   327,   328,     0,    45,    46,
      47,    48,    49,    50,   212,   213,   330,     0,    53,     0,
       0,   445,     0,   446,   447,   498,     0,     1,   311,   108,
       0,   335,   336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   206,   207,   208,   209,   210,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   315,    29,   433,     0,     0,   316,   317,     0,    30,
      31,     0,     0,   434,    34,   435,   436,    37,    38,     0,
     415,    40,    41,   437,     0,     0,   438,   439,   440,   441,
       0,   442,     0,   443,   444,    42,     0,   322,   323,   324,
     325,   326,   327,   328,     0,    45,    46,    47,    48,    49,
      50,   212,   213,   330,   205,    53,     1,     0,   445,     0,
     446,   447,     0,     0,     0,     0,     0,     0,   335,   336,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
     575,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     211,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     212,   213,     0,   205,    53,     1,     0,   576,  1062,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   577,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   206,   207,   208,   209,   210,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   211,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   212,
     213,     1,     0,    53,     0,     0,   874,  1062,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   577,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   206,   207,   208,
     209,   210,     8,     9,    10,   575,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,   212,   213,     1,     0,    53,
       0,     0,   576,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   577,     0,   578,     0,     0,     0,     0,
       0,     0,     2,   206,   207,   208,   209,   210,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   212,   213,     1,     0,    53,     0,     0,   874,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   577,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   206,
     207,   208,   209,   210,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,    20,    21,   252,   253,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   254,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,     0,   255,    40,   256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,   258,   259,   260,   261,   212,   213,     1,
       0,    53,     0,     0,   874,     0,     0,     0,     0,     0,
       0,  1439,     0,     0,     0,   577,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   206,   207,   208,   209,   210,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,    20,    21,   252,   253,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   254,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,     0,   255,    40,   256,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,   258,
     259,   260,   261,   212,   213,     1,     0,    53,     0,     0,
     874,     0,     0,     0,     0,     0,     0,  1456,     0,     0,
       0,   577,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   206,   207,   208,   209,   210,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,    20,    21,
     252,   253,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     254,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   255,    40,
     256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,   258,   259,   260,   261,   212,
     213,     1,     0,    53,     0,     0,  1222,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1223,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   206,   207,   208,
     209,   210,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,    20,    21,   252,   253,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   254,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,     0,     0,     0,   255,    40,   256,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,   258,   259,   260,   261,   212,   213,     1,     0,    53,
       0,     0,  1222,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1245,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   206,   207,   208,   209,   210,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
      20,    21,   252,   253,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   254,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     255,    40,   256,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   258,   259,   260,
     261,   212,   213,     1,     0,    53,     0,     0,  1222,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1701,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   206,
     207,   208,   209,   210,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,    20,    21,   252,   253,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   254,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,     0,   255,    40,   256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,   258,   259,   260,   261,   212,   213,     1,
       0,    53,     0,     0,  1222,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1716,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     3,     4,   281,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,     0,     0,
       0,    30,    31,   282,    33,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,    44,     0,     0,     1,     0,    45,    46,    47,
      48,    49,    50,    51,    52,     0,     0,    53,     0,     0,
      54,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       2,   206,   207,   208,   209,   210,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,   433,     0,     0,     0,     0,     0,    30,    31,     0,
       0,   434,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     1,     0,    45,    46,    47,    48,    49,    50,   212,
     213,     0,     0,    53,     0,     0,   961,     0,   446,     0,
       0,     0,     0,     0,     0,   962,     2,   206,   207,   208,
     209,   210,     8,     9,    10,   575,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,     0,     1,     0,    45,
      46,    47,    48,    49,    50,   212,   213,     0,     0,    53,
       0,     0,   941,     0,     0,     0,     0,     0,     0,     0,
       0,   942,     2,   206,   207,   208,   209,   210,     8,     9,
      10,   575,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
       0,   632,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   212,   213,     0,     0,    53,     0,     0,    54,     0,
       0,     0,     0,     0,     0,     0,     0,   942,     2,   206,
     207,   208,   209,   210,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,    20,    21,   252,   253,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   254,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,     0,   255,    40,   256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,  1524,     0,     0,     0,     0,
       0,    45,    46,   258,   259,   260,   261,   212,   213,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   262,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -66,     0,     0,     0,     0,     0,     0,   -66,
     -66,     0,     0,     0,   -66,     0,     0,     0,     0,     0,
     -66,   -66,   -66,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -66,     0,     0,  1728,     0,
       0,     0,     0,     0,     0,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,     0,     0,     0,     0,     0,     0,     0,
       0,  1525,     0,  1526,   -66,     2,   206,   207,   208,   209,
     210,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,    20,    21,   252,   253,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   254,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   255,    40,   256,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   257,     0,
       0,  1732,     0,     0,     0,     0,     0,     0,    45,    46,
     258,   259,   260,   261,   212,   213,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -111,     2,   206,
     207,   208,   209,   210,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,    20,    21,   252,   253,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   254,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,     0,   255,    40,   256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,  1733,     0,     0,     0,     0,     0,
       0,    45,    46,   258,   259,   260,   261,   212,   213,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -95,     2,   206,   207,   208,   209,   210,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,    20,
      21,   252,   253,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   254,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   255,
      40,   256,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   257,     0,     0,  1839,     0,     0,
       0,     0,     0,     0,    45,    46,   258,   259,   260,   261,
     212,   213,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -96,     2,   206,   207,   208,   209,   210,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,    20,    21,   252,   253,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   254,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,     0,
       0,     0,   255,    40,   256,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   257,     0,     0,
    1984,     0,     0,     0,     0,     0,     0,    45,    46,   258,
     259,   260,   261,   212,   213,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -80,     2,   206,   207,
     208,   209,   210,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,    20,    21,   252,   253,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   254,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,     0,     0,     0,   255,    40,   256,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     257,     0, -1294,   300,     0,     1,     0,     0,     0,     0,
      45,    46,   258,   259,   260,   261,   212,   213,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -87,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,     0,     0,     0,    30,    31,    32,
      33,     0,    34,    35,    36,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,    43,     1,     0,     0,    44,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,    51,
      52,     0,     0,    53,     0,     0,    54,     0,     0,    55,
       2,   206,   207,   208,   209,   210,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     1,     0,
     844,     0,     0,    45,    46,    47,    48,    49,    50,   212,
     213,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1415,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     1,     0,   844,     0,     0,    45,    46,    47,    48,
      49,    50,   212,   213,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1759,     2,   206,   207,   208,
     209,   210,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,   167,     0,     1,     0,   844,     0,     0,    45,
      46,    47,    48,    49,    50,   212,   213,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1760,     2,
       3,     4,   168,     6,     7,     8,     9,    10,   169,   170,
     171,   172,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,   167,     0,     1,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,    51,    52,
       0,     0,    53,     0,     0,    54,     0,     0,   173,     0,
       2,     3,     4,   168,     6,     7,     8,     9,    10,   169,
     170,   171,   172,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,   615,     0,     1,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,    51,
      52,     0,     0,    53,     0,     0,    54,     0,     0,   173,
       0,     2,   206,   207,   208,   209,   210,   240,   241,   242,
     616,   617,   618,   619,   247,   248,   249,   250,   251,    20,
      21,   252,   253,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   254,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,     0,     0,     0,   255,
      40,   256,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   257,  -919,     0,  -919,     0,     0,
       0,     0,     0,     0,    45,    46,   258,   259,   260,   261,
     212,   213,     0,     0,    53,     0,     0,    54,     0,     0,
     620,     0,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -919,     0,     0,     0,     0,     0,     0,  -919,
    -919,     0,     0,     0,  -919,     0,     0,     0,     0,     0,
    -919,  -919,  -919,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -919,     0,     1,     0,     0,
       0,     0,     0,     0,     0,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,     0,     0,  -919,     0,     0,  -919,     0,
       0,  -919,     2,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,     0,     0,     0,    30,
      31,    32,    33,     0,    34,    35,    36,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,    43,     0, -1295,   292,
      44,     1,     0,     0,     0,    45,    46,    47,    48,    49,
      50,    51,    52,     0,     0,    53,     0,     0,    54,     0,
       0,    55,     0,     0,     0,     0,     2,     3,     4,   168,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,    35,
      36,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   205,     0,     1,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,    51,    52,     0,     0,    53,
       0,     0,    54,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   211,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    42,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   212,   213,     0,     0,    53,     0,     0,  1222,
    1688,     0,     2,   206,   207,   208,   209,   210,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   211,    29,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,    37,    38,     0,
      39,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   205,    42,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,    47,    48,    49,
      50,   212,   213,     0,     0,     0,     0,     0,     0,   214,
       0,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     211,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   954,    42,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     212,   213,     0,     0,     0,     0,     0,     0,   398,     0,
       2,   206,   207,   208,   209,   210,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   211,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1482,    42,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   212,
     213,     0,     0,     0,     0,     0,     0,   214,     0,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   211,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    42,     1,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   212,   213,
       0,     0,     0,     0,     0,     0,   398,     0,     2,   206,
     207,   208,   209,   210,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   211,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     205,    42,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,   212,   213,     0,
       0,     0,     0,     0,     0,  1574,     0,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   211,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   167,
      42,     1,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,   212,   213,     0,     0,
       0,     0,     0,     0,  1911,     0,     2,     3,     4,   168,
       6,     7,     8,     9,    10,   575,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   167,     0,     1,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
      46,    47,    48,    49,    50,    51,    52,     0,     0,    53,
       0,     0,    54,     2,     3,     4,   168,     6,     7,     8,
       9,    10,   575,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   898,     0,     1,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,    51,    52,     0,     0,    53,     0,     0,    54,
       2,   206,   207,   208,   209,   210,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,    20,    21,
     252,   253,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     254,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   255,    40,
     256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,   258,   259,   260,   261,   212,
     213,     0,     0,     0,     0,     0,   899,     2,     3,     4,
     168,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,    51,    52,     0,     0,
      53,     0,     0,    54,     2,   206,   207,   208,   209,   210,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   212,   213,     0,     0,    53,     0,     0,
      54,     2,   206,   207,   208,   209,   210,     8,     9,    10,
     575,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     212,   213,     0,     0,    53,     0,     0,    54,     2,   206,
     207,   208,   209,   210,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    29,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,    37,    38,     0,    39,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,    47,    48,    49,    50,   212,   213,     0,
       0,     0,     0,     0,   733,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   212,   213,     0,     0,     0,     0,
       0,  1461,     2,   206,   207,   208,   209,   210,   240,   241,
     242,  1546,   244,   245,   246,   247,   248,   249,   250,   251,
      20,    21,   252,   253,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   254,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     255,    40,   256,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1085,     0,     1,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   258,   259,   260,
     261,   212,   213,     0,     0,    53,     0,     0,    54,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,  1086,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   211,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,  1091,     0,     1,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   212,   213,
       2,   206,   207,   208,   209,   210,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,  1092,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   211,
      29,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,    37,    38,     0,    39,    40,
      41,     0,     0,     0,  1097,     0,     1,     0,     0,     0,
       0,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,    47,    48,    49,    50,   212,
     213,     2,   206,   207,   208,   209,   210,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,  1098,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     211,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,   883,     0,     1,     0,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
     212,   213,     2,   206,   207,   208,   209,   210,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
      20,    21,   252,   253,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   254,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     255,    40,   256,     0,     0,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   258,   259,   260,
     261,   212,   213,     2,   206,   207,   208,   209,   210,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,  1046,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   211,    29,     0,     0,     0,     0,     0,     0,
      30,    31,     0,     0,     0,    34,     0,     0,    37,    38,
       0,    39,    40,    41,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,    46,    47,    48,
      49,    50,   212,   213,     2,   206,   207,   208,   209,   210,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,  1103,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   211,    29,     0,     0,     0,     0,     0,
       0,    30,    31,     0,     0,     0,    34,     0,     0,    37,
      38,     0,    39,    40,    41,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,    46,    47,
      48,    49,    50,   212,   213,     2,   206,   207,   208,   209,
     210,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   512,    29,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
      37,    38,     0,    39,    40,    41,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
      47,    48,    49,    50,   212,   213,     2,   206,   207,   208,
     209,   210,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,    30,    31,     0,     0,     0,    34,     0,
       0,    37,    38,     0,    39,    40,    41,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,   844,     0,     0,    45,
      46,    47,    48,    49,    50,   212,   213,     2,   206,   207,
     208,   209,   210,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   211,    29,     0,     0,
       0,     0,     0,     0,    30,    31,     0,     0,     0,    34,
       0,     0,    37,    38,     0,    39,    40,    41,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,    46,    47,    48,    49,    50,   212,   213,     2,   206,
     207,   208,   209,   210,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,    20,    21,   252,   253,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   254,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,   487,   488,     0,     0,     0,   255,    40,   256,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,   258,   259,   260,   261,   212,   213,     2,
     206,   207,   208,   209,   210,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
       0,    34,     0,     0,    37,    38,     0,    39,    40,    41,
       0,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,    46,    47,    48,    49,    50,   212,   213,
       2,   206,   207,   208,   209,   210,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,    20,    21,
     252,   253,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     254,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   255,    40,
     256,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,   258,   259,   260,   261,   212,
     213,     2,     0,     0,     0,     0,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,    30,    31,
       0,     0,     0,    34,     0,     0,    37,    38,     0,    39,
      40,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,    46,    47,    48,    49,    50,
       2,   206,   207,   208,   209,   210,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,    20,    21,
     252,   253,    24,    25,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     254,     0,     0,     0,     0,     0,     0,    30,    31,     0,
       0,     0,    34,     0,     0,     0,     0,     0,   255,    40,
     256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,    46,   258,   259,   260,   261,   212,
     213,     0,     0,    53,     0,     0,   874,  1685,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   577,     2,   206,
     207,   208,   209,   210,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,    20,    21,   252,   253,
      24,    25,    26,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   254,     0,
       0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
      34,     0,     0,     0,     0,     0,   255,    40,   256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,    46,   258,   259,   260,   261,   212,   213,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   262,     2,   206,   207,   208,   209,   210,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
      20,    21,   252,   253,    24,    25,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   254,     0,     0,     0,     0,     0,     0,    30,
      31,     0,     0,     0,    34,     0,     0,     0,     0,     0,
     255,    40,   256,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,    46,   258,   259,   260,
     261,   212,   213,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1535,     2,   206,   207,   208,   209,
     210,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,    20,    21,   252,   253,    24,    25,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   254,     0,     0,     0,     0,
       0,     0,    30,    31,     0,     0,     0,    34,     0,     0,
       0,     0,     0,   255,    40,   256,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   257,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
     258,   259,   260,   261,   212,   213
};

static const yytype_int16 yycheck[] =
{
       0,   972,   546,   732,    94,   654,   940,    88,   138,   873,
     479,   734,   134,   155,    85,   102,    88,   278,  1030,   940,
     130,  1115,   146,   353,   130,  1013,   102,   840,   849,   483,
      95,   146,    32,    33,  1232,   159,    85,   161,   296,   163,
     480,    66,    85,    43,   159,   134,   161,   849,   163,   130,
      85,    32,    95,   873,    54,   158,    95,     1,   130,   352,
     756,    61,   756,    44,   546,   187,    66,   763,    68,   763,
     766,   591,   766,   366,     3,    86,   950,   370,   873,     1,
    1623,     5,     5,   890,    84,    85,    86,  1012,    88,  1014,
       1,     3,  1635,    93,     1,    95,     3,    85,   187,    28,
     190,   191,   102,   103,   840,     1,   106,    95,    37,    95,
    1012,     1,  1014,   353,   102,   115,   102,    17,   118,     3,
      17,     5,   190,   191,     3,  2109,     5,     1,   109,   110,
     130,     1,   113,   133,   134,   122,    85,    86,   138,  1012,
     127,  1014,   142,   143,   144,     1,   146,     3,    61,     1,
     150,     1,   152,   178,   807,   155,   156,     3,   158,   159,
     160,   161,     5,   163,     1,     3,   166,     5,     1,   897,
       3,   991,     3,     3,   131,     1,   133,     3,   178,     1,
       1,  2165,   835,     3,   133,     3,   276,   187,     5,   133,
      17,     1,     5,   124,  1012,   124,  1014,     1,    28,     1,
       1,   125,   115,     1,   204,   127,   135,   129,   130,   296,
     278,   298,   135,  1020,     1,   286,   216,     1,   218,   130,
     296,   479,   298,   130,     3,   296,   226,   227,   358,   297,
     566,   566,   124,   298,   130,    17,   236,   286,     5,   239,
     130,   125,   124,   971,   893,   145,   125,   296,   145,   133,
    1221,   286,   278,   296,   133,   298,   130,   127,     3,   298,
     596,   596,   273,   599,   599,   601,   601,   603,   603,   479,
       1,   296,   124,   273,   130,   121,   122,  1265,   278,     3,
     130,   403,   282,    28,  1272,   131,   286,   125,  1276,   132,
     772,   204,    37,   130,   124,   133,   296,   130,   298,   429,
     131,   282,   678,   679,   130,   125,   127,   125,   130,   129,
     298,   129,   298,   133,   403,   133,   316,   127,   145,   129,
     130,   134,   322,  1866,   273,     3,   130,   430,   130,   130,
      75,    76,   130,   333,   772,    80,   818,   286,   127,     3,
       3,  1266,    87,   130,     3,   124,   130,   347,  1273,     3,
      28,     5,  1277,   122,   335,    78,   876,     1,   125,   449,
     450,   451,   452,   145,  1266,     5,   111,   112,     3,    28,
     663,  1273,   308,   666,    28,  1277,   121,    70,    71,   124,
     818,   317,     1,     7,     8,     9,   130,   323,   133,   389,
     390,     3,     1,  1266,  1207,   395,  1209,   397,   129,   480,
    1273,   125,   130,   403,  1277,     1,     3,     3,   480,   409,
     133,    74,   124,     3,     3,   676,   677,   678,   679,   541,
     131,     1,   422,   135,  1120,   567,  1120,   427,   897,   429,
     430,    28,   127,   433,   434,   557,   131,   130,    28,   439,
       3,     3,   442,   443,   444,   445,   446,   571,  1266,   573,
     127,   709,   541,   131,   131,  1273,   571,   547,   573,  1277,
     550,   125,   792,   793,   794,    28,   576,  1438,   557,   591,
     576,  1207,   131,  1209,   474,   475,   476,   131,     3,   479,
     480,   125,   395,   483,   397,   129,   486,   122,   123,   129,
       3,   491,   822,   823,   824,   495,   496,  1591,  1696,  1222,
     500,   501,   971,     1,   958,    67,   960,   947,   132,     5,
     129,   135,   512,   125,    54,   124,   125,  1240,   518,   519,
     129,   427,   522,   523,  1247,   121,   122,   527,   528,     3,
    1501,   531,   532,   129,     1,   535,   536,   537,   538,   539,
    1552,   541,   131,   741,   544,   125,   744,  1067,  1030,   129,
       3,  1020,   792,   793,   794,   555,   556,   557,  1078,   121,
     122,   561,     1,  1012,  1013,  1014,   566,   567,   131,   131,
    1434,   571,  1446,   573,   574,   130,   576,   577,   578,     3,
     808,   581,   822,   823,   824,     3,   535,   536,   537,   538,
     539,   591,     1,   133,     1,     5,   596,  1418,  1419,   599,
       3,   601,   127,   603,   129,     3,   555,   556,   836,  1597,
     610,  1545,  1486,   519,  1434,  1489,  1418,  1419,   131,   125,
     138,   139,   709,   129,  1545,    28,   308,     3,   124,   127,
      28,   129,   890,   709,    37,   317,   704,   705,   709,  1434,
     121,   323,   732,   395,   644,   397,   646,   121,   122,     5,
     676,   677,   678,   679,   654,  1519,    74,   131,   125,     3,
     709,   124,   129,     1,   577,     7,     8,     9,   121,   122,
     576,   801,   802,  1598,   804,   128,   676,   677,   678,   679,
     890,     3,     0,    85,  1166,   124,   125,   227,  1170,     5,
     129,  1173,     3,  1175,   694,   695,  1598,   610,  1710,   829,
     830,   831,   832,   703,  1902,     5,   131,   131,   133,   709,
     691,   692,   130,   971,   124,   715,   125,  1512,   125,  1514,
     129,   124,   129,   723,  1695,  1598,   124,     0,   128,  1700,
     730,   731,   732,   733,   734,   735,     7,     8,     9,     3,
     950,   741,   872,   873,   744,   121,   122,  1123,  1084,  1084,
    1126,   135,    74,   753,  1090,   131,   737,   738,   739,   124,
    1096,   971,  1020,   128,   874,   129,  1102,  1102,   874,   769,
     135,   127,   136,   773,   710,   127,     7,     8,     9,  1880,
    1598,   125,   124,     1,  1480,   187,  1480,   125,  1164,   129,
     132,   129,  1780,   135,  1765,  1807,     3,   129,     5,     7,
       8,     9,  1178,  1179,  1180,  1181,  1818,   336,   130,   122,
    1020,   130,    85,   129,   125,   815,  1265,  1266,   131,   819,
       3,   124,    95,  1272,  1273,   577,   122,  1276,  1277,   102,
     103,   809,   135,   923,   924,   131,   926,   947,   129,   929,
     930,   947,   972,   985,   844,   845,   846,   753,   125,   849,
     850,   851,   129,   124,    12,    13,  1781,   124,   122,   837,
     984,   132,  1123,   127,   135,  1126,   947,   129,   135,   984,
     810,   121,   872,   873,   874,   947,   979,   980,   878,  1781,
     880,   881,   125,   129,   286,     3,   129,   639,   888,   889,
     890,   141,   142,   893,   296,  1769,  1770,   897,   838,   899,
     900,   132,   902,  1164,   904,   445,   124,   125,  1781,  1051,
    1052,   129,  1432,  1003,   121,   122,   811,  1178,  1179,  1180,
    1181,     1,   130,    11,   132,     7,     8,     9,     7,     8,
       9,  2032,  1262,  2034,     1,   128,     3,  1061,   121,   122,
     133,   941,  1806,   943,   839,  1067,  1061,   947,  1919,     3,
     950,     5,   128,     3,  1076,   955,  1078,   133,   958,   807,
     960,   961,   129,  1781,   122,   123,  1689,     3,   874,  1079,
     970,   971,   972,  1079,     3,   881,     5,    31,  1067,   979,
     980,   131,   982,   889,   984,   985,  1998,   835,   130,  1718,
     990,   991,   992,   993,   900,    75,    76,  2098,   809,  2100,
      80,  2102,    31,   121,   122,   808,  1655,    87,  1552,     1,
     128,   125,  1481,   286,   122,     7,     8,     9,    12,    13,
    1020,   129,  1262,   296,    91,   298,   837,   135,   710,    10,
      11,   111,   112,   836,     1,   123,   576,   124,   578,  2140,
    2141,   129,  2143,   124,  1564,   130,   128,   127,  1982,   129,
     132,  1051,  1052,   132,   135,  1055,  1056,     3,  2159,  1059,
    1060,  1061,   123,  1063,  2076,    11,  1066,  1067,   129,     3,
    1552,   121,   122,  1197,   124,  2176,  1076,   479,  1078,  1079,
    1080,   125,  1197,   810,  1084,   121,   122,  1087,   124,   124,
    1090,  1221,   129,  1093,   795,   796,  1096,  1123,   135,  1099,
    1126,   121,  1102,   811,  1104,  2117,   125,   124,    75,    76,
     129,   838,  1222,    80,   133,    78,  1222,  1066,  1118,    80,
      87,   141,   142,  1123,   825,   826,  1126,   128,   122,   123,
       0,   839,   124,    67,   124,  1135,   128,  1137,  1164,   541,
     132,   129,   544,   135,   111,   112,  1146,   135,  1597,  1598,
     111,   112,  1178,  1179,  1180,  1181,   124,   124,   125,  1159,
    1066,   434,   129,   137,  1164,  1165,   125,  1080,   124,    94,
     129,   131,   133,   133,  1155,   121,   122,   123,  1178,  1179,
    1180,  1181,   128,   129,    54,   131,   124,   121,   122,     1,
     942,     3,  1921,   122,   124,     3,  1196,  1197,  1198,  1994,
    1200,  1996,   131,   125,   133,     3,   124,   129,   123,   144,
    1210,   133,  1212,   123,   129,    85,    86,  1217,   123,   129,
      28,  1221,  1222,    93,   129,    95,     3,  1603,  1604,   981,
      28,   123,   102,   103,   124,  1884,  1446,   129,    46,  1615,
    1240,   124,  1762,   138,   805,   806,   125,  1247,    46,    80,
     129,    28,   124,  1735,   133,   156,  1256,   786,  1740,   160,
      37,  1743,   131,   133,   134,   190,   191,    75,    76,   123,
     131,     1,   833,   834,  1818,   129,  1486,    75,    76,  1489,
     111,   112,  1263,     3,   813,   797,   798,   143,   795,   796,
      16,     6,   821,     8,     9,   125,   127,  1210,    75,    76,
     131,   703,   137,    80,  1434,     3,  1826,   709,  1438,   125,
      87,  1217,   841,   129,  1220,   827,   828,   187,   825,   826,
     535,   536,   537,   538,   539,  1807,   143,   125,  1080,   125,
      28,  1780,  1781,   129,   111,   112,  1818,   133,    14,    15,
     555,   556,  1603,  1604,   121,    75,    76,   124,    46,   144,
      80,   276,    16,   278,  1615,    75,    76,    87,   135,    74,
      80,   125,   902,   138,   139,   129,   236,    87,   123,   239,
      85,  1501,   297,   131,   129,   133,   125,    75,    76,  1131,
     123,   111,   112,   125,   123,   131,   129,   129,   123,  1519,
     129,   111,   112,     1,   129,   110,   123,   127,   128,   129,
     123,   941,   129,   273,   125,   120,   129,   122,   129,  1409,
    1410,   131,   131,  1413,  1414,   955,   286,   125,  1418,  1419,
     135,   961,     3,   138,   139,   140,   296,   125,   298,   125,
    1430,   129,   124,  1414,  1434,  1435,   709,   123,  1438,   127,
      75,    76,  1564,   129,  1444,    80,  1446,    28,   131,  1449,
    1572,   125,    87,  1453,  1998,   129,    37,   125,  1458,  1459,
    1460,   129,   129,   358,  2113,     3,   127,    75,    76,    10,
      11,  1223,    80,     3,   122,  1564,   111,   112,  1854,    87,
     131,  1481,   133,  1483,   122,   127,  1486,   129,   890,  1489,
      14,    15,  1492,  1245,    75,    76,   131,   122,    28,    80,
     127,  1501,   129,   111,   112,   128,    87,  1507,  1508,   797,
     798,  1460,  1512,  1513,  1514,  1515,  1998,   921,   922,   127,
     128,   129,   921,   922,   449,  1431,  1066,   452,   555,   556,
     111,   112,  2076,   403,   429,   676,   677,    75,    76,   827,
     828,   129,    80,   124,   131,    75,    76,   136,   950,    87,
      80,     1,   136,     3,   135,   131,   127,    87,   129,  1769,
    1770,  1561,  1562,   136,  1564,  1695,   131,   805,   806,   971,
    1700,   135,  1572,   111,   112,   445,   129,  1603,  1604,   129,
       3,   111,   112,  1583,   676,   677,   124,  1697,   131,  1615,
     133,  1697,   129,  1854,  2076,   833,   834,   129,    70,    71,
     131,   131,   133,  1603,  1604,    28,     3,    89,    90,    91,
       1,   130,     3,  1613,   131,  1615,  1616,   127,  1020,  1619,
      92,   133,   547,  1623,    96,   550,    98,  1627,   124,     3,
    1630,    28,     1,   124,     3,  1765,     1,    11,     3,     1,
     127,     3,   129,   124,   127,  1626,   129,  2023,     3,  2025,
     102,   103,    75,    76,   127,  1655,    11,    80,   130,   850,
     851,  1642,  1662,   127,    87,   535,   536,   537,   538,   539,
     131,   541,   133,  1797,   544,  1799,  1806,  1583,    75,    76,
     124,  1771,  1797,    80,  1799,   555,   556,   557,   111,   112,
      87,    75,    76,    75,    76,  1695,    80,  1697,    80,  1823,
    1700,  1825,   124,    87,  1826,    87,   576,   131,  1823,   133,
    1825,  1526,   127,  1528,   111,   112,  2092,  1526,  1718,  1528,
    1720,  1721,   127,   127,  1724,   131,   127,   111,   112,   111,
     112,   125,   122,   136,   131,   130,   136,  1826,  1490,   135,
    1269,   122,     0,   125,   128,   125,   131,   121,   122,   123,
     136,   676,   677,   678,   679,   129,  1756,   131,   136,   136,
     136,   131,  2023,   127,  2025,  1765,   121,   122,   123,  1769,
    1770,   130,  1772,   128,   129,   129,   131,   122,   130,   704,
     705,   706,   130,   125,  1784,    43,   125,  2117,   125,  1919,
     136,   124,   136,   136,   125,   125,  1198,  1797,  1200,  1799,
     124,   133,  1802,    61,   133,  1741,  1742,   133,  1744,  1745,
      68,   124,   124,  1749,  1750,  1751,  1752,    58,   127,   127,
     127,   124,   122,  1823,   122,  1825,  1826,    85,  1854,   125,
      88,  2092,   127,   703,   125,   122,    94,    95,   124,   709,
     124,   135,   122,   125,   102,   103,   125,   125,  1848,  1849,
    1850,  1851,   135,   129,  1854,   129,   125,   115,  1858,  1859,
     118,  1861,   317,  1863,   129,   125,   130,  1991,   323,   125,
     133,   133,   130,   127,   133,  1875,  1991,  2117,    75,    76,
     138,   133,   125,    80,  1884,   143,   144,  1887,   146,   125,
      87,   128,   130,   125,   125,   125,  1802,  1878,   156,  1880,
     158,   159,   160,   161,   125,   163,   801,   802,   136,   804,
     136,   136,    58,   133,   111,   112,   133,   124,   124,  1919,
    1460,  1921,   125,   124,   121,   133,   125,   124,   133,   133,
     125,   133,   190,   191,   829,   830,   831,   832,   135,   125,
     395,   125,   397,  1483,   125,   125,   204,  1699,   136,  1701,
     122,   136,  1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,
     218,   135,   135,  1715,  1716,   136,   136,   127,    11,   227,
     131,   128,   131,   127,   124,   133,   128,   872,   873,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,  1989,
    1990,  1991,  1992,  1993,  1994,   133,  1996,  2023,   128,  2025,
     127,   125,   131,  2003,  2004,  2005,  2006,   125,   125,   125,
     136,   136,   125,   136,  2014,   273,  2106,  2107,   276,   277,
     278,   136,     3,  2023,   136,  2025,  2026,   136,   286,   136,
     136,   125,   902,   125,   125,  2035,  2036,    66,   296,   297,
     298,    66,   127,  1583,  1446,   125,  1982,    28,   136,   136,
     125,  2032,   136,  2034,   136,   127,    37,   127,   316,  1741,
    1742,   127,  1744,  1745,   322,   136,  2092,  1749,  1750,  1751,
    1752,   941,  2072,  2073,   127,   333,   131,   972,  1003,  2079,
    2080,   125,   127,  2083,  1486,  2085,   127,  1489,  2088,   128,
     127,   961,  2092,   127,    75,    76,   127,   127,   486,    80,
     127,   127,   125,   127,  2148,   127,    87,  2107,   990,  2109,
    1515,   486,   872,  2113,   486,   486,  2097,  2098,   486,  2100,
     296,  2102,   577,   927,   818,  2125,  1481,   296,   444,   982,
     111,   112,   390,   735,  1807,   322,   273,   395,  2097,   397,
     121,   434,   102,   124,   125,    95,    75,    76,  2148,  2149,
    2131,    80,    95,  2153,   103,    95,   278,  1756,    87,  2140,
    2141,    -1,  2143,    -1,    -1,  2165,    -1,    -1,  1920,   427,
      -1,   429,   430,    -1,    -1,   433,   434,  1929,  2159,    -1,
      -1,   439,   111,   112,   639,   443,   444,    -1,   446,    -1,
      -1,    -1,    -1,    -1,    -1,  2176,  1066,  1067,  1123,    -1,
      -1,  1126,    -1,    -1,    -1,    -1,  1888,  1889,  1890,  1891,
    1892,  1893,  1894,  1895,    -1,    -1,   474,   475,    46,    47,
      -1,   479,   480,    -1,    -1,    -1,    -1,    -1,   486,    -1,
      -1,    -1,    -1,   491,  1986,  1987,    -1,    -1,   496,  1164,
      -1,    -1,   500,   501,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,  1178,  1179,  1180,  1181,    -1,    -1,    87,
      -1,   519,    -1,    -1,   522,   523,    -1,    75,    76,   527,
     528,    -1,    80,   531,   532,    -1,  1201,    -1,  1203,    87,
      -1,    -1,   540,   111,   112,    -1,   144,    -1,    -1,   547,
      -1,    -1,   550,    -1,    -1,    -1,   124,    -1,   156,    -1,
    1982,    -1,   160,   111,   112,    -1,    -1,    -1,   566,    -1,
      -1,    -1,    -1,   571,    -1,   573,    -1,   125,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,  1221,    -1,  1198,    -1,
    1200,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   596,    37,
      -1,   599,    -1,   601,    -1,   603,    -1,    -1,    46,    47,
      -1,    -1,   610,    -1,   143,    -1,    -1,   146,    -1,  1888,
    1889,  1890,  1891,  1892,  1893,  1894,  1895,  1769,  1770,    -1,
     159,    -1,   161,    -1,   163,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,     3,    -1,   474,   475,    -1,    -1,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    28,    -1,
      -1,   500,   501,   111,   112,   273,    -1,    37,   676,   677,
     678,   679,     7,   121,    -1,    10,    11,    12,    13,    14,
      15,    16,    17,   522,   523,    -1,    -1,    -1,   527,   528,
      -1,    -1,   531,   532,    -1,    -1,   704,   705,   706,    -1,
      -1,   709,    -1,  1982,    -1,    75,    76,   715,   316,    -1,
      80,    -1,   474,   475,   322,   723,    -1,    87,     3,    -1,
      -1,    -1,   730,   731,   732,    -1,   734,   735,    -1,    -1,
      -1,    -1,    -1,   741,    -1,    -1,   744,   942,   500,   501,
      -1,   111,   112,    28,    -1,   753,    -1,    -1,   756,    -1,
      -1,   121,    37,    -1,   124,   763,    -1,    -1,   766,    -1,
     522,   523,   122,   123,    -1,   527,   528,    -1,    -1,   531,
     532,    -1,   132,    -1,    -1,    -1,   981,   137,   138,   139,
      -1,   141,   142,   143,   144,   145,    -1,   122,   123,  1434,
      75,    76,    -1,  1438,    -1,    80,    -1,   132,   540,    -1,
      -1,    -1,    87,    -1,    -1,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      47,    -1,    -1,    -1,    -1,   433,   111,   112,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,   444,    -1,   846,   124,
    1460,   849,   850,   851,    -1,    -1,    -1,    -1,    75,    76,
      75,    76,    -1,    80,    -1,    80,  1501,    -1,    28,    -1,
      87,  1536,    87,    -1,   872,   873,   874,    37,    38,    39,
      40,    75,    76,   881,  1519,  1080,    80,    -1,    -1,    -1,
      -1,   889,   890,    87,   111,   112,   111,   112,   496,   897,
      46,    47,   900,    -1,   902,    -1,   904,   124,    -1,    -1,
     125,    -1,    -1,    -1,    -1,    75,    76,   111,   112,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    87,    -1,    75,
      76,   125,    -1,    -1,    80,    -1,  1131,    -1,  1603,  1604,
      -1,    87,    -1,    -1,    -1,   474,   475,    -1,    -1,   947,
    1615,   111,   112,    -1,  1564,    -1,    -1,   955,    -1,    -1,
      -1,   121,    -1,    -1,   124,   111,   112,   127,    -1,   129,
     130,   500,   501,   971,   972,   121,    -1,    -1,    -1,    -1,
      -1,   979,   980,    -1,    75,    76,   984,    -1,    -1,    80,
      -1,   723,   990,   522,   523,    -1,    87,    -1,   527,   528,
      -1,    -1,   531,   532,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,    -1,  1012,  1013,  1014,    -1,    -1,    -1,
     111,   112,  1020,    -1,   756,    -1,    -1,    -1,  1223,    -1,
     121,   763,     0,   124,   766,    28,    -1,    -1,    -1,    -1,
      -1,    -1,   571,    -1,   573,    -1,    -1,    -1,    -1,    -1,
    1245,    -1,    -1,   143,    -1,    -1,   146,  1055,  1056,    -1,
    1695,  1059,  1060,  1061,    -1,  1700,    -1,    -1,    -1,   159,
      -1,   161,    -1,   163,    67,    -1,    -1,    -1,    -1,    72,
      73,  1079,  1080,    -1,    -1,    -1,  1084,    -1,    -1,    -1,
      -1,    -1,  1090,    86,    -1,    -1,    -1,    -1,  1096,    -1,
      -1,    -1,    -1,    -1,  1102,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,    85,    -1,    -1,
      -1,    -1,  1120,    -1,    -1,  1123,   119,    95,  1126,    -1,
    1765,   124,   730,   731,   102,   103,   734,   735,    -1,    -1,
      -1,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1164,    -1,    -1,    -1,
      -1,  1806,    -1,    -1,   276,   277,    -1,    -1,    -1,    -1,
    1178,  1179,  1180,  1181,    -1,    -1,    -1,    -1,    -1,  1854,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1196,  1197,
      -1,    -1,    -1,  1201,    -1,  1203,    -1,    54,    -1,    -1,
      -1,    -1,  1210,    -1,    -1,    -1,  1826,    -1,    -1,  1217,
      -1,    -1,  1220,  1221,  1222,    -1,  1055,  1056,    -1,    -1,
    1059,  1060,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    -1,  1240,    -1,    -1,    -1,    93,    -1,    95,  1247,
      -1,    -1,    -1,    -1,    -1,   102,   103,    -1,    -1,   227,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1265,  1266,    -1,
      -1,    -1,    -1,    -1,  1272,  1273,    -1,    -1,  1276,  1277,
    1012,  1013,  1014,    -1,  1919,    -1,   133,   134,   135,   136,
     137,   889,    -1,    -1,    -1,  1490,   143,     3,    -1,   146,
      -1,    -1,   900,  1055,  1056,    -1,    -1,  1059,  1060,    -1,
      -1,    -1,   159,    -1,   161,    -1,   163,    -1,   286,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,   296,    -1,
     298,    37,    38,    39,    40,    -1,    -1,    -1,    -1,    -1,
     187,   188,   189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2023,    -1,
    2025,    -1,    -1,    -1,    -1,   333,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,   226,
     227,    87,    -1,    -1,   474,   475,    -1,    -1,  1120,    -1,
      -1,    -1,   921,   922,    -1,    -1,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,    -1,    -1,    -1,
     500,   501,    -1,    -1,    -1,   121,    -1,    -1,   124,    -1,
    1418,  1419,  1020,    -1,    -1,    -1,   273,  2092,    -1,    -1,
      -1,    -1,   522,   523,    -1,    -1,  1434,   527,   528,   286,
    1438,   531,   532,    -1,    -1,   547,    -1,    -1,   550,   296,
      -1,   298,    -1,    -1,    -1,   984,    -1,    -1,    -1,   427,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   571,  1480,   573,    -1,  1483,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1501,  1699,    -1,  1701,    -1,    -1,  1507,
    1508,   479,    -1,    -1,  1512,  1513,  1514,  1515,    -1,    -1,
    1715,  1716,    -1,    -1,    -1,    -1,  1055,  1056,    -1,    -1,
    1059,  1060,  1061,  1265,  1266,    -1,    -1,    -1,    -1,    -1,
    1272,  1273,    -1,    -1,  1276,  1277,    -1,    -1,    -1,    -1,
      -1,   519,    -1,    -1,    -1,    -1,   403,   404,   405,    -1,
      -1,    -1,    -1,  1561,  1562,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   676,   677,   678,   679,    -1,    -1,
     427,   276,   277,    -1,    -1,  1583,    -1,   434,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,  1597,
    1598,    -1,    -1,    -1,   706,  1603,  1604,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1616,    -1,
     114,  1619,  1220,    -1,    -1,    -1,    -1,   474,   475,  1627,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,    -1,   486,
      -1,    -1,  1240,    -1,   138,    -1,    -1,    -1,   495,  1247,
      -1,    -1,    -1,   500,   501,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1662,    -1,    -1,  1196,  1197,    -1,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,  1507,  1508,
     527,   528,    -1,    -1,   531,   532,    -1,    -1,   535,   536,
     537,   538,   539,    -1,    -1,    -1,    -1,  1695,    -1,  1697,
      -1,    -1,  1700,    -1,    -1,    -1,    -1,    -1,   555,   556,
     204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1718,    -1,    -1,    -1,   571,  1920,   573,    -1,    -1,   576,
      -1,   578,  1561,  1562,  1929,    -1,    -1,    -1,    -1,    -1,
      -1,   709,    -1,    -1,    -1,    -1,   593,   715,  1480,    -1,
      -1,    -1,    -1,    -1,    -1,  1507,  1508,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   732,    -1,    -1,  1765,    -1,    -1,
      -1,    -1,    -1,   741,    -1,    -1,   744,    -1,    -1,    -1,
      -1,    -1,  1780,  1781,    -1,   753,    -1,    -1,    -1,    -1,
      -1,  1986,  1987,    -1,    -1,     0,    -1,    -1,    -1,  1797,
      -1,  1799,    -1,    -1,  1802,    -1,    -1,    -1,    -1,  1561,
    1562,    -1,    -1,    -1,   308,    -1,    -1,    -1,   312,   313,
     314,    -1,    -1,   317,    -1,  1823,    -1,  1825,    -1,   323,
       0,    -1,    -1,    -1,    -1,   329,    -1,    -1,    -1,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   547,    -1,    -1,   550,   703,    -1,    -1,   353,
    1858,  1859,   709,    -1,   358,  1597,  1598,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   846,    -1,
      85,    -1,    -1,   730,    -1,    -1,    -1,   734,    -1,    -1,
      95,    -1,    -1,    -1,   984,    -1,    -1,   102,   103,    -1,
      -1,   395,    -1,   397,    -1,    -1,   753,    -1,    -1,    -1,
      -1,    -1,    -1,   881,    -1,    85,    -1,    -1,    -1,    -1,
      -1,  1919,   890,  1921,    -1,    95,    -1,    -1,    -1,   897,
      -1,    -1,   102,   103,   902,   429,   904,    -1,    -1,   144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   156,    -1,    -1,    -1,   160,    -1,    -1,    -1,    -1,
      -1,    -1,     0,    -1,    -1,  1055,  1056,    -1,    -1,  1059,
    1060,  1061,    -1,    -1,   144,    -1,    -1,    -1,  1507,  1508,
      -1,   676,   677,   678,   679,    -1,   156,   955,    -1,    -1,
     160,  1989,  1990,  1991,  1992,  1993,  1994,    -1,  1996,    -1,
      -1,    -1,    -1,   971,    -1,  2003,  2004,  2005,  2006,    -1,
      -1,   706,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1123,    -1,    -1,  1126,    -1,    -1,   874,    -1,    -1,
      -1,    -1,  1561,  1562,   881,    -1,    -1,    -1,    -1,    -1,
      -1,   888,   889,   890,    -1,    -1,   540,    85,  1780,  1781,
     897,    -1,    -1,   900,    -1,   902,    -1,    95,    -1,    -1,
      -1,    -1,  1164,    -1,   102,   103,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,  2072,  2073,  1178,  1179,  1180,  1181,
      -1,   286,    -1,   577,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,    -1,   298,   941,    -1,    -1,    -1,    -1,  1201,
      -1,  1203,    -1,   950,    -1,    -1,  1196,  1197,   955,    -1,
      -1,    -1,    -1,    -1,   961,   609,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   971,    -1,   296,    -1,   298,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   984,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   639,    -1,   994,    -1,    -1,
      -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1989,  1990,    95,  1992,  1993,    -1,    -1,    -1,    -1,   102,
     103,    -1,    -1,  1020,  2003,  2004,  2005,  2006,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1055,  1056,
      -1,   144,  1059,  1060,  1061,    -1,   710,    -1,    -1,  1066,
    1067,    -1,    -1,   156,    -1,    -1,    -1,   160,   433,    -1,
    1077,    -1,    -1,    -1,    -1,    -1,    -1,  1989,  1990,   444,
    1992,  1993,   736,  2072,  2073,    -1,   740,    -1,   286,  1217,
      -1,  2003,  2004,  2005,  2006,    -1,    -1,    -1,   296,    -1,
     298,    -1,   756,   433,    -1,    -1,    -1,    -1,  1797,   763,
    1799,    -1,   766,    -1,   444,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   496,   786,    -1,  1823,    -1,  1825,    -1,   792,   793,
     794,   795,   796,   797,   798,    -1,    -1,   801,   802,    -1,
     804,   805,   806,   807,   808,   809,   810,   811,    -1,   813,
    2072,  2073,    -1,    -1,    -1,    -1,   496,   821,   822,   823,
     824,   825,   826,   827,   828,   829,   830,   831,   832,   833,
     834,   835,   836,   837,   838,   839,    -1,   841,    -1,  1196,
    1197,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   296,    -1,   298,    -1,    -1,    -1,    -1,
    1217,    -1,    -1,  1220,    -1,  1222,    -1,    -1,   872,   873,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   427,
      -1,    -1,    -1,  1240,    -1,    -1,    -1,    -1,    -1,    -1,
    1247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1507,  1508,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1123,    -1,
      -1,  1126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   479,    -1,    -1,    -1,    -1,   940,    -1,   942,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1989,  1990,  1991,  1992,  1993,    -1,    -1,    -1,    -1,  1164,
      -1,  1561,  1562,    -1,  2003,  2004,  2005,  2006,   972,    -1,
      -1,   519,    -1,  1178,  1179,  1180,  1181,   981,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     433,  1603,  1604,    -1,   709,    -1,  1201,    -1,  1203,    -1,
      -1,   444,    -1,    -1,  1616,  1483,    -1,  1619,  1012,    -1,
    1014,    -1,    -1,    -1,    -1,  1627,    -1,    -1,    -1,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   709,
      -1,    -1,    -1,  2072,  2073,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    37,    38,    39,    40,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1431,    -1,  1080,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1446,
      -1,    -1,    -1,    -1,    75,    76,  1453,    -1,    -1,    80,
      -1,    -1,    54,  1460,    -1,  1583,    87,    -1,    -1,    -1,
      -1,    -1,    -1,   114,    -1,    -1,  1120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1481,    -1,  1483,  1131,    -1,    -1,
     111,   112,    -1,    85,    86,    -1,    -1,   138,    -1,    -1,
     121,    93,    -1,   124,    -1,    -1,   127,    -1,   129,   130,
    1507,  1508,    -1,  1157,  1158,    -1,    -1,    -1,    -1,    -1,
      -1,   709,    -1,    -1,    -1,    -1,    -1,   715,    -1,    -1,
      -1,    -1,    -1,    -1,   889,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,    -1,    -1,   900,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   741,    -1,    -1,   744,  1797,    -1,  1799,
      -1,    -1,    -1,   204,  1561,  1562,    -1,  1564,    -1,   889,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1221,    -1,  1223,
     900,    -1,    -1,  1823,    -1,  1825,  1583,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,
    1718,  1245,    -1,    -1,    -1,    -1,  1858,  1859,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1262,    -1,
      -1,    -1,  1266,    -1,    -1,  1269,   709,    -1,    -1,  1273,
      -1,    -1,    -1,  1277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   236,    -1,    -1,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   846,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,
      -1,   312,   313,   314,    -1,    -1,   317,    -1,    -1,    -1,
      -1,   273,   323,    -1,  1802,    -1,    -1,    -1,   329,    -1,
      -1,    -1,  1689,   881,   286,   336,    -1,    -1,    -1,    -1,
      -1,    -1,   890,    -1,    -1,    -1,   114,    -1,    -1,   897,
      -1,    -1,   353,    -1,    -1,    -1,   904,   358,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1989,
    1990,  1991,  1992,  1993,   395,    -1,   397,    -1,  1603,  1604,
      -1,    -1,    -1,  2003,  2004,  2005,  2006,   955,    -1,    -1,
      -1,  1616,    -1,    -1,  1619,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1627,   971,    -1,    -1,    -1,    -1,   429,    -1,
    1434,    -1,    -1,    -1,  1438,    -1,    -1,    -1,    -1,    -1,
    1797,    -1,  1799,  1921,    -1,  1802,   889,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,   900,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1823,    -1,  1825,    -1,
      -1,    -1,  2072,  2073,    -1,    -1,  1480,    -1,  1835,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1490,    -1,    -1,    -1,
      -1,    -1,    -1,   445,    -1,    -1,    -1,  1501,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     278,    -1,    -1,    -1,    -1,  1519,    -1,  1521,    -1,    -1,
      -1,    -1,  1526,    -1,  1528,    -1,    -1,    -1,    -1,    -1,
      -1,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,
      -1,  1545,    -1,    -1,    -1,   649,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   535,   536,   537,   538,   539,    -1,   541,
      -1,    -1,   544,    -1,  1598,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   555,   556,   557,    -1,    -1,   609,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   576,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1989,  1990,  1991,  1992,  1993,   114,   639,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2003,  2004,  2005,  2006,
      -1,    -1,    -1,  1858,  1859,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1210,    -1,    -1,    -1,    -1,    -1,   772,  1217,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1695,    -1,    -1,    -1,  1699,  1700,  1701,    -1,    -1,
      -1,   805,   806,   807,   808,   809,  1710,    -1,   812,   710,
      -1,  1715,  1716,    -1,   818,  2072,  2073,    -1,  1722,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,   833,
     834,   835,   836,   837,    -1,   736,   840,  1741,  1742,   740,
    1744,  1745,    -1,    -1,    -1,  1749,  1750,  1751,  1752,    -1,
      -1,   703,    -1,    -1,    -1,   756,    -1,    -1,    -1,    -1,
      -1,  1765,   763,    -1,    -1,   766,   143,    -1,    -1,   146,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1781,   546,    -1,
      -1,    -1,   159,    -1,   161,   786,   163,    -1,    -1,    -1,
      -1,   792,   793,   794,   795,   796,   797,   798,    -1,    -1,
     801,   802,  1806,   804,   805,   806,   807,   808,   809,   810,
     811,    -1,   813,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     821,   822,   823,   824,   825,   826,   827,   828,   829,   830,
     831,   832,   833,   834,   835,   836,   837,   838,   839,    -1,
     841,   609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   872,   873,    -1,    -1,    -1,   644,    -1,    -1,    -1,
      -1,  1885,  1886,    -1,  1888,  1889,  1890,  1891,  1892,  1893,
    1894,  1895,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   676,   677,
     678,   679,    -1,    -1,    -1,  1919,  1920,    -1,   395,    -1,
     397,    -1,    -1,    -1,    -1,  1929,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1483,    -1,    -1,    -1,   940,
      -1,   942,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     902,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   736,    -1,
      -1,   972,   740,    -1,    -1,    -1,    -1,    -1,  1982,    -1,
     981,    -1,  1986,  1987,    -1,    -1,    -1,    -1,    -1,   941,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   772,    -1,   958,    -1,   960,   961,
      -1,  1012,    -1,  1014,    -1,    -1,    -1,    -1,   786,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1138,  1583,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   813,    -1,    -1,    -1,    -1,
     818,    -1,    -1,   821,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1166,   540,    -1,    -1,    -1,    -1,    -1,  1173,
      -1,    -1,    -1,   841,    -1,    -1,    -1,    -1,    -1,  1080,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2099,    -1,   474,   475,    -1,
     577,    -1,    -1,  1207,    -1,  1209,    -1,    -1,    -1,   486,
      -1,    -1,    -1,  2117,  1066,  1067,    -1,    -1,    -1,  1120,
      -1,    -1,    -1,   500,   501,    -1,    -1,    -1,    -1,    -1,
    1131,    -1,   609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,   528,    -1,    -1,   531,   532,  1157,  1158,    -1,    -1,
      -1,    -1,   639,    -1,  2168,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   571,    -1,   573,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
    1221,    -1,  1223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1245,    37,  1198,    -1,  1200,    -1,
      -1,    -1,    -1,    -1,  1802,    -1,    -1,    -1,    -1,   736,
      -1,  1262,  1030,   740,    -1,  1266,    -1,    -1,  1269,    -1,
      -1,    -1,  1273,    -1,    -1,    67,  1277,    -1,    -1,   756,
      72,    73,    74,    75,    76,    -1,   763,    -1,    80,   766,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,   786,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,   813,    -1,    -1,    -1,
      -1,    -1,   134,   135,   821,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,  1123,    -1,    -1,  1126,    -1,
      -1,    -1,    -1,    -1,   841,    -1,    -1,  1135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1157,
    1158,    -1,    -1,    -1,    -1,    -1,  1164,    -1,  1166,    -1,
      -1,    -1,  1170,    -1,    -1,  1173,    -1,  1175,    -1,    -1,
    1178,  1179,  1180,  1181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1434,    -1,    -1,    -1,  1438,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   940,    -1,   942,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1480,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1490,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1501,  1269,    -1,    -1,   981,    -1,    -1,    -1,  1460,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,  1519,    -1,
    1521,    -1,    -1,   143,    -1,  1526,   146,  1528,    85,    86,
      -1,    -1,    -1,    -1,    -1,  1012,    -1,  1014,    -1,   159,
      -1,   161,    99,   163,  1545,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,   136,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1598,    -1,    -1,
      -1,    -1,    -1,  1080,    -1,    -1,    -1,   984,    -1,    -1,
      -1,    -1,  1564,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1735,    -1,    -1,    -1,    -1,  1740,  1741,  1742,  1743,
    1744,  1745,    -1,  1120,    -1,  1749,  1750,  1751,  1752,    -1,
      -1,    -1,    -1,    -1,  1131,    -1,    -1,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1055,  1056,
    1157,  1158,  1059,  1060,  1061,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1695,    -1,    -1,    -1,  1699,  1700,
    1701,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1710,
      -1,    -1,    -1,    -1,  1715,  1716,    -1,    -1,    -1,    -1,
      -1,  1722,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1741,  1742,    -1,  1744,  1745,    -1,  1223,    -1,  1749,  1750,
    1751,  1752,    -1,  1521,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1765,    -1,    -1,    -1,  1245,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1781,    -1,    -1,    -1,  1552,    -1,    -1,    -1,    -1,  1266,
      -1,    -1,  1269,    -1,    -1,    -1,  1273,    -1,    -1,    -1,
    1277,    -1,    -1,    -1,    -1,  1806,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1196,
    1197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1603,  1604,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1613,    -1,  1615,  1616,    -1,
      -1,  1619,    -1,    -1,   474,   475,    -1,    -1,    -1,  1627,
      -1,    -1,  1630,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1826,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,    -1,  1885,  1886,    -1,  1888,  1889,  1890,
    1891,  1892,  1893,  1894,  1895,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,   528,    -1,
      -1,   531,   532,    -1,    -1,    -1,    -1,    -1,  1919,  1920,
     540,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1929,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1710,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   571,    -1,   573,  1722,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1735,    -1,    -1,
      -1,    -1,  1740,    -1,    -1,  1743,    -1,    -1,    -1,    -1,
      -1,  1982,    -1,    -1,    -1,  1986,  1987,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1480,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1490,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   644,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1807,
      -1,    -1,    -1,    -1,  1521,    -1,    -1,    -1,    -1,  1526,
    1818,  1528,    -1,    -1,    -1,    -1,   676,   677,   678,   679,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1545,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1848,  1849,  1850,  1851,    -1,    -1,  1854,    -1,    -1,    -1,
    1858,  1859,    -1,  1861,    -1,  1863,    -1,    -1,  2099,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1875,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2117,  1885,  1886,    -1,
      -1,  1598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1507,  1508,    -1,    -1,    -1,    -1,   756,    -1,    -1,    -1,
      -1,    -1,    -1,   763,    -1,    -1,   766,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2168,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1561,  1562,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1699,    -1,  1701,    -1,    -1,    -1,    -1,    -1,
    1998,    -1,    -1,  1710,    -1,    -1,    -1,    -1,  1715,  1716,
      -1,    -1,    -1,    -1,    -1,  1722,  2014,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2023,    -1,  2025,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,   921,   922,    -1,  1781,    -1,    -1,    -1,  2076,    -1,
      -1,  2079,  2080,    -1,    -1,  2083,    -1,  2085,    -1,    -1,
    2088,    -1,    -1,    -1,  2092,    -1,    -1,    -1,    -1,    -1,
      -1,  2099,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2117,
      -1,    -1,    85,    86,    -1,    -1,    -1,  2125,    -1,    -1,
      -1,    -1,    -1,    -1,   984,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,     0,    -1,
      -1,    -1,    -1,    -1,    -1,  2153,   119,   120,   121,    -1,
      -1,   124,  1012,   126,  1014,    -1,   129,   130,   131,    -1,
    2168,   134,   135,    -1,   137,   138,   139,   140,  1885,  1886,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1797,    -1,  1799,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    -1,    -1,    -1,  1055,  1056,    -1,    -1,  1059,
    1060,  1061,    -1,  1920,    -1,    -1,  1823,    -1,  1825,    -1,
      -1,    -1,  1929,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
     102,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
    1120,    -1,    -1,  1123,    -1,    -1,  1126,    -1,    -1,  1986,
    1987,    -1,    -1,    -1,    -1,  1135,    -1,    -1,    -1,    -1,
      -1,    -1,   144,    88,    -1,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   156,    -1,    -1,    -1,   160,    -1,
      -1,    -1,    -1,    -1,  1164,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1178,  1179,
    1180,  1181,    -1,    -1,    -1,   130,    -1,    -1,   190,   191,
      -1,    -1,    -1,   138,    -1,    -1,  1196,  1197,   187,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   158,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   227,    -1,    -1,    -1,    -1,
      -1,    -1,  1989,  1990,  1991,  1992,  1993,    -1,   227,    -1,
      -1,    -1,  2099,    -1,    -1,    -1,  2003,  2004,  2005,  2006,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2117,    -1,    -1,    -1,    -1,    -1,  1266,    -1,    -1,    -1,
      -1,   273,    -1,  1273,   276,   277,   278,  1277,    -1,    -1,
      -1,    -1,    -1,    -1,   286,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,   296,   297,   298,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,    -1,    -1,
      -1,  2168,    28,    -1,   316,  2072,  2073,    -1,    -1,    -1,
     322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   333,    -1,    -1,    -1,    -1,    -1,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    89,    90,    91,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,   127,    -1,   129,   403,   131,    -1,   133,   134,   135,
     409,   137,   138,   139,   140,   427,    -1,    -1,    -1,    -1,
      -1,   433,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   444,    -1,    -1,   390,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   479,    -1,    -1,
    1480,    -1,    -1,    -1,   429,   430,    -1,    -1,    -1,   434,
     479,    -1,    -1,    -1,   496,    -1,    -1,    -1,   443,    -1,
      -1,   446,    -1,    -1,    -1,    -1,    -1,  1507,  1508,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1526,    -1,  1528,    -1,
      -1,    -1,    -1,    -1,    -1,   480,    -1,    -1,   540,    -1,
      -1,   486,    -1,    -1,    -1,   547,    -1,    -1,   550,    -1,
      -1,    -1,   541,    -1,    -1,   544,    -1,    -1,    -1,    -1,
      -1,  1561,  1562,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   578,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1598,    -1,
      -1,    -1,   591,  1603,  1604,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1613,    -1,  1615,  1616,    -1,    -1,  1619,
      -1,   566,    -1,    -1,    -1,    -1,    -1,  1627,    -1,    -1,
    1630,   576,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   449,    -1,    -1,    -1,    -1,    -1,   651,
      -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   676,   677,   678,   679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   704,   705,   706,    -1,    -1,   709,    -1,    -1,
      -1,    -1,    -1,   715,   703,    -1,    -1,    -1,    -1,    -1,
     709,   723,    -1,    -1,    -1,    -1,    -1,    -1,   730,   731,
     732,    -1,   734,   735,    -1,    -1,    -1,    -1,    -1,   741,
      -1,    -1,   744,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   753,    -1,    -1,   756,    -1,    -1,    -1,    -1,    -1,
      -1,   763,    -1,    -1,   766,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1781,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1797,    -1,  1799,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1823,    -1,  1825,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   644,    -1,
      -1,    -1,    -1,    -1,   846,    -1,    -1,    -1,  1848,  1849,
    1850,  1851,    -1,    -1,  1854,    -1,    -1,    -1,  1858,  1859,
      -1,  1861,    -1,  1863,    -1,    -1,    -1,    -1,    -1,    -1,
     676,   677,   678,   679,    -1,  1875,    -1,    -1,    -1,   881,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   889,   890,    -1,
      -1,    -1,    -1,    -1,    -1,   897,    -1,    -1,   900,   901,
     902,   890,   904,    -1,   849,   850,   851,    -1,   897,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   336,    -1,    -1,    -1,    -1,    -1,   872,   873,   874,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   955,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   950,    -1,    -1,    -1,    -1,   955,    -1,    -1,   971,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   971,    -1,    -1,    -1,    -1,    -1,    -1,  1989,
    1990,  1991,  1992,  1993,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   947,  2003,  2004,  2005,  2006,    -1,    -1,     0,
    1012,  1013,  1014,    -1,  2014,    -1,    -1,    -1,  1020,    -1,
      -1,    -1,    -1,  2023,    -1,  2025,    -1,   972,    -1,    -1,
      -1,  1020,    -1,    -1,   979,   980,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   990,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2072,  2073,    -1,    -1,    -1,    -1,  1067,  2079,
    2080,    -1,    -1,  2083,    -1,  2085,    -1,  1076,  2088,  1078,
      -1,    -1,  2092,    -1,    85,    86,    -1,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,    -1,
      -1,   102,   103,    -1,    -1,    -1,    -1,    -1,  1120,    -1,
      -1,  1123,    -1,    -1,  1126,  2125,    -1,    -1,    -1,   120,
      -1,    -1,    -1,    -1,  1079,    -1,    -1,  1139,    -1,  1084,
      -1,    -1,   133,    -1,    -1,  1090,    -1,   953,    -1,    -1,
      -1,  1096,    -1,  2153,    -1,    -1,    -1,  1102,    -1,    -1,
      -1,    -1,  1164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1178,  1179,  1180,  1181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,  1201,
      -1,  1203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1198,
     201,  1200,    -1,    -1,    -1,  1217,    -1,    -1,  1220,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   649,    -1,   227,    -1,  1240,    -1,
      -1,    -1,    -1,    -1,    -1,  1247,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,  1265,  1266,    -1,    -1,    -1,    -1,    -1,
    1272,  1273,    -1,    -1,  1276,  1277,  1221,  1222,    -1,    -1,
      -1,    -1,   273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,    -1,   298,    -1,    -1,
      -1,    -1,   333,    -1,    -1,    -1,    -1,  1123,    -1,    -1,
    1126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   772,  1164,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   786,  1178,  1179,  1180,  1181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     805,   806,   807,   808,   809,    -1,    -1,   812,   813,    -1,
      -1,    -1,    -1,   818,    -1,    -1,   821,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   833,   834,
     835,   836,   837,    -1,   445,   840,   841,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   427,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   445,    -1,    -1,  1446,    -1,    -1,
      -1,    -1,    -1,    -1,  1453,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1418,  1419,    -1,    -1,    -1,  1480,    -1,
      -1,  1483,    -1,    -1,    -1,    -1,    -1,    -1,   479,  1434,
      -1,   482,  1481,  1438,  1483,    -1,    -1,  1486,    -1,    -1,
    1489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   535,   536,   537,   538,   539,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1501,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   555,   556,    -1,  1512,  1513,  1514,
    1515,    -1,    -1,    -1,    -1,  1564,    -1,    -1,    -1,    -1,
      -1,  1583,    -1,  1572,    -1,   576,    -1,   578,    -1,    -1,
      -1,    -1,    -1,    -1,  1583,  1597,  1598,    -1,   589,    -1,
      -1,  1603,  1604,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1616,    -1,    -1,  1619,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1627,    -1,    -1,   649,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   627,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   715,    -1,    -1,   718,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   702,    -1,    -1,    -1,    -1,  1718,  1662,   709,    -1,
     741,    -1,    -1,  1138,    -1,    -1,   747,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   730,
      -1,    -1,    -1,   734,    -1,    -1,    -1,    -1,    -1,    -1,
    1695,  1166,  1697,   774,    -1,  1700,    -1,    -1,  1173,    -1,
      -1,    -1,   753,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1780,  1781,
    1769,  1770,    -1,  1772,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   812,  1207,    -1,  1209,    -1,    -1,  1603,  1604,   820,
    1802,    -1,    -1,    -1,    -1,    -1,    -1,  1613,    -1,  1615,
    1616,    -1,    -1,  1619,    -1,    -1,    -1,    -1,    -1,   840,
    1765,  1627,    -1,     1,  1630,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,  1826,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,  1269,    -1,  1858,  1859,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   902,    -1,   874,   875,    -1,    -1,    -1,    -1,    67,
     881,    -1,    -1,    -1,    72,    73,    74,    -1,   889,   890,
      -1,    -1,    -1,    -1,    -1,    -1,   897,    85,    86,   900,
     901,   902,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1921,
      -1,    99,    -1,    -1,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    94,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
     941,   129,    -1,    -1,    -1,   133,   134,   135,   949,   137,
     138,   139,   140,    -1,   955,    -1,    -1,    -1,    -1,    -1,
     961,    -1,   308,    -1,  1919,    -1,    -1,    -1,    -1,    -1,
     971,   317,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1020,
      -1,    -1,    -1,    -1,    -1,   190,   191,    -1,    -1,    -1,
      -1,    -1,  1848,  1849,  1850,  1851,    -1,    -1,  1854,  1994,
      -1,  1996,  1858,  1859,    -1,  1861,    -1,  1863,    -1,   395,
      -1,   397,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1875,
      -1,    -1,   227,    -1,    -1,  1066,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1075,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1123,    -1,    -1,  1126,  1127,  1128,    -1,  1130,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1138,   273,    -1,
      -1,   276,   277,   278,    -1,  1146,    -1,    -1,    -1,    -1,
      -1,    -1,  1153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   297,  1164,    -1,    -1,    -1,    -1,    -1,    -1,
    1171,    -1,    -1,    -1,    -1,  1176,    -1,  1178,  1179,  1180,
    1181,   316,    -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   333,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1207,    -1,  1209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   540,    -1,    -1,    -1,  2014,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2023,    -1,  2025,
    1241,    -1,    -1,    -1,    -1,    -1,  1217,    -1,    -1,  1220,
      -1,  1222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1230,
      -1,   577,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1240,
      -1,    -1,    -1,    -1,    -1,    -1,  1247,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1287,    -1,    -1,    -1,
      -1,    -1,   427,  2079,  2080,    -1,    -1,  2083,    -1,  2085,
      -1,    -1,  2088,    -1,    -1,    -1,  2092,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1339,  2125,
    1735,    -1,    -1,    -1,   479,  1740,  1741,  1742,  1743,  1744,
    1745,  1352,    -1,    -1,  1749,  1750,  1751,  1752,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2153,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   519,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   710,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1403,    -1,    -1,   540,    -1,    -1,    -1,    -1,
      -1,    -1,   547,    -1,    -1,   550,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     756,    -1,    -1,    -1,    -1,    -1,    -1,   763,     1,    -1,
     766,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
    1431,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1445,    -1,    -1,    -1,    -1,    -1,
      -1,  1452,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1460,
      -1,    -1,    -1,  1888,  1889,  1890,  1891,  1892,  1893,  1894,
    1895,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1481,    -1,  1483,    -1,    67,    -1,    -1,    -1,    -1,    72,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   676,   677,   678,   679,    -1,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   119,   120,    -1,   704,
     705,   706,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     715,   134,   135,    -1,   137,   138,   139,   140,   723,    -1,
      -1,    -1,  1563,    -1,    -1,   730,   731,   732,    -1,   734,
     735,    -1,  1603,  1604,    -1,    94,   741,    -1,  1609,   744,
    1611,    -1,  1583,  1614,  1615,    -1,    -1,    -1,   753,  1620,
    1621,   756,  1623,    -1,   940,    -1,   942,    -1,   763,    -1,
      -1,   766,  1633,    -1,  1635,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   981,  1667,    -1,    -1,    -1,
    1671,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1012,    -1,  1014,    -1,
      -1,   190,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   846,    -1,    -1,    -1,    -1,    -1,    -1,  1689,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   227,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   881,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   890,    -1,    -1,    -1,    -1,
      -1,    -1,   897,    -1,  1080,    -1,    -1,   902,    -1,   904,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,    -1,    -1,   276,   277,   278,
    1761,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1120,    -1,    -1,    -1,   297,    -1,
      -1,    -1,  1783,    -1,    -1,  1131,    -1,    -1,    -1,    -1,
     955,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,
      -1,  1802,    -1,   322,    -1,  1836,   971,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   333,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1854,  1855,    -1,    -1,    -1,    -1,    -1,
      -1,  1862,    -1,    -1,    -1,  1866,    -1,  1868,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1877,  1012,  1013,  1014,
      -1,    -1,    -1,    -1,    -1,  1020,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1921,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1245,
    1901,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   427,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1266,    -1,    -1,    -1,    -1,    -1,    -1,  1273,    -1,    -1,
      -1,  1277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1120,    -1,    -1,  1123,    -1,
     479,  1126,    -1,    -1,    -1,    -1,   333,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2015,  2016,    -1,  2018,    -1,  2020,
      -1,    -1,  2023,  2024,  2025,    -1,    -1,    -1,    -1,  1164,
     519,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1178,  1179,  1180,  1181,    -1,    -1,    -1,
      -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,   547,    -1,
      -1,   550,    -1,    -1,    -1,    -1,  1201,    -1,  1203,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2081,    -1,  1217,  2084,    -1,  1220,    -1,    -1,    -1,    -1,
      -1,  2092,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1240,    -1,    -1,   445,    -1,
      -1,    -1,  1247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2128,    -1,    -1,
    1265,  1266,    -1,    -1,    -1,    -1,    -1,  1272,  1273,    -1,
      -1,  1276,  1277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1480,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1490,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
    1526,    -1,  1528,    -1,    -1,   704,   705,   706,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   715,    28,    -1,  1545,
      -1,    -1,    -1,    -1,   723,    -1,    -1,    -1,    -1,    -1,
      -1,   730,   731,   732,    -1,   734,   735,    -1,    -1,    -1,
      -1,    -1,   741,    -1,    -1,   744,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   753,    -1,    67,   756,    -1,    -1,
      -1,    72,    73,    74,   763,    -1,    -1,   766,    -1,    -1,
      -1,    -1,  1598,    -1,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,   649,    -1,    -1,    -1,    -1,    -1,   119,   120,
     121,    -1,    -1,   124,    -1,   126,    -1,    -1,   665,    -1,
     131,    -1,   669,   134,   135,   136,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,  1480,    -1,    -1,  1483,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   846,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   715,    -1,
      -1,   718,    -1,  1699,    -1,  1701,    -1,    -1,    -1,    -1,
      -1,    -1,   881,    -1,    -1,   732,    -1,    -1,    -1,  1715,
    1716,   890,    -1,    -1,   741,    -1,    -1,    -1,   897,    -1,
     747,   748,    -1,   902,    -1,   904,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1741,  1742,    -1,  1744,  1745,
      -1,    -1,    -1,  1749,  1750,  1751,  1752,   774,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1583,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1597,  1598,    -1,  1781,   955,    -1,  1603,  1604,
      -1,    -1,    -1,    -1,    -1,   812,    54,    -1,    -1,    -1,
      -1,  1616,   971,   820,  1619,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1627,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   840,    -1,    -1,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1012,  1013,  1014,    -1,    -1,    -1,    -1,
      -1,  1020,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   902,    -1,    -1,    -1,    -1,
      -1,    -1,  1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,
      -1,    -1,    -1,  1718,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1920,    -1,    -1,    -1,    -1,   187,
      -1,    -1,    -1,  1929,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1120,    -1,    -1,  1123,    -1,    -1,  1126,    -1,    -1,
      -1,    -1,   644,    -1,    -1,  1780,  1781,    -1,    -1,   227,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1982,  1802,    -1,    -1,
    1986,  1987,    -1,    -1,    -1,  1164,   678,   679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1178,
    1179,  1180,  1181,    -1,    -1,   273,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,
      -1,    -1,  1201,    -1,  1203,    -1,    -1,    -1,   296,    -1,
      -1,    -1,    -1,  1858,  1859,    -1,    -1,    -1,  1217,    -1,
      -1,  1220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1240,    -1,    -1,    -1,    -1,    -1,    -1,  1247,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1265,  1266,    -1,    -1,
      -1,    -1,    -1,  1272,  1273,    -1,  1921,  1276,  1277,    -1,
    1127,  1128,    -1,  1130,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1138,    -1,    -1,  1141,    -1,    -1,    -1,    -1,  1146,
      -1,    -1,    -1,    -1,    -1,    -1,  1153,  1154,    -1,    -1,
      54,    -1,    -1,    -1,    -1,   403,    -1,    61,    -1,    -1,
      -1,   409,    -1,    -1,  1171,  1172,    -1,    -1,    -1,  1176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,    -1,    -1,
    1207,    -1,  1209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
     134,   479,    -1,    -1,  1241,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1287,  1288,    -1,   187,    -1,    -1,    -1,   535,   536,   537,
     538,   539,    -1,   541,    -1,    -1,   544,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1480,   226,   227,  1483,    -1,    -1,    -1,   576,    -1,
     578,    -1,  1339,    -1,  1341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   591,    -1,  1352,  1353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   296,    -1,    -1,    -1,  1403,    -1,  1405,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1583,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,  1597,  1598,
      -1,    -1,    -1,    -1,  1603,  1604,    -1,    -1,    -1,    -1,
      -1,  1123,    -1,    -1,  1126,   703,    28,  1616,    -1,    -1,
    1619,   709,    -1,  1135,    -1,    -1,    -1,    -1,  1627,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1164,    -1,    -1,    67,    -1,    -1,    -1,   403,
      72,    73,    74,    -1,    -1,   409,  1178,  1179,  1180,  1181,
      -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,   445,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,  1718,
      -1,    -1,   134,   135,   136,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,    -1,
      -1,    -1,  1589,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1609,  1610,  1611,  1612,    -1,  1614,  1615,    -1,
      -1,    -1,    -1,  1620,  1621,    -1,  1623,    -1,  1625,    -1,
      -1,  1780,  1781,    -1,    -1,    -1,  1633,  1634,  1635,    -1,
      -1,   535,   536,   537,   538,   539,    -1,   541,    -1,    -1,
     544,    -1,   890,  1802,    -1,    -1,    -1,    -1,    -1,   897,
      -1,   555,   556,   557,   902,    -1,    -1,    -1,    -1,    -1,
    1667,    -1,  1669,    -1,  1671,    -1,  1673,    -1,    -1,    -1,
     574,    -1,   576,    -1,   578,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,
      -1,    -1,    -1,   941,    -1,    -1,    -1,    -1,    -1,  1858,
    1859,    -1,   950,    -1,     3,    -1,    -1,   955,    -1,    -1,
      -1,    -1,    -1,   961,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   971,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1921,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,  1020,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,
      -1,    -1,   101,    -1,    -1,   709,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,  1066,  1067,
      -1,    94,   121,    -1,    -1,   124,    -1,    -1,  1076,  1836,
    1078,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1855,    -1,
      -1,    -1,    -1,  1860,    -1,  1862,  1863,    -1,  1865,  1866,
      -1,  1868,    -1,  1870,    -1,    -1,    -1,    -1,    -1,  1876,
    1877,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   156,    -1,    -1,    -1,   160,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1921,    -1,    -1,   190,   191,    -1,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,
      -1,  1603,  1604,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1613,    -1,  1615,  1616,    -1,    -1,  1619,    -1,    -1,
    1198,    -1,  1200,    -1,   227,  1627,    -1,    -1,  1630,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   888,    -1,   890,   156,    -1,    -1,
      -1,   160,    -1,   897,    -1,    -1,    -1,    -1,   902,    -1,
     273,    -1,    -1,   276,   277,   278,    -1,    -1,  2015,  2016,
      -1,  2018,  2019,  2020,    -1,    -1,    -1,  2024,  2025,    -1,
      -1,   190,   191,    -1,   297,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   941,    -1,    -1,
      -1,    -1,    -1,   316,    -1,    -1,   950,    -1,    -1,   322,
      -1,   955,    -1,    -1,    -1,    -1,    -1,   961,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   971,    -1,    -1,
      -1,    -1,    -1,    -1,  2081,  2082,    -1,  2084,  2085,    -1,
      -1,    -1,  2089,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,    -1,    -1,   276,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,  1020,    -1,    -1,    -1,
      -1,  2128,    -1,    -1,    -1,    -1,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,
      -1,    -1,    -1,   322,   427,    -1,    -1,    -1,    -1,    -1,
     433,    -1,  1066,  1067,    -1,    -1,    94,    -1,    -1,    -1,
      -1,   444,  1076,    -1,  1078,    -1,  1848,  1849,  1850,  1851,
      -1,    -1,  1854,    -1,    -1,    -1,  1858,  1859,    -1,  1861,
      -1,  1863,    -1,    -1,    -1,    -1,    -1,    -1,  1446,    -1,
      -1,    -1,    -1,  1875,    -1,  1453,   479,    -1,    -1,    -1,
      -1,    -1,  1460,    -1,    -1,    -1,   144,    -1,    -1,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,   156,    -1,
      -1,    -1,   160,  1481,    -1,  1483,    -1,    -1,  1486,    -1,
      -1,  1489,    -1,    -1,    -1,    -1,   519,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   190,   191,   433,    -1,    -1,   540,    -1,    -1,
      -1,    -1,    -1,    -1,   547,   444,    -1,   550,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1198,    -1,  1200,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1564,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1572,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1583,    -1,    -1,    -1,    -1,
      -1,    -1,  2014,    -1,    -1,   273,    -1,    -1,   276,   277,
     278,  2023,    -1,  2025,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   297,
      -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,   547,    -1,
      -1,   550,    -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,
      -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   676,   677,   678,   679,  2079,  2080,    -1,
      -1,  2083,    -1,  2085,    -1,    -1,  2088,    -1,    -1,    -1,
    2092,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   704,   705,   706,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     723,    -1,    -1,  2125,    -1,    -1,    -1,   730,   731,    -1,
      -1,   734,   735,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2153,    -1,   756,    -1,    -1,    -1,    -1,    -1,    -1,
     763,    -1,    -1,   766,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   433,    -1,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,   444,    -1,    -1,    -1,
      -1,  1769,  1770,    -1,  1772,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   704,   705,   706,    -1,    -1,
      -1,    -1,  1446,    -1,    -1,    -1,    -1,    -1,    -1,  1453,
      -1,    -1,    -1,    -1,   723,    -1,  1460,    -1,    -1,    -1,
      -1,   730,   731,    -1,    -1,   734,   735,    -1,   496,    -1,
      -1,    -1,    -1,   846,    -1,    -1,    -1,  1481,  1826,  1483,
      -1,    -1,  1486,    -1,    -1,  1489,    -1,   756,    -1,    -1,
      -1,    -1,    -1,    -1,   763,    -1,    -1,   766,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,   881,    -1,
      -1,    -1,   540,    -1,    -1,    -1,   889,   890,    -1,   547,
      -1,    -1,   550,    -1,   897,    -1,    28,   900,    -1,    -1,
      -1,   904,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1564,    -1,    -1,    -1,    -1,    67,    -1,    -1,  1572,    -1,
      72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,  1583,
      -1,    -1,   955,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,   971,    -1,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
     889,    -1,   124,   125,   126,   127,    -1,   129,    -1,    -1,
      -1,   900,   134,   135,    -1,   137,   138,   139,   140,  1012,
    1013,  1014,    -1,    -1,    -1,    -1,    -1,  1020,   676,   677,
     678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   704,   705,   706,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   723,    -1,    -1,    -1,    -1,
      -1,    -1,   730,   731,    -1,    -1,   734,   735,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   756,    -1,
      -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,   766,    -1,
      -1,    -1,    -1,  1012,  1013,  1014,    -1,  1120,    -1,    -1,
    1123,  1020,    -1,  1126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1769,  1770,    -1,  1772,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1178,  1179,  1180,  1181,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1826,    -1,    -1,    -1,    -1,    -1,  1201,    -1,
    1203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1220,    -1,    -1,
      -1,  1120,    -1,    -1,  1123,    -1,    -1,  1126,    -1,    -1,
      -1,   889,    -1,    -1,    -1,    -1,    -1,  1240,    -1,    -1,
      -1,    -1,   900,    -1,  1247,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1265,  1266,    -1,  1164,    -1,    -1,    -1,  1272,
    1273,    -1,    -1,  1276,  1277,    -1,    -1,    -1,    -1,  1178,
    1179,  1180,  1181,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1201,    -1,  1203,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1240,    -1,    -1,    -1,    -1,    -1,    -1,  1247,    -1,
      -1,    -1,    67,    -1,  1012,  1013,  1014,    72,    73,    74,
      -1,    -1,  1020,    -1,    -1,    -1,  1265,  1266,    -1,    -1,
      85,    86,    -1,  1272,  1273,    -1,    -1,  1276,  1277,    -1,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,    -1,    -1,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,  1120,    -1,    -1,  1123,    -1,    -1,  1126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1480,    -1,    -1,
    1483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,    72,    73,    74,    -1,    -1,  1164,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,    86,    -1,    -1,    -1,    -1,
    1178,  1179,  1180,  1181,    -1,    -1,    -1,    -1,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,  1201,    -1,  1203,    -1,    -1,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,    -1,
      -1,   132,  1220,   134,   135,    -1,   137,   138,   139,   140,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
    1583,  1480,  1240,    -1,    -1,    -1,    -1,    -1,    -1,  1247,
      -1,    -1,    -1,    -1,  1597,  1598,    -1,    -1,    -1,    -1,
    1603,  1604,    -1,    -1,    -1,    -1,    -1,  1265,  1266,    -1,
      -1,    -1,    -1,  1616,  1272,  1273,  1619,    -1,  1276,  1277,
      -1,     1,    -1,    -1,  1627,    -1,    -1,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,  1597,  1598,
      80,    -1,    -1,    -1,  1603,  1604,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1616,    -1,    -1,
    1619,   101,    -1,    -1,    -1,    -1,    -1,    -1,  1627,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,   122,   123,   124,    -1,    -1,   127,   128,   129,
     130,    -1,   132,    -1,    -1,   135,    -1,   137,   138,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1780,  1781,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,  1802,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,  1480,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1858,  1859,    -1,    -1,    67,
      68,    -1,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,    87,
      88,  1780,  1781,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,  1597,
    1598,    -1,    -1,    -1,    -1,  1603,  1604,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1616,  1858,
    1859,  1619,    -1,    -1,    -1,    -1,    -1,     0,     1,  1627,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1780,  1781,    -1,    -1,    -1,    -1,    -1,    -1,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
    1858,  1859,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
     129,    -1,    -1,   132,    -1,   134,   135,    -1,   137,   138,
     139,   140,   141,   142,   143,   144,   145,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,   125,   126,   127,    -1,   129,   130,   131,   132,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,   125,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,
      74,    75,    76,    -1,    -1,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    -1,    97,    -1,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,    -1,   137,   138,   139,   140,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    -1,    -1,
      72,    73,    74,    75,    76,    -1,    -1,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    -1,    97,    -1,    99,   100,   101,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,    -1,   137,   138,   139,   140,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    -1,    97,    -1,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    74,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,    -1,   137,   138,
     139,   140,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    73,    74,    75,    76,    -1,
      -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    -1,    97,
      -1,    99,   100,   101,    -1,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,    -1,   137,
     138,   139,   140,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,    -1,
     137,   138,   139,   140,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    74,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
     125,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,    -1,    -1,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    89,    90,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,    -1,    -1,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,   131,    -1,    -1,   134,
     135,    -1,   137,   138,   139,   140,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
       1,   126,     3,     4,     5,     6,    -1,     8,     9,   134,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    72,    73,    74,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,     1,   126,     3,     4,     5,     6,
      -1,     8,     9,   134,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,
     137,   138,   139,   140,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    72,    73,    74,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,    -1,   119,   120,   121,    -1,    -1,   124,     1,   126,
       3,     4,     5,     6,   131,     8,     9,   134,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    72,
      73,    74,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    99,    -1,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    28,    -1,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    89,    90,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,   129,    -1,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    89,    90,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    89,    90,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    89,    90,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,   129,    -1,    -1,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,   127,    -1,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,   131,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,    -1,    -1,   131,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,   127,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,   129,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,
     136,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,   129,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,   127,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,   127,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,   129,
      -1,    -1,    -1,   133,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,    -1,    -1,   129,    -1,    -1,    -1,   133,   134,   135,
      -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,   127,    -1,    -1,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,    -1,   130,   131,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,    -1,   129,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,   129,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
     136,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,   131,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,
      -1,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
     136,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,   135,   136,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,
      -1,    -1,    -1,   131,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,
      -1,   131,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,    -1,    -1,    -1,    -1,   131,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,
      -1,    -1,    -1,   131,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    28,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    67,    -1,    -1,
      -1,    -1,    72,    73,    74,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,
      -1,    -1,    28,   103,   104,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,   135,    -1,   137,   138,   139,
     140,    67,    -1,    -1,    -1,    -1,    72,    73,    74,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,    -1,    28,   103,   104,   105,
     106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,   120,   121,    -1,    -1,   124,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
      -1,   137,   138,   139,   140,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
      28,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,   121,
      -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,    -1,   137,   138,   139,   140,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,    28,   103,   104,   105,   106,   107,
     108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119,   120,   121,    -1,    -1,   124,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,   135,    -1,   137,
     138,   139,   140,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,    -1,    -1,     0,
       1,    -1,     3,     4,     5,   119,   120,   121,    -1,    -1,
     124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,    -1,   137,   138,   139,   140,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,   125,   126,   127,    -1,   129,   130,
      -1,    -1,    -1,   134,   135,     0,     1,    -1,     3,     4,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,   129,   130,    -1,    -1,    -1,   134,
     135,     0,     1,    -1,     3,     4,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,     0,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,     0,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,     0,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,    -1,     1,   130,     3,     4,
       5,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,
      75,    76,    -1,    -1,    79,    80,    81,    82,    83,    84,
      -1,    86,    87,    88,    89,    -1,    -1,    92,    93,    94,
      95,    -1,    97,    -1,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,   121,    -1,    -1,   124,
      -1,   126,   127,    -1,     1,   130,     3,     4,     5,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    73,    -1,    75,    76,
      -1,    -1,    79,    80,    81,    82,    83,    84,    -1,    86,
      87,    88,    89,    -1,    -1,    92,    93,    94,    95,    -1,
      97,    -1,    99,   100,   101,    -1,   103,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,   121,    -1,    -1,   124,    -1,   126,
     127,    -1,     1,   130,     3,     4,     5,   134,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    73,    -1,    75,    76,    -1,    -1,
      79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
      89,    -1,    -1,    92,    93,    94,    95,    -1,    97,    -1,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,
       1,   130,     3,     4,     5,   134,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    73,    -1,    75,    76,    -1,    -1,    79,    80,
      81,    82,    83,    84,    -1,    86,    87,    88,    89,    -1,
      -1,    92,    93,    94,    95,    -1,    97,    -1,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
     121,    -1,    -1,   124,    -1,   126,   127,    -1,     1,   130,
       3,     4,     5,   134,   135,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      73,    -1,    75,    76,    -1,    -1,    79,    80,    81,    82,
      83,    84,    -1,    86,    87,    88,    89,    -1,    -1,    92,
      93,    94,    95,    -1,    97,    -1,    99,   100,   101,    -1,
     103,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,   121,    -1,
      -1,   124,    -1,   126,   127,     1,    -1,     3,     4,     5,
      -1,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    73,    -1,    75,
      76,    -1,    -1,    79,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    89,    -1,    -1,    92,    93,    94,    95,
      -1,    97,    -1,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,     1,   121,     3,    -1,   124,    -1,
     126,   127,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,     1,   121,     3,    -1,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,     3,    -1,   121,    -1,    -1,   124,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,     3,    -1,   121,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   135,    -1,   137,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,     3,    -1,   121,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,     3,
      -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,   131,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,     3,    -1,   121,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
      -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,     3,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,     3,    -1,   121,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,     3,    -1,   121,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,     3,
      -1,   121,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    78,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,   106,    -1,    -1,     3,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    79,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,   124,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,   133,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   131,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,     1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   127,    -1,   129,   130,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
       1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,     0,     1,    -1,     3,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      78,    -1,    80,    81,    82,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,   102,     3,    -1,    -1,   106,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,   127,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,     3,    -1,
     108,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,     3,    -1,   108,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,     1,    -1,     3,    -1,   108,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,    -1,   124,    -1,    -1,   127,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,   127,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,
     127,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      -1,   127,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,   102,    -1,     0,     1,
     106,     3,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,   124,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
     125,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,   101,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,   101,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,   125,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
     101,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,   125,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   101,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,   124,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,   124,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,    -1,   124,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,   124,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,   124,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,
      88,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,    84,
      -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,    83,
      84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,
      -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   101,
      -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,   111,
     112,   113,   114,   115,   116,   117,   118,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    80,
      -1,    -1,    83,    84,    -1,    86,    87,    88,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     111,   112,   113,   114,   115,   116,   117,   118,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    81,    82,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
      -1,    80,    -1,    -1,    83,    84,    -1,    86,    87,    88,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,
      -1,    -1,    -1,    80,    -1,    -1,    83,    84,    -1,    86,
      87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
      88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,   124,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   131,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      86,    87,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
     113,   114,   115,   116,   117,   118
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    55,    67,    68,
      75,    76,    77,    78,    80,    81,    82,    83,    84,    86,
      87,    88,   101,   102,   106,   111,   112,   113,   114,   115,
     116,   117,   118,   121,   124,   127,   147,   148,   149,   151,
     176,   213,   214,   215,   216,   217,   218,   270,   273,   274,
     277,   278,   279,   280,   281,   282,   283,   285,   289,   292,
     293,   294,   295,   296,   297,   302,   303,   312,   313,   314,
     321,   322,   326,   329,   334,   363,   366,   367,   385,   386,
     388,   389,   390,   391,   392,   393,    78,   133,     5,    31,
     218,   387,   218,   124,   124,   124,   151,   218,   387,   283,
     284,   321,   329,    37,   149,   218,   311,   312,   314,   316,
     317,   318,   320,   321,   329,   332,   333,   338,   122,   127,
     148,   149,   218,   131,   133,   127,   131,   130,   121,   122,
     213,   218,   131,   151,   218,   131,   133,   130,   122,   131,
     133,   131,   130,   131,   149,   218,   321,     1,    31,    37,
      38,    39,    40,   127,   147,   149,   215,   217,   218,   270,
     280,   281,   283,   285,   314,   318,   321,   329,   332,   333,
     334,   336,   344,   345,   346,   347,    37,    38,    39,    40,
     149,   321,   346,   124,   135,     1,    29,    30,    31,    32,
      33,    67,   117,   118,   125,   147,   218,   269,   273,   275,
     276,   283,   285,   289,   290,   291,   297,   301,   309,   310,
     350,   351,   352,   353,   354,   355,   329,   124,   314,   321,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    48,    49,    68,    86,    88,   101,   113,   114,
     115,   116,   131,   151,   172,   173,   269,   274,   275,   283,
     286,   290,   292,   300,   365,   368,   369,   370,   375,   376,
     377,    31,    77,   133,   215,   217,   302,   366,   367,   385,
     386,   393,     1,   215,   279,   296,   302,   334,   363,   389,
       1,   388,   389,     0,   218,   387,   387,     5,   128,   387,
       1,     4,     6,     8,     9,    67,    72,    73,    74,    85,
      86,    99,   103,   104,   105,   106,   107,   108,   109,   110,
     119,   120,   121,   124,   126,   134,   135,   137,   138,   139,
     140,   151,   177,   178,   218,   219,   220,   221,   222,   225,
     226,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   387,   399,   400,   401,   402,   148,   218,
     131,   151,   218,   283,   329,   135,   124,   135,   125,   309,
     310,   354,   355,   329,   332,   333,   311,   316,   320,   321,
     125,   321,   125,   321,   321,    86,   151,   203,   205,   207,
     211,   212,   218,   230,   235,   251,   255,   301,   127,   122,
     122,   127,     1,    69,    79,    81,    82,    89,    92,    93,
      94,    95,    97,    99,   100,   124,   126,   127,   130,   152,
     153,   154,   155,   156,   157,   158,   159,   174,   175,   177,
     178,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   194,   198,   199,   200,   201,   218,   226,   249,   301,
     313,   315,   321,   329,   334,   335,   364,    81,    82,   218,
     269,   273,   283,   286,   289,   297,   304,   305,     1,   130,
     200,   201,   149,   218,     1,   218,   271,   272,     1,   130,
     272,   305,    67,   204,   206,   208,   209,   210,   218,   301,
       1,   130,   200,   201,   305,     1,   130,   200,   201,     1,
     130,   200,   201,   149,   218,   129,   129,   129,   129,   129,
     131,   329,   314,   318,   321,     1,   128,   369,   376,   377,
     369,   376,   377,     1,   127,   129,   129,   329,   127,   136,
     148,   218,   244,   263,   267,   268,   129,   131,   151,   218,
     130,   131,   130,   131,   321,    37,   124,   135,   137,   147,
     149,   218,   269,   275,   283,   285,   290,   311,   312,   321,
     327,   329,   330,   333,     1,   125,   129,     1,   125,   129,
       1,   129,     1,   129,   125,   125,   314,   124,   314,   124,
     124,     1,   127,     1,   130,     1,    37,    38,    39,    40,
     127,   218,   269,   275,   283,   286,   290,   321,   346,   347,
       1,   127,     1,   365,   368,   376,   377,   365,   368,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      86,    87,    89,    90,    91,   127,   133,   151,   195,   196,
     197,   218,   226,   230,   245,   247,   251,   263,   264,   265,
     326,   356,   357,   360,   361,   362,   369,   370,   371,   372,
     373,   374,   376,   377,   379,   380,   381,   382,   383,   384,
     130,    31,   218,   387,   218,   213,   214,   216,   217,   311,
     312,   318,   321,   329,   334,   336,   369,   377,   215,   302,
     128,   243,   244,   262,   125,   124,   230,   251,   124,   230,
     251,   230,   251,   124,   218,   269,   275,   283,   286,   290,
     308,   267,   124,   124,   308,   267,   124,   124,   124,   124,
     124,   124,   230,   251,   124,   125,   245,   247,   265,   275,
     283,   285,   290,   298,   348,   387,   131,   136,   179,   180,
     223,   227,   245,   131,     1,   130,   131,   218,     1,     7,
       8,     9,   124,   132,   135,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,   128,   246,   180,   223,   224,
     232,   252,   121,   141,   142,   138,   139,    10,    11,   235,
     255,    12,    13,   122,   123,    14,    15,   137,   143,   144,
      16,    17,   145,   246,   125,     7,     8,     9,   124,   132,
     135,   246,   121,   141,   142,   138,   139,    10,    11,    12,
      13,   122,   123,    14,    15,   137,   143,   144,    16,    17,
     145,   246,   125,   125,   108,   218,   301,   394,   397,   398,
     131,   131,   136,   148,   267,   268,   136,   148,   267,   268,
     125,   125,   125,   125,   311,   316,   320,   125,   125,   311,
      11,   123,   129,   128,   124,   321,   329,   330,    67,   210,
     218,   301,   210,     1,   218,   269,   283,   286,   297,   306,
     301,   334,   335,   124,   151,   218,   218,   301,     1,   124,
     306,   121,   124,   218,   301,   127,   326,   376,   377,   376,
     377,   376,   127,   376,   377,   127,     1,   130,     1,     1,
     127,   129,   129,    70,    71,    92,    96,    98,   130,    70,
      71,   130,   127,     1,   198,   199,     1,   198,   199,     1,
     128,   124,   133,   218,   287,   288,   311,   317,   319,   321,
     329,   336,   337,   338,     1,   301,   309,   352,   329,   315,
     321,   124,   133,   158,   159,   174,   175,   177,   178,   187,
     218,   301,   122,   151,   218,   218,   269,   283,   286,   122,
     122,   128,   129,     1,   127,   131,    28,   150,   218,   123,
     129,   128,   218,   330,   332,   344,   344,   344,   344,   344,
     127,   129,   130,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   223,   224,   226,   244,   263,
     300,   341,   342,   311,   314,   316,   318,   320,   311,   318,
     131,   245,   264,   339,   340,   376,   377,   376,   377,   344,
     345,   344,   345,   136,   136,   136,    53,   350,   351,     1,
     272,   131,   131,     1,   130,   200,   201,     1,   130,   200,
     201,   131,   125,   218,   309,   310,   321,   329,   330,   354,
     355,   136,   148,   267,   268,   321,   329,   333,   329,   124,
     135,   327,     1,     1,   129,     1,    53,   218,   350,   351,
     129,     1,    53,   218,   350,   351,   129,     1,    53,   218,
     350,   351,   129,    53,   218,   350,   351,     3,    28,    46,
      75,    76,   125,   323,   324,   325,   245,   148,   218,   130,
     131,   127,   127,   133,   267,   268,   133,   124,   124,     1,
     124,    54,    55,    56,    58,    59,    60,    61,    64,    87,
     218,   265,   326,   356,   379,   383,   124,   218,   127,   127,
     127,   223,   224,   247,   265,   124,   283,   124,   124,   191,
     218,   127,   127,   127,   133,   132,   246,     1,   132,   127,
     129,   247,   265,   246,   125,   129,   247,     1,   371,   372,
     371,   372,   356,   357,   365,   368,   356,   357,   365,   368,
       1,     1,   387,   387,   149,   218,   131,   131,   329,   318,
     321,   369,   377,   369,   377,   377,   244,   145,   127,   145,
      67,   147,   218,   275,   283,   285,   290,   299,   349,   218,
     300,   122,   124,   135,   218,   269,   275,   283,   286,   290,
     321,   328,   329,   331,   218,   269,   275,   283,   286,   290,
     307,   247,   348,   376,   218,   135,   331,   307,   245,   387,
     387,   387,   245,   349,   349,   125,   218,   275,   283,   285,
     290,   330,   125,   132,     1,   170,   171,     1,   130,   129,
     136,     1,   170,   171,   130,     1,   170,   171,     1,   218,
     125,   224,   227,   228,   264,     1,   218,   247,   265,   223,
     245,     1,   232,   252,   232,   252,   232,   252,   233,   253,
     233,   253,   234,   254,   234,   254,   235,   255,   235,   255,
     235,   255,   223,   224,   237,   256,   223,   224,   237,   256,
     223,   224,   238,   257,   223,   224,   239,   258,   223,   224,
     240,   259,   241,   260,   242,   261,   133,   223,   224,   247,
     248,   265,   266,   223,   245,     1,   218,   125,   227,   228,
       1,   218,   247,   265,   223,   245,   232,   252,   232,   252,
     232,   252,   233,   253,   233,   253,   234,   254,   234,   254,
     235,   255,   235,   255,   235,   255,   235,   255,   223,   224,
     237,   256,   223,   224,   237,   256,   223,   224,   238,   257,
     223,   224,   239,   258,   223,   224,   240,   259,   241,   260,
     242,   261,   133,   247,   248,   265,   266,   223,   245,   122,
     123,   218,   395,   396,   218,   130,   394,   397,   398,   398,
     136,   136,   136,   136,   136,   136,   211,   203,   205,   207,
     218,   321,   329,   123,   128,   330,   123,   131,   122,   131,
     218,   269,   283,   286,   330,   321,   329,   336,   337,   191,
     288,   311,   321,   329,   131,   218,   131,   218,   330,   218,
     321,   124,   127,   130,   181,   182,   181,   182,   376,   376,
     376,   220,   376,   376,     1,   341,   342,   125,   267,   268,
     131,   129,     1,   301,   309,   352,   329,   311,   319,   321,
     133,   326,   218,   124,   315,   315,   218,     1,     1,   288,
     212,   122,   210,   210,   267,   268,   271,   200,   201,     1,
     130,   272,   128,   133,   128,   133,   209,   205,   218,   128,
     218,   128,   376,   377,     1,   127,   129,   127,   129,   127,
     162,   163,   166,   167,   168,   130,   160,   163,   127,   130,
     162,   163,   166,   167,   168,   128,    37,   336,   337,   338,
     339,   340,   343,     1,   130,   272,     1,   130,   272,     1,
     130,   200,   201,   321,   329,   330,   125,   125,   125,   136,
     136,   136,   329,   327,   125,   354,   355,   136,   148,   267,
     268,   350,   351,   301,   350,   350,   350,   351,   125,   124,
     125,   129,   324,   125,   125,   125,     1,   170,   171,   356,
     357,   365,   368,   133,   133,   356,   357,   365,   368,   247,
     265,   247,   265,   125,   247,   265,   133,   267,   268,   133,
     124,   124,   356,   124,   224,   265,   124,   133,    58,     1,
     125,   127,   218,   247,   265,   378,   127,   127,   127,   127,
     127,   387,   124,   245,   245,   218,   356,   357,   365,   368,
      91,   224,   264,    89,    90,    91,   245,   264,   224,   264,
     245,   264,   122,   318,   377,   377,   127,   247,   248,   265,
     266,   247,   248,   265,   266,   147,   148,   147,   275,   283,
     285,   290,   330,   125,   125,   125,   330,   212,   125,   321,
     331,   354,   355,   267,   268,   122,   329,   124,   328,   135,
     122,   135,   218,   269,   275,   283,   286,   290,   331,   125,
     125,   125,   125,   267,   268,   135,   135,   331,   129,   125,
     129,   129,   129,   125,   129,   232,   252,   387,     1,   130,
     223,   245,     1,     1,   125,   129,   125,   136,   136,     1,
     129,   133,   133,   129,   133,   133,   125,   136,   136,   133,
     133,   133,   133,   218,   218,   127,   129,   218,   387,   130,
     130,   321,   329,   205,   212,   122,   131,   131,   218,   329,
     321,   125,   329,   311,   125,   131,   131,   218,   125,     1,
     170,   171,   287,   321,   218,   124,   311,   319,   319,   267,
     268,   124,   125,   123,   212,   123,   123,   127,     1,   127,
     203,   202,   301,   203,   202,   207,   128,   131,     1,   164,
     165,     1,   164,   165,   377,     1,   341,   342,   129,   130,
     339,   340,     1,   127,     1,   127,   329,   327,   125,   125,
     125,   136,   136,   136,   330,   333,   247,   125,   324,     1,
     356,   357,   365,   368,   356,   357,   365,   368,   125,   125,
     125,   125,     1,   356,   125,   247,   356,   357,   133,   133,
     265,   125,   247,   265,    58,   265,   378,   387,   124,   356,
     133,   127,     1,   127,     1,   125,   265,   378,     3,   125,
     133,   387,   125,   125,   129,   124,   124,   191,   133,   133,
     133,   133,   133,   133,   133,   133,   125,   125,     1,   125,
     123,   321,   329,   331,   125,   125,   125,   136,   136,   212,
     328,   125,   354,   355,   267,   268,   212,   267,   268,   122,
     135,   124,   339,   136,   136,   267,   268,   267,   268,   135,
     348,   218,   218,   245,     1,   218,   224,   264,   223,   224,
     223,   224,   244,   262,   223,   224,   244,   262,   223,   224,
     223,   224,   244,   262,   223,   224,   244,   262,   223,   224,
     244,   262,   223,   224,   244,   262,   223,   224,   244,   262,
     223,   224,   244,   262,   395,   127,   127,   123,   212,   131,
     376,   311,   128,   131,     1,   124,   133,   133,   123,   200,
     201,   127,   200,   201,   128,   330,   128,   207,   343,   130,
     339,   340,     1,   200,   201,   200,   201,   125,   356,   356,
     356,   356,   356,   357,   125,   124,   378,   125,   247,   265,
     247,   356,     1,   125,   247,   265,   135,   358,   359,   387,
     127,   359,     3,   125,   133,   131,   191,   245,   245,     1,
       1,   328,   125,   123,   125,   125,   136,   136,   123,   136,
     136,   212,   267,   268,   348,   136,   136,   136,   136,   267,
     268,   125,   125,   125,   125,   125,   123,   341,   267,   268,
     267,   268,   200,   201,   203,   203,   129,   130,     1,    66,
      66,   247,   265,   125,   247,   265,   125,   127,   125,   127,
     356,   357,   125,   356,   357,   218,   125,   129,   133,   124,
       3,   125,   133,   359,   127,   359,    74,   191,   192,   193,
     125,   125,   125,   129,   123,   136,   136,   125,   136,   136,
     127,   130,   356,   356,   125,   125,   127,   356,   247,   356,
     357,   136,   127,   358,   359,   245,   359,   127,   359,   125,
     133,     3,   125,   133,   376,   376,   130,   192,   131,   191,
     232,   252,   339,   125,   387,   125,   125,   125,   125,   133,
     127,   359,   359,   127,   359,   193,   125,   356,   124,   127,
     127,   127,   359,   125,   125,   125,   133,   130,   245,   125,
     127,   127,   127,   359,   125,   127,   125,   127
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 147: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11539 "grammar.ec"
	break;
      case 148: /* "type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11548 "grammar.ec"
	break;
      case 149: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11557 "grammar.ec"
	break;
      case 150: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 11566 "grammar.ec"
	break;
      case 151: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11575 "grammar.ec"
	break;
      case 152: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11584 "grammar.ec"
	break;
      case 153: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11593 "grammar.ec"
	break;
      case 154: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11602 "grammar.ec"
	break;
      case 155: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11611 "grammar.ec"
	break;
      case 156: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11620 "grammar.ec"
	break;
      case 157: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11629 "grammar.ec"
	break;
      case 158: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11638 "grammar.ec"
	break;
      case 159: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11647 "grammar.ec"
	break;
      case 160: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11656 "grammar.ec"
	break;
      case 161: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11665 "grammar.ec"
	break;
      case 162: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11674 "grammar.ec"
	break;
      case 163: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11683 "grammar.ec"
	break;
      case 164: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11692 "grammar.ec"
	break;
      case 165: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11701 "grammar.ec"
	break;
      case 166: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11710 "grammar.ec"
	break;
      case 167: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11719 "grammar.ec"
	break;
      case 168: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11728 "grammar.ec"
	break;
      case 169: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11737 "grammar.ec"
	break;
      case 170: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11746 "grammar.ec"
	break;
      case 171: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11755 "grammar.ec"
	break;
      case 172: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11764 "grammar.ec"
	break;
      case 173: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11773 "grammar.ec"
	break;
      case 177: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11782 "grammar.ec"
	break;
      case 178: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11791 "grammar.ec"
	break;
      case 181: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11800 "grammar.ec"
	break;
      case 182: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11809 "grammar.ec"
	break;
      case 183: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11818 "grammar.ec"
	break;
      case 184: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11827 "grammar.ec"
	break;
      case 187: /* "property" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11836 "grammar.ec"
	break;
      case 198: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11845 "grammar.ec"
	break;
      case 199: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11854 "grammar.ec"
	break;
      case 200: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11863 "grammar.ec"
	break;
      case 201: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11872 "grammar.ec"
	break;
      case 202: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11881 "grammar.ec"
	break;
      case 203: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11890 "grammar.ec"
	break;
      case 204: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11899 "grammar.ec"
	break;
      case 205: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11908 "grammar.ec"
	break;
      case 206: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11917 "grammar.ec"
	break;
      case 207: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11926 "grammar.ec"
	break;
      case 208: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11935 "grammar.ec"
	break;
      case 209: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11944 "grammar.ec"
	break;
      case 210: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11953 "grammar.ec"
	break;
      case 211: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11962 "grammar.ec"
	break;
      case 212: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 272 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11971 "grammar.ec"
	break;
      case 213: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11980 "grammar.ec"
	break;
      case 214: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11989 "grammar.ec"
	break;
      case 215: /* "class" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11998 "grammar.ec"
	break;
      case 216: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 12007 "grammar.ec"
	break;
      case 217: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 12016 "grammar.ec"
	break;
      case 218: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 12025 "grammar.ec"
	break;
      case 219: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12034 "grammar.ec"
	break;
      case 220: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12043 "grammar.ec"
	break;
      case 225: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12052 "grammar.ec"
	break;
      case 226: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12061 "grammar.ec"
	break;
      case 227: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12070 "grammar.ec"
	break;
      case 228: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12079 "grammar.ec"
	break;
      case 230: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12088 "grammar.ec"
	break;
      case 232: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12097 "grammar.ec"
	break;
      case 233: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12106 "grammar.ec"
	break;
      case 234: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12115 "grammar.ec"
	break;
      case 235: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12124 "grammar.ec"
	break;
      case 237: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12133 "grammar.ec"
	break;
      case 238: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12142 "grammar.ec"
	break;
      case 239: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12151 "grammar.ec"
	break;
      case 240: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12160 "grammar.ec"
	break;
      case 241: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12169 "grammar.ec"
	break;
      case 242: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12178 "grammar.ec"
	break;
      case 243: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12187 "grammar.ec"
	break;
      case 244: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12196 "grammar.ec"
	break;
      case 245: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12205 "grammar.ec"
	break;
      case 247: /* "expression" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12214 "grammar.ec"
	break;
      case 249: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12223 "grammar.ec"
	break;
      case 251: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12232 "grammar.ec"
	break;
      case 252: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12241 "grammar.ec"
	break;
      case 253: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12250 "grammar.ec"
	break;
      case 254: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12259 "grammar.ec"
	break;
      case 255: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12268 "grammar.ec"
	break;
      case 256: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12277 "grammar.ec"
	break;
      case 257: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12286 "grammar.ec"
	break;
      case 258: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12295 "grammar.ec"
	break;
      case 259: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12304 "grammar.ec"
	break;
      case 260: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12313 "grammar.ec"
	break;
      case 261: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12322 "grammar.ec"
	break;
      case 262: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12331 "grammar.ec"
	break;
      case 263: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12340 "grammar.ec"
	break;
      case 264: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12349 "grammar.ec"
	break;
      case 265: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12358 "grammar.ec"
	break;
      case 267: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12367 "grammar.ec"
	break;
      case 268: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12376 "grammar.ec"
	break;
      case 269: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12385 "grammar.ec"
	break;
      case 270: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12394 "grammar.ec"
	break;
      case 271: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 12403 "grammar.ec"
	break;
      case 272: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 12412 "grammar.ec"
	break;
      case 274: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12421 "grammar.ec"
	break;
      case 275: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12430 "grammar.ec"
	break;
      case 276: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12439 "grammar.ec"
	break;
      case 278: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12448 "grammar.ec"
	break;
      case 279: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12457 "grammar.ec"
	break;
      case 280: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12466 "grammar.ec"
	break;
      case 281: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12475 "grammar.ec"
	break;
      case 282: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12484 "grammar.ec"
	break;
      case 283: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12493 "grammar.ec"
	break;
      case 284: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12502 "grammar.ec"
	break;
      case 285: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12511 "grammar.ec"
	break;
      case 286: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12520 "grammar.ec"
	break;
      case 287: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12529 "grammar.ec"
	break;
      case 288: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 12538 "grammar.ec"
	break;
      case 289: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12547 "grammar.ec"
	break;
      case 290: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12556 "grammar.ec"
	break;
      case 291: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12565 "grammar.ec"
	break;
      case 292: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12574 "grammar.ec"
	break;
      case 293: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12583 "grammar.ec"
	break;
      case 294: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12592 "grammar.ec"
	break;
      case 295: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12601 "grammar.ec"
	break;
      case 296: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12610 "grammar.ec"
	break;
      case 298: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12619 "grammar.ec"
	break;
      case 299: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12628 "grammar.ec"
	break;
      case 300: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12637 "grammar.ec"
	break;
      case 301: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12646 "grammar.ec"
	break;
      case 302: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12655 "grammar.ec"
	break;
      case 303: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12664 "grammar.ec"
	break;
      case 304: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12673 "grammar.ec"
	break;
      case 305: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12682 "grammar.ec"
	break;
      case 309: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12691 "grammar.ec"
	break;
      case 310: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12700 "grammar.ec"
	break;
      case 311: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12709 "grammar.ec"
	break;
      case 312: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12718 "grammar.ec"
	break;
      case 313: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12727 "grammar.ec"
	break;
      case 314: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12736 "grammar.ec"
	break;
      case 315: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12745 "grammar.ec"
	break;
      case 316: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12754 "grammar.ec"
	break;
      case 317: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12763 "grammar.ec"
	break;
      case 318: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12772 "grammar.ec"
	break;
      case 319: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12781 "grammar.ec"
	break;
      case 320: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12790 "grammar.ec"
	break;
      case 321: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 275 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12799 "grammar.ec"
	break;
      case 323: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12808 "grammar.ec"
	break;
      case 324: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 276 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12817 "grammar.ec"
	break;
      case 325: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 277 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12826 "grammar.ec"
	break;
      case 326: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 274 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12835 "grammar.ec"
	break;
      case 327: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12844 "grammar.ec"
	break;
      case 328: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12853 "grammar.ec"
	break;
      case 329: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 203 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12862 "grammar.ec"
	break;
      case 330: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12871 "grammar.ec"
	break;
      case 331: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12880 "grammar.ec"
	break;
      case 332: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12889 "grammar.ec"
	break;
      case 333: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12898 "grammar.ec"
	break;
      case 334: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12907 "grammar.ec"
	break;
      case 335: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12916 "grammar.ec"
	break;
      case 336: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12925 "grammar.ec"
	break;
      case 337: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12934 "grammar.ec"
	break;
      case 338: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12943 "grammar.ec"
	break;
      case 339: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12952 "grammar.ec"
	break;
      case 340: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12961 "grammar.ec"
	break;
      case 341: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12970 "grammar.ec"
	break;
      case 342: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12979 "grammar.ec"
	break;
      case 343: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12988 "grammar.ec"
	break;
      case 344: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12997 "grammar.ec"
	break;
      case 345: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 13006 "grammar.ec"
	break;
      case 346: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 13015 "grammar.ec"
	break;
      case 347: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 13024 "grammar.ec"
	break;
      case 348: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13033 "grammar.ec"
	break;
      case 349: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13042 "grammar.ec"
	break;
      case 350: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13051 "grammar.ec"
	break;
      case 351: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13060 "grammar.ec"
	break;
      case 352: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13069 "grammar.ec"
	break;
      case 353: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13078 "grammar.ec"
	break;
      case 354: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13087 "grammar.ec"
	break;
      case 355: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13096 "grammar.ec"
	break;
      case 356: /* "statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13105 "grammar.ec"
	break;
      case 357: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13114 "grammar.ec"
	break;
      case 361: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13123 "grammar.ec"
	break;
      case 362: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13132 "grammar.ec"
	break;
      case 363: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 273 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 13141 "grammar.ec"
	break;
      case 365: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 13150 "grammar.ec"
	break;
      case 369: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 13159 "grammar.ec"
	break;
      case 370: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 13168 "grammar.ec"
	break;
      case 371: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 13177 "grammar.ec"
	break;
      case 372: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 13186 "grammar.ec"
	break;
      case 373: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13195 "grammar.ec"
	break;
      case 374: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13204 "grammar.ec"
	break;
      case 375: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 13213 "grammar.ec"
	break;
      case 376: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13222 "grammar.ec"
	break;
      case 377: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13231 "grammar.ec"
	break;
      case 378: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13240 "grammar.ec"
	break;
      case 379: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13249 "grammar.ec"
	break;
      case 380: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13258 "grammar.ec"
	break;
      case 381: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13267 "grammar.ec"
	break;
      case 382: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13276 "grammar.ec"
	break;
      case 383: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13285 "grammar.ec"
	break;
      case 384: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13294 "grammar.ec"
	break;
      case 385: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13303 "grammar.ec"
	break;
      case 386: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13312 "grammar.ec"
	break;
      case 387: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 13321 "grammar.ec"
	break;
      case 388: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13330 "grammar.ec"
	break;
      case 389: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13339 "grammar.ec"
	break;
      case 390: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13348 "grammar.ec"
	break;
      case 391: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13357 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 285 "grammar.y"
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 304 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 342 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 344 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 423 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 427 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 431 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 433 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 472 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 474 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 479 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 484 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 489 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 491 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 496 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 498 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 503 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 505 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 510 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 512 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 514 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 516 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 518 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 522 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 526 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 539 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 541 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 543 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 545 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 547 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 553 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 555 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 560 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 565 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 570 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 572 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 574 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 578 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 579 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 583 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 585 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 595 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 599 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 601 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 603 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 607 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 609 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 611 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 614 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 626 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 637 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 656 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 658 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 662 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 663 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 664 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 665 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 666 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 667 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 670 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   ;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 682 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 687 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 688 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 689 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 693 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 694 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 695 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 696 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 697 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 698 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 699 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 704 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 706 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 711 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 713 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 715 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 749 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 751 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 756 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 758 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 760 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 762 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 764 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 793 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 795 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 797 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 802 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 804 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 809 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 811 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 815 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 817 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 819 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 821 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 826 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 829 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 832 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 835 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 900 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 902 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 907 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 909 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 911 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 913 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 915 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 945 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 949 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 950 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 951 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 955 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 956 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 957 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 961 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 962 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 963 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 969 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 972 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 975 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 978 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 981 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 987 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 989 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 991 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 993 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 995 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 999 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1004 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1007 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1010 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1013 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 1016 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1022 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1024 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1028 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1033 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1035 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1040 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1042 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1047 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1049 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1054 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1059 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1061 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1066 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1068 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1072 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1077 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1079 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1081 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1083 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1087 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1088 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1090 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1093 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1099 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1100 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1102 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1106 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1110 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1112 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1148 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1166 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1186 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1187 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1199 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1200 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1210 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1211 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1218 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1219 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1260 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1261 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1266 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1273 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1275 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1282 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id)._class, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1283 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).nsSpec, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1285 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1287 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).nsSpec, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1295 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1296 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1301 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1308 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1315 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1321 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1328 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id)._class, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1334 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).nsSpec, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1343 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1350 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1356 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1362 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1368 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1374 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1380 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1391 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1397 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1401 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1402 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1403 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1407 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1411 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1412 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1413 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1414 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1418 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1430 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1432 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1433 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 295:

/* Line 1464 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1461 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1466 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1470 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1474 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1475 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1532 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpOffsetOf((yyvsp[(3) - (6)].typeName), (yyvsp[(5) - (6)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1568 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1580 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1585 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1586 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 362:

/* Line 1464 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1603 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1604 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1605 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1606 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1619 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1620 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1621 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1622 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1631 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1632 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1633 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1644 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1653 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1654 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1662 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1663 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1665 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1671 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1672 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1677 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1683 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 428:

/* Line 1464 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1707 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1709 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1732 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1733 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1739 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1753 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1759 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1766 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1794 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1795 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1804 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 477:

/* Line 1464 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1820 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1825 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1826 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1835 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1839 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1843 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1847 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1855 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1856 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1857 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1858 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1864 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[(1) - (2)].exp).identifier._class, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1906 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1907 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1908 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1917 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 510:

/* Line 1464 of yacc.c  */
#line 1918 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 511:

/* Line 1464 of yacc.c  */
#line 1919 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 512:

/* Line 1464 of yacc.c  */
#line 1920 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 513:

/* Line 1464 of yacc.c  */
#line 1927 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 514:

/* Line 1464 of yacc.c  */
#line 1928 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 1929 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1930 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1935 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1936 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1938 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1944 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 1945 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1947 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1953 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 1954 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1956 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1962 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1963 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1968 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1974 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1975 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 2003 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 2011 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 2015 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 2020 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 2027 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 2031 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 570:

/* Line 1464 of yacc.c  */
#line 2036 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 2037 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2042 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2043 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2044 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2050 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2051 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2052 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2057 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 2058 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2069 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2070 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2079 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2080 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2081 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2090 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2091 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2105 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2106 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2119 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2120 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 618:

/* Line 1464 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2163 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2183 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2201 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2202 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 673:

/* Line 1464 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 674:

/* Line 1464 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 678:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2233 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2234 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT128); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT128); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 699:

/* Line 1464 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 700:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 701:

/* Line 1464 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2254 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2255 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2262 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2264 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2278 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2290 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2296 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2302 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2309 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2318 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2319 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2320 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2321 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2326 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2329 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2330 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2333 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2334 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2339 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2344 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id._class, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2352 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id._class, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2361 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2369 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2371 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2372 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2373 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2378 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2385 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2392 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2395 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2408 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2422 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2425 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2427 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2429 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2433 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2440 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2441 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2442 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2444 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2452 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2457 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2464 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2483 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2517 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id)._class, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2518 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2521 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2529 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2539 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2543 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2545 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2546 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2547 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2548 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2549 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2550 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2552 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2560 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2568 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2569 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2570 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2571 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2572 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2573 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2574 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2575 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2576 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2577 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2578 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2579 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2581 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2589 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2597 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2598 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2599 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2600 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2601 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2602 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2603 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2604 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2605 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2606 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2607 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2608 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2610 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2618 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2626 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2627 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2631 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2632 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2633 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2634 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2635 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2641 "grammar.y"
    {
      char * colon = (yyvsp[(1) - (1)].specifier).name ? RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false) : null;
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2647 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2650 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2659 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2668 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2677 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2685 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2686 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2687 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2688 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2692 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2693 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2694 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2695 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2696 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2697 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2698 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2699 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2700 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2708 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2709 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2710 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2711 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2712 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2718 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2727 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2736 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2745 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2768 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2769 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2770 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2771 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2772 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 2778 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 2787 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 913:

/* Line 1464 of yacc.c  */
#line 2796 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 2805 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 2868 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2869 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2870 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2872 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2883 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2884 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 2885 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 2890 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 2891 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 2892 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 2893 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2894 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 2898 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2899 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2903 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2904 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2905 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2909 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2910 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2914 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2915 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2916 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2917 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2918 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2919 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2920 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2921 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2922 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 2923 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2924 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2925 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2926 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2927 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2928 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 2929 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 2933 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 2934 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 2935 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 2936 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 2937 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 2938 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 2939 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 2940 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 2944 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 2945 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 2946 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 2947 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 2951 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 2953 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 2954 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 2955 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 2959 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 2962 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 2963 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 2969 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 2975 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 2981 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 2983 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 2985 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 2990 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 2998 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3004 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3005 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 994:

/* Line 1464 of yacc.c  */
#line 3006 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3012 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3018 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3019 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3020 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3024 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3027 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3043 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3044 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3045 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3047 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3060 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3076 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3078 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3082 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3083 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3087 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3088 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3089 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3090 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3093 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3094 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3098 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3099 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3100 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3104 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3108 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3112 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3113 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3114 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3115 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3116 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__int128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3117 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("__float128")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3119 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3127 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3136 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3137 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3138 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3139 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3143 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3144 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3149 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3154 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3155 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3156 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3157 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3158 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3160 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3178 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3179 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3183 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3184 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3185 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3187 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3188 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3190 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3191 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3192 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3193 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3197 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3198 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3199 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3201 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3203 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3204 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3205 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3210 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3212 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3213 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3214 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3219 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3226 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1080:

/* Line 1464 of yacc.c  */
#line 3228 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1082:

/* Line 1464 of yacc.c  */
#line 3230 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1092:

/* Line 1464 of yacc.c  */
#line 3243 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3244 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1094:

/* Line 1464 of yacc.c  */
#line 3245 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1095:

/* Line 1464 of yacc.c  */
#line 3246 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1096:

/* Line 1464 of yacc.c  */
#line 3247 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1097:

/* Line 1464 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3252 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3253 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3258 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3264 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3265 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3266 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3268 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3275 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3277 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3279 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3284 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3285 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3286 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3287 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3289 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3290 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3291 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3292 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3293 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3297 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3298 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3299 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3300 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3301 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3302 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3303 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3305 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3306 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3307 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3308 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3309 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3331 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3332 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3337 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3345 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3346 "grammar.y"
    { structDeclMode = defaultDeclMode;  ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3349 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3350 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3354 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3355 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3356 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3361 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3362 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3367 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3373 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3375 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3376 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3377 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3378 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3382 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3389 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3390 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3391 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3400 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3405 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3407 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3416 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3421 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3422 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3423 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3424 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3425 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3426 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3430 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3435 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3436 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3437 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3439 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3440 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3442 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3443 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3444 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3446 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3448 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3449 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3453 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3460 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3462 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3463 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3465 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3466 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3467 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3469 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3470 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3471 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3474 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3479 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3491 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3492 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3493 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3494 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3495 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3499 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3501 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3502 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3508 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3510 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3511 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3515 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3520 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3524 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3528 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3530 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3541 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3543 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3549 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3553 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3562 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3564 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3567 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3568 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3569 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3571 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3580 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3581 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3583 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3585 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3589 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3591 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3599 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3601 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3602 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3605 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3606 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3610 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3611 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3612 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3618 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3619 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3621 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3623 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3629 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3633 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3634 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3635 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3643 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3644 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3645 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3650 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3654 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3655 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3659 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3660 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1310:

/* Line 1464 of yacc.c  */
#line 3661 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1311:

/* Line 1464 of yacc.c  */
#line 3662 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1312:

/* Line 1464 of yacc.c  */
#line 3666 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1313:

/* Line 1464 of yacc.c  */
#line 3670 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1314:

/* Line 1464 of yacc.c  */
#line 3674 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1315:

/* Line 1464 of yacc.c  */
#line 3678 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22733 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3681 "grammar.y"


