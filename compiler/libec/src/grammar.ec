/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYSIZE_T size_t
#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 109 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366,
     BOOL = 367,
     _BOOL = 368,
     _COMPLEX = 369,
     _IMAGINARY = 370,
     RESTRICT = 371,
     THREAD = 372,
     WIDE_STRING_LITERAL = 373,
     BUILTIN_OFFSETOF = 374
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 39 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 309 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 334 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  295
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   42445

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  145
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  257
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1309
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2174

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   374

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   139,     2,     2,   133,   141,   136,     2,
     123,   124,   120,   137,   128,   138,   131,   140,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   132,   126,
     121,   127,   122,   144,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   134,     2,   135,   142,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   130,   143,   129,   125,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1274,  1276,  1278,  1280,  1282,  1284,
    1286,  1288,  1290,  1292,  1294,  1296,  1301,  1303,  1307,  1311,
    1315,  1319,  1323,  1327,  1329,  1333,  1337,  1341,  1345,  1347,
    1351,  1355,  1359,  1363,  1366,  1368,  1371,  1375,  1379,  1383,
    1387,  1391,  1395,  1399,  1401,  1405,  1409,  1413,  1417,  1421,
    1425,  1429,  1433,  1435,  1439,  1443,  1447,  1451,  1453,  1457,
    1461,  1465,  1469,  1471,  1475,  1479,  1483,  1487,  1489,  1493,
    1497,  1499,  1503,  1507,  1509,  1515,  1521,  1527,  1533,  1539,
    1545,  1551,  1557,  1563,  1569,  1575,  1581,  1587,  1593,  1599,
    1605,  1607,  1611,  1615,  1619,  1623,  1627,  1631,  1635,  1639,
    1641,  1643,  1645,  1647,  1649,  1651,  1653,  1655,  1657,  1659,
    1661,  1663,  1667,  1671,  1674,  1676,  1680,  1684,  1686,  1688,
    1691,  1694,  1698,  1702,  1706,  1710,  1714,  1718,  1722,  1725,
    1728,  1731,  1734,  1737,  1743,  1750,  1757,  1760,  1766,  1768,
    1770,  1772,  1777,  1779,  1783,  1787,  1791,  1795,  1799,  1803,
    1805,  1809,  1813,  1817,  1821,  1823,  1827,  1831,  1835,  1839,
    1841,  1844,  1848,  1852,  1856,  1860,  1864,  1868,  1872,  1874,
    1878,  1882,  1886,  1890,  1894,  1898,  1902,  1906,  1908,  1912,
    1916,  1920,  1924,  1926,  1930,  1934,  1938,  1942,  1944,  1948,
    1952,  1956,  1960,  1962,  1966,  1970,  1972,  1976,  1980,  1982,
    1988,  1994,  2000,  2006,  2011,  2016,  2021,  2026,  2032,  2038,
    2044,  2050,  2055,  2060,  2065,  2070,  2076,  2082,  2088,  2094,
    2100,  2106,  2112,  2118,  2122,  2126,  2129,  2132,  2134,  2138,
    2142,  2146,  2150,  2152,  2155,  2159,  2163,  2166,  2169,  2172,
    2174,  2177,  2181,  2185,  2187,  2189,  2191,  2193,  2195,  2197,
    2199,  2201,  2203,  2205,  2207,  2209,  2211,  2213,  2215,  2217,
    2219,  2223,  2227,  2229,  2233,  2236,  2238,  2241,  2244,  2247,
    2252,  2257,  2261,  2265,  2270,  2276,  2281,  2288,  2295,  2300,
    2306,  2311,  2318,  2325,  2331,  2337,  2340,  2343,  2346,  2352,
    2356,  2362,  2369,  2375,  2383,  2391,  2400,  2409,  2417,  2425,
    2429,  2433,  2437,  2442,  2446,  2452,  2458,  2465,  2473,  2480,
    2485,  2487,  2489,  2491,  2493,  2495,  2497,  2499,  2501,  2503,
    2506,  2508,  2510,  2512,  2514,  2516,  2518,  2520,  2522,  2524,
    2526,  2528,  2530,  2532,  2534,  2536,  2538,  2543,  2548,  2553,
    2555,  2557,  2559,  2561,  2563,  2565,  2567,  2569,  2571,  2573,
    2575,  2577,  2579,  2581,  2583,  2585,  2587,  2589,  2591,  2593,
    2595,  2597,  2599,  2601,  2603,  2605,  2607,  2612,  2617,  2622,
    2624,  2626,  2629,  2632,  2636,  2642,  2645,  2649,  2655,  2661,
    2667,  2669,  2673,  2676,  2679,  2683,  2687,  2690,  2694,  2698,
    2703,  2707,  2711,  2715,  2719,  2723,  2727,  2732,  2737,  2742,
    2744,  2746,  2751,  2755,  2758,  2762,  2766,  2770,  2774,  2778,
    2782,  2786,  2790,  2794,  2798,  2802,  2806,  2808,  2810,  2812,
    2815,  2817,  2820,  2822,  2825,  2827,  2830,  2832,  2835,  2837,
    2840,  2842,  2845,  2847,  2850,  2852,  2855,  2857,  2860,  2862,
    2865,  2867,  2870,  2872,  2875,  2877,  2880,  2882,  2885,  2887,
    2890,  2892,  2895,  2897,  2900,  2902,  2905,  2907,  2910,  2912,
    2915,  2917,  2920,  2922,  2925,  2927,  2930,  2932,  2935,  2937,
    2940,  2942,  2944,  2946,  2949,  2951,  2954,  2956,  2959,  2961,
    2964,  2969,  2975,  2977,  2979,  2981,  2984,  2986,  2989,  2991,
    2994,  2996,  2999,  3004,  3010,  3012,  3015,  3017,  3020,  3022,
    3025,  3027,  3030,  3032,  3035,  3037,  3040,  3045,  3051,  3053,
    3056,  3058,  3061,  3063,  3066,  3068,  3071,  3073,  3076,  3078,
    3081,  3086,  3092,  3096,  3100,  3102,  3106,  3110,  3114,  3118,
    3120,  3122,  3124,  3129,  3134,  3139,  3143,  3148,  3153,  3158,
    3162,  3164,  3168,  3173,  3177,  3182,  3187,  3192,  3197,  3201,
    3204,  3208,  3212,  3216,  3220,  3223,  3226,  3229,  3233,  3238,
    3240,  3242,  3245,  3249,  3253,  3257,  3261,  3264,  3267,  3270,
    3274,  3279,  3281,  3283,  3285,  3287,  3289,  3294,  3296,  3298,
    3300,  3302,  3304,  3306,  3308,  3310,  3312,  3317,  3319,  3322,
    3326,  3333,  3339,  3343,  3348,  3351,  3355,  3359,  3363,  3367,
    3372,  3377,  3382,  3385,  3389,  3393,  3397,  3402,  3407,  3411,
    3416,  3419,  3423,  3427,  3431,  3436,  3441,  3443,  3446,  3449,
    3453,  3455,  3457,  3460,  3463,  3467,  3469,  3471,  3474,  3477,
    3481,  3483,  3486,  3490,  3493,  3496,  3498,  3501,  3505,  3508,
    3510,  3513,  3517,  3521,  3523,  3526,  3530,  3534,  3536,  3539,
    3543,  3547,  3549,  3552,  3556,  3560,  3562,  3565,  3569,  3573,
    3575,  3579,  3584,  3586,  3591,  3594,  3600,  3604,  3606,  3608,
    3610,  3612,  3614,  3616,  3620,  3624,  3627,  3630,  3632,  3634,
    3638,  3641,  3645,  3647,  3651,  3655,  3659,  3663,  3667,  3669,
    3672,  3676,  3680,  3682,  3685,  3687,  3690,  3693,  3696,  3699,
    3703,  3705,  3707,  3711,  3715,  3717,  3721,  3726,  3730,  3735,
    3739,  3743,  3748,  3752,  3757,  3759,  3763,  3767,  3772,  3776,
    3780,  3784,  3789,  3791,  3795,  3799,  3803,  3807,  3811,  3813,
    3817,  3820,  3822,  3824,  3826,  3828,  3830,  3833,  3835,  3837,
    3839,  3841,  3844,  3847,  3850,  3852,  3854,  3856,  3858,  3860,
    3863,  3865,  3867,  3872,  3880,  3882,  3886,  3887,  3894,  3903,
    3914,  3927,  3936,  3947,  3958,  3964,  3972,  3982,  3994,  4002,
    4012,  4022,  4026,  4031,  4036,  4040,  4044,  4048,  4053,  4058,
    4062,  4066,  4070,  4075,  4080,  4084,  4087,  4091,  4094,  4098,
    4103,  4108,  4112,  4116,  4118,  4120,  4122,  4124,  4126,  4129,
    4133,  4136,  4139,  4142,  4146,  4150,  4153,  4159,  4166,  4169,
    4172,  4175,  4178,  4181,  4184,  4186,  4189,  4192,  4196,  4198,
    4201,  4203,  4206,  4209,  4211,  4214,  4217,  4220,  4223,  4226,
    4229,  4231,  4233,  4236,  4239,  4241,  4243,  4246,  4249,  4251,
    4254,  4257,  4259,  4262,  4264,  4267,  4270,  4276,  4282,  4290,
    4298,  4304,  4310,  4314,  4317,  4323,  4328,  4333,  4341,  4348,
    4355,  4361,  4369,  4376,  4381,  4389,  4399,  4403,  4408,  4413,
    4419,  4425,  4432,  4440,  4447,  4454,  4460,  4466,  4471,  4475,
    4478,  4480,  4483,  4488,  4492,  4498,  4503,  4507,  4510,  4513,
    4516,  4520,  4524,  4528,  4532,  4535,  4538,  4540,  4542,  4547,
    4551,  4556,  4560,  4564,  4567,  4572,  4576,  4581,  4585,  4589,
    4592,  4594,  4597,  4599,  4601,  4604,  4606,  4609,  4613,  4617,
    4619,  4622,  4625,  4628,  4632,  4637,  4642,  4645,  4648,  4651,
    4654,  4656,  4659,  4661,  4664,  4666,  4669,  4672,  4674,  4677,
    4679,  4682,  4685,  4688,  4691,  4693,  4696,  4699,  4703,  4705,
    4707,  4708,  4715,  4722,  4728,  4733,  4735,  4738,  4741,  4743,
    4747,  4751,  4756,  4758,  4760,  4763,  4766,  4773,  4780,  4787
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     391,     0,    -1,   217,   120,    -1,   217,   121,    -1,   150,
      -1,   217,   217,    -1,    28,    -1,    28,    -1,   148,    -1,
     148,   121,   211,   122,    -1,   148,   121,   211,    11,    -1,
     300,   335,    -1,   333,    -1,   300,   123,   124,    -1,   125,
     300,   123,   124,    -1,    78,   300,   335,    -1,    78,   333,
      -1,   300,   336,    -1,   334,    -1,    78,   300,   336,    -1,
      78,   334,    -1,   151,   375,    -1,   154,   375,    -1,   154,
     126,    -1,   152,   375,    -1,   153,   375,    -1,   151,   126,
      -1,   151,   325,   126,    -1,   151,   376,    -1,   155,    -1,
     154,   376,    -1,   156,    -1,   156,   126,    -1,   299,   335,
      -1,   299,   337,    -1,   299,   336,    -1,   159,   375,    -1,
     159,   376,    -1,   160,    -1,   159,    -1,   225,   127,   340,
      -1,   340,    -1,   225,   127,   341,    -1,   225,   127,     1,
      -1,   341,    -1,   163,    -1,   165,   128,   163,    -1,   166,
     128,   163,    -1,   164,    -1,   165,   128,   164,    -1,   166,
     128,   164,    -1,   165,   128,     1,    -1,   166,   128,     1,
      -1,   128,    -1,   165,   126,    -1,   166,   126,    -1,   167,
      -1,   161,    -1,   170,   167,    -1,   170,   161,    -1,   168,
     167,    -1,   168,   161,    -1,   170,   126,    -1,   168,   126,
      -1,   126,    -1,   168,    -1,   165,    -1,   168,   165,    -1,
     170,   165,    -1,   162,    -1,   169,   162,    -1,   170,   162,
      -1,   168,   162,    -1,   168,   166,    -1,   166,    -1,   165,
       1,    -1,   172,   129,    -1,   172,     1,   129,    -1,   299,
     217,   130,   170,    -1,   299,   217,   130,   169,     1,    -1,
     299,   217,   130,   169,    -1,   299,   217,   130,    -1,   299,
     217,   130,     1,    -1,   174,   129,    -1,   174,     1,   129,
      -1,   300,   217,   130,   170,    -1,   300,   217,   130,   169,
       1,    -1,   300,   217,   130,   169,    -1,   300,   217,   130,
      -1,   300,   217,   130,     1,    -1,   301,   217,   130,   169,
     129,    -1,   301,   217,   130,   170,   129,    -1,   301,   217,
     130,   129,    -1,   177,   129,    -1,   177,     1,   129,    -1,
     150,   130,   169,    -1,   217,   130,   169,    -1,   150,   130,
     170,    -1,   150,   130,    -1,   150,   130,   169,     1,    -1,
     150,   130,     1,    -1,   217,   130,   170,    -1,   217,   130,
      -1,   217,   130,   169,     1,    -1,   217,   130,     1,    -1,
     179,   129,    -1,   179,     1,   129,    -1,   130,   170,    -1,
     130,   169,     1,    -1,   130,     1,    -1,   130,    -1,   130,
     169,    -1,   225,   127,   340,    -1,   225,   127,   341,    -1,
     225,   127,     1,    -1,   225,     1,    -1,   180,    -1,   182,
     128,   180,    -1,   183,   128,   180,    -1,   181,    -1,   182,
     128,   181,    -1,   183,   128,   181,    -1,   182,     1,    -1,
      68,   305,   217,   130,    -1,    68,   305,   329,   217,   130,
      -1,    68,   305,   130,    -1,    68,   305,   329,   130,    -1,
      68,     1,   130,    -1,   184,    -1,   185,    69,   375,    -1,
     185,    70,   375,    -1,   185,    95,   375,    -1,   185,    91,
      -1,   185,    97,   219,    -1,   185,   129,    -1,    99,   305,
     217,   130,    -1,    99,   305,   329,   217,   130,    -1,    99,
     305,   130,    -1,    99,   305,   329,   130,    -1,    99,     1,
     130,    -1,   187,    -1,   188,    69,   375,    -1,   188,    70,
     375,    -1,   188,   129,    -1,   217,    -1,   190,   217,    -1,
     190,   375,    -1,    73,   375,    -1,   191,    -1,   192,   191,
      -1,    88,   123,   190,   124,   375,    -1,    88,   123,   244,
     124,   130,   192,   129,    -1,   244,   131,    88,   123,   244,
     124,   130,   192,   129,    -1,    89,   123,   244,   128,   190,
     124,    -1,   244,   131,    89,   123,   244,   128,   190,   124,
      -1,    89,   123,   244,   124,    -1,   244,   131,    89,   123,
     244,   124,    -1,    90,    -1,    90,   190,    -1,   225,   131,
      90,    -1,   244,   131,    90,   190,    -1,   198,   126,    -1,
     182,   126,    -1,   157,    -1,   186,    -1,   363,   157,    -1,
     363,   186,    -1,   189,    -1,    91,    -1,    93,    -1,    94,
      -1,    99,   123,   217,   124,   127,   340,   126,    -1,   126,
      -1,   363,   132,    -1,   363,   123,   217,   124,    -1,   158,
      -1,   300,    -1,   300,   287,    -1,   363,   300,   287,    -1,
     363,   300,    -1,   363,   176,    -1,   363,   173,    -1,    98,
     300,   287,    -1,   193,    -1,    92,   217,    -1,    92,   150,
      -1,    96,   217,    -1,   176,    -1,   173,    -1,   182,    -1,
     174,     1,    -1,   177,     1,    -1,   363,   158,    -1,   363,
     174,     1,    -1,   363,   177,     1,    -1,   183,    -1,   197,
      -1,   199,   197,    -1,   200,   197,    -1,   198,    -1,   199,
       1,    -1,   200,     1,    -1,   199,   198,    -1,   200,   198,
      -1,   300,    -1,   300,   329,    -1,   300,    -1,   300,   329,
      -1,    65,   217,    -1,    65,   217,   127,   202,    -1,    65,
     217,   132,   201,    -1,    65,   217,   132,   201,   127,   202,
      -1,    65,   149,    -1,    65,   149,   127,   202,    -1,    65,
     149,   132,   201,    -1,    65,   149,   132,   201,   127,   202,
      -1,   217,    -1,   217,    -1,   217,   127,   204,    -1,   234,
      -1,   300,   217,   127,   206,    -1,   300,   329,   217,   127,
     206,    -1,   203,    -1,   205,    -1,   207,    -1,   208,    -1,
     209,   128,   208,    -1,   206,    -1,   204,    -1,   202,    -1,
     217,   127,   206,    -1,   217,   127,   204,    -1,   217,   127,
     202,    -1,   210,    -1,   211,   128,   210,    -1,    65,    -1,
     212,   217,    -1,   212,   148,    -1,   217,   212,   217,    -1,
     217,   212,   148,    -1,   212,   217,   121,   209,   122,    -1,
     212,   148,   121,   209,   122,    -1,   217,   212,   217,   121,
     209,   122,    -1,   217,   212,   148,   121,   209,   122,    -1,
     216,   129,    -1,   215,   126,    -1,   213,   130,   129,    -1,
     215,   130,   129,    -1,   212,   217,   126,    -1,   212,   147,
     126,    -1,   213,   132,   304,    -1,   213,   130,   200,    -1,
     215,   130,   200,    -1,   213,   130,   199,    -1,   215,   130,
     199,    -1,   213,   130,     1,    -1,   215,   130,     1,    -1,
       3,    -1,   221,    -1,   123,   246,   124,    -1,   386,    -1,
     133,   386,    -1,   133,   386,   131,   386,    -1,     4,    -1,
     217,    -1,   176,    -1,    85,   123,   375,   124,    -1,    85,
     123,   246,   124,    -1,    85,   123,   347,   124,   338,    -1,
      85,   123,   347,   124,   123,   347,   124,   338,    -1,   220,
     217,    -1,   220,    -1,   219,    -1,   118,    -1,   123,   124,
      -1,    71,   307,   330,   134,   266,   135,    -1,    71,   307,
     330,   134,   267,   135,    -1,    71,   307,   134,   266,   135,
      -1,    71,   307,   134,   267,   135,    -1,   102,   307,   330,
     134,   266,   135,    -1,   102,   307,   330,   134,   267,   135,
      -1,   102,   307,   134,   266,   135,    -1,   102,   307,   134,
     267,   135,    -1,    72,   266,   306,   330,   134,   266,   135,
      -1,    72,   266,   306,   330,   134,   267,   135,    -1,    72,
     266,   306,   134,   266,   135,    -1,    72,   266,   306,   134,
     267,   135,    -1,   103,   266,   306,   330,   134,   266,   135,
      -1,   103,   266,   306,   330,   134,   267,   135,    -1,   103,
     266,   306,   134,   266,   135,    -1,   103,   266,   306,   134,
     267,   135,    -1,    65,   123,   299,   124,    -1,    65,   123,
     299,   329,   124,    -1,    65,   123,   217,   124,    -1,   104,
     123,   244,   128,   347,   124,    -1,    98,   123,   217,   124,
      -1,   398,    -1,   399,    -1,   400,    -1,   401,    -1,   134,
     226,   135,    -1,   134,   135,    -1,   178,    -1,   179,     1,
      -1,   123,   246,    -1,   123,   264,    -1,   218,    -1,   225,
     134,   246,   135,    -1,   225,   134,   264,   135,    -1,   225,
     123,   124,    -1,   225,   123,   226,   124,    -1,   225,   123,
     227,   124,    -1,   225,   131,   217,    -1,   225,     7,   217,
      -1,   225,     8,    -1,   225,     9,    -1,   248,   134,   246,
     135,    -1,   248,   134,   264,   135,    -1,   248,   123,   124,
      -1,   248,   123,   226,   124,    -1,   248,   131,   217,    -1,
     248,     7,   217,    -1,   248,     8,    -1,   248,     9,    -1,
     244,    -1,   222,    -1,   226,   128,   244,    -1,   226,   128,
     222,    -1,   263,    -1,   223,    -1,   226,   128,   263,    -1,
     226,   128,   223,    -1,   226,   128,    -1,     8,   229,    -1,
       9,   229,    -1,   230,   231,    -1,   230,   222,    -1,     6,
     229,    -1,     6,   123,   348,   124,    -1,     6,   123,    65,
     147,   124,    -1,     6,   123,    65,   146,   124,    -1,   109,
     229,    -1,   109,   123,   348,   124,    -1,   119,   123,   348,
     128,   217,   124,    -1,   228,    -1,   225,    -1,   136,    -1,
     120,    -1,   137,    -1,   138,    -1,   125,    -1,   139,    -1,
      73,    -1,    84,    -1,   229,    -1,   123,   347,   124,   231,
      -1,   231,    -1,   232,   120,   231,    -1,   232,   140,   231,
      -1,   232,   141,   231,    -1,   252,   120,   231,    -1,   252,
     140,   231,    -1,   252,   141,   231,    -1,   232,    -1,   233,
     137,   232,    -1,   233,   138,   232,    -1,   253,   137,   232,
      -1,   253,   138,   232,    -1,   233,    -1,   234,    10,   233,
      -1,   234,    11,   233,    -1,   254,    10,   233,    -1,   254,
      11,   233,    -1,   236,   121,    -1,   234,    -1,   235,   234,
      -1,   236,   122,   234,    -1,   236,    12,   234,    -1,   236,
      13,   234,    -1,   255,   121,   234,    -1,   255,   122,   234,
      -1,   255,    12,   234,    -1,   255,    13,   234,    -1,   236,
      -1,   237,    14,   236,    -1,   237,    15,   236,    -1,   256,
      14,   236,    -1,   256,    15,   236,    -1,   237,    14,   222,
      -1,   237,    15,   222,    -1,   256,    14,   222,    -1,   256,
      15,   222,    -1,   237,    -1,   238,   136,   237,    -1,   257,
     136,   237,    -1,   238,   136,   222,    -1,   257,   136,   222,
      -1,   238,    -1,   239,   142,   238,    -1,   258,   142,   238,
      -1,   239,   142,   222,    -1,   258,   142,   222,    -1,   239,
      -1,   240,   143,   239,    -1,   259,   143,   239,    -1,   240,
     143,   222,    -1,   259,   143,   222,    -1,   240,    -1,   241,
      16,   240,    -1,   260,    16,   240,    -1,   241,    -1,   242,
      17,   241,    -1,   261,    17,   241,    -1,   242,    -1,   242,
     144,   246,   132,   243,    -1,   242,   144,   264,   132,   243,
      -1,   261,   144,   246,   132,   243,    -1,   261,   144,   264,
     132,   243,    -1,   242,   144,   247,   132,   243,    -1,   242,
     144,   265,   132,   243,    -1,   261,   144,   247,   132,   243,
      -1,   261,   144,   265,   132,   243,    -1,   242,   144,   246,
     132,   222,    -1,   242,   144,   264,   132,   222,    -1,   261,
     144,   246,   132,   222,    -1,   261,   144,   264,   132,   222,
      -1,   242,   144,   247,   132,   222,    -1,   242,   144,   265,
     132,   222,    -1,   261,   144,   247,   132,   222,    -1,   261,
     144,   265,   132,   222,    -1,   243,    -1,   229,   245,   244,
      -1,   250,   245,   244,    -1,   243,   245,   244,    -1,   262,
     245,   244,    -1,   229,   245,   222,    -1,   250,   245,   222,
      -1,   243,   245,   222,    -1,   262,   245,   222,    -1,   127,
      -1,    18,    -1,    19,    -1,    20,    -1,    21,    -1,    22,
      -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,    27,
      -1,   244,    -1,   246,   128,   244,    -1,   264,   128,   244,
      -1,   264,   124,    -1,   222,    -1,   246,   128,   222,    -1,
     264,   128,   222,    -1,   224,    -1,     1,    -1,   225,     1,
      -1,   177,     1,    -1,   225,     7,     1,    -1,   248,     7,
       1,    -1,   225,   123,   226,    -1,   225,   123,   227,    -1,
     225,   131,     1,    -1,   248,   123,   227,    -1,   248,   131,
       1,    -1,     8,   250,    -1,     9,   250,    -1,   230,   251,
      -1,   230,   223,    -1,     6,   250,    -1,     6,   123,   348,
     124,     1,    -1,     6,   123,    65,   147,   124,     1,    -1,
       6,   123,    65,   146,   124,     1,    -1,   109,   250,    -1,
     109,   123,   348,   124,     1,    -1,   249,    -1,   248,    -1,
     250,    -1,   123,   347,   124,   251,    -1,   251,    -1,   232,
     120,   251,    -1,   232,   140,   251,    -1,   232,   141,   251,
      -1,   252,   120,   251,    -1,   252,   140,   251,    -1,   252,
     141,   251,    -1,   252,    -1,   233,   137,   252,    -1,   233,
     138,   252,    -1,   253,   137,   252,    -1,   253,   138,   252,
      -1,   253,    -1,   234,    10,   253,    -1,   234,    11,   253,
      -1,   254,    10,   253,    -1,   254,    11,   253,    -1,   254,
      -1,   235,   254,    -1,   236,   122,   254,    -1,   236,    12,
     254,    -1,   236,    13,   254,    -1,   255,   121,   254,    -1,
     255,   122,   254,    -1,   255,    12,   254,    -1,   255,    13,
     254,    -1,   255,    -1,   237,    14,   255,    -1,   237,    15,
     255,    -1,   256,    14,   255,    -1,   256,    15,   255,    -1,
     237,    14,   223,    -1,   237,    15,   223,    -1,   256,    14,
     223,    -1,   256,    15,   223,    -1,   256,    -1,   238,   136,
     256,    -1,   257,   136,   256,    -1,   238,   136,   223,    -1,
     257,   136,   223,    -1,   257,    -1,   239,   142,   257,    -1,
     258,   142,   257,    -1,   239,   142,   223,    -1,   258,   142,
     223,    -1,   258,    -1,   240,   143,   258,    -1,   259,   143,
     258,    -1,   240,   143,   223,    -1,   259,   143,   223,    -1,
     259,    -1,   241,    16,   259,    -1,   260,    16,   259,    -1,
     260,    -1,   242,    17,   260,    -1,   261,    17,   260,    -1,
     261,    -1,   242,   144,   246,   132,   261,    -1,   242,   144,
     264,   132,   261,    -1,   261,   144,   246,   132,   261,    -1,
     261,   144,   264,   132,   261,    -1,   242,   144,   246,   132,
      -1,   242,   144,   264,   132,    -1,   261,   144,   246,   132,
      -1,   261,   144,   264,   132,    -1,   242,   144,   247,   132,
     261,    -1,   242,   144,   265,   132,   261,    -1,   261,   144,
     247,   132,   261,    -1,   261,   144,   265,   132,   261,    -1,
     242,   144,   247,   132,    -1,   242,   144,   265,   132,    -1,
     261,   144,   247,   132,    -1,   261,   144,   265,   132,    -1,
     242,   144,   246,   132,   223,    -1,   242,   144,   264,   132,
     223,    -1,   261,   144,   246,   132,   223,    -1,   261,   144,
     264,   132,   223,    -1,   242,   144,   247,   132,   223,    -1,
     242,   144,   265,   132,   223,    -1,   261,   144,   247,   132,
     223,    -1,   261,   144,   265,   132,   223,    -1,   242,   144,
     132,    -1,   261,   144,   132,    -1,   242,   144,    -1,   261,
     144,    -1,   262,    -1,   229,   245,   263,    -1,   250,   245,
     263,    -1,   229,   245,   223,    -1,   250,   245,   223,    -1,
     263,    -1,   244,     1,    -1,   246,   128,   263,    -1,   264,
     128,   263,    -1,   246,   246,    -1,   264,   246,    -1,   246,
     264,    -1,   223,    -1,   222,     1,    -1,   246,   128,   223,
      -1,   264,   128,   223,    -1,   243,    -1,   262,    -1,    29,
      -1,    30,    -1,    31,    -1,   117,    -1,    32,    -1,    33,
      -1,   116,    -1,    29,    -1,    30,    -1,    31,    -1,   117,
      -1,    32,    -1,    33,    -1,   116,    -1,   217,    -1,   217,
     127,   266,    -1,   217,   127,   267,    -1,   270,    -1,   271,
     128,   270,    -1,   271,   128,    -1,    50,    -1,   272,   217,
      -1,   272,   150,    -1,   275,   129,    -1,   272,   217,   130,
     129,    -1,   272,   150,   130,   129,    -1,   272,   130,   271,
      -1,   272,   130,     1,    -1,   272,   217,   130,   271,    -1,
     272,   217,   130,   271,     1,    -1,   272,   217,   130,     1,
      -1,   272,   217,   130,   271,   126,   199,    -1,   272,   217,
     130,   271,   126,   200,    -1,   272,   150,   130,   271,    -1,
     272,   150,   130,   271,     1,    -1,   272,   150,   130,     1,
      -1,   272,   150,   130,   271,   126,   199,    -1,   272,   150,
     130,   271,   126,   200,    -1,   272,   217,   130,   271,   126,
      -1,   272,   150,   130,   271,   126,    -1,   272,   217,    -1,
     272,   150,    -1,   278,   129,    -1,   276,   132,   304,   130,
     129,    -1,   276,   130,   129,    -1,   276,   132,   304,   130,
     271,    -1,   276,   132,   304,   130,   271,     1,    -1,   276,
     132,   304,   130,     1,    -1,   276,   132,   304,   130,   271,
     126,   199,    -1,   276,   132,   304,   130,   271,   126,   200,
      -1,   276,   132,   304,   130,   271,     1,   126,   199,    -1,
     276,   132,   304,   130,   271,     1,   126,   200,    -1,   276,
     132,   304,   130,     1,   126,   199,    -1,   276,   132,   304,
     130,     1,   126,   200,    -1,   272,   130,   271,    -1,   272,
     130,     1,    -1,   276,   130,   271,    -1,   276,   130,   271,
       1,    -1,   276,   130,     1,    -1,   276,   130,   271,   126,
     199,    -1,   276,   130,   271,   126,   200,    -1,   276,   132,
     304,   130,   271,   126,    -1,   276,   132,   304,   130,   271,
       1,   126,    -1,   276,   132,   304,   130,     1,   126,    -1,
     276,   130,   271,   126,    -1,   277,    -1,   294,    -1,   278,
      -1,   295,    -1,   320,    -1,    44,    -1,    45,    -1,   281,
      -1,   282,    -1,   283,   282,    -1,    46,    -1,    34,    -1,
      35,    -1,    36,    -1,    37,    -1,    38,    -1,    47,    -1,
      39,    -1,    42,    -1,    43,    -1,    40,    -1,    41,    -1,
      85,    -1,   291,    -1,   273,    -1,   147,    -1,    87,   123,
     244,   124,    -1,   100,   123,   147,   124,    -1,   100,   123,
     217,   124,    -1,    66,    -1,    82,    -1,    83,    -1,   113,
      -1,   112,    -1,   114,    -1,   115,    -1,    46,    -1,    34,
      -1,    35,    -1,    36,    -1,    37,    -1,    38,    -1,    47,
      -1,    39,    -1,    42,    -1,    43,    -1,    40,    -1,    41,
      -1,    85,    -1,   291,    -1,   273,    -1,   150,    -1,   113,
      -1,   112,    -1,   114,    -1,   115,    -1,    87,   123,   244,
     124,    -1,   100,   123,   147,   124,    -1,   100,   123,   217,
     124,    -1,    66,    -1,   337,    -1,   337,   325,    -1,   132,
     266,    -1,   337,   132,   266,    -1,   337,   132,   266,   132,
     266,    -1,   132,   267,    -1,   337,   132,   267,    -1,   337,
     132,   266,   132,   267,    -1,   337,   132,   267,   132,   267,
      -1,   337,   132,   267,   132,   266,    -1,   286,    -1,   287,
     128,   286,    -1,   296,   217,    -1,   296,   148,    -1,   296,
     320,   217,    -1,   296,   320,   148,    -1,   290,   129,    -1,
     288,   130,   129,    -1,   296,   130,   129,    -1,   296,   320,
     130,   129,    -1,   288,   130,   199,    -1,   288,   130,   200,
      -1,   288,   130,     1,    -1,   296,   130,   199,    -1,   296,
     130,   200,    -1,   296,   130,     1,    -1,   296,   320,   130,
     199,    -1,   296,   320,   130,   200,    -1,   296,   320,   130,
       1,    -1,   288,    -1,   288,    -1,   288,   121,   209,   122,
      -1,   292,   132,   304,    -1,   295,   129,    -1,   293,   130,
     129,    -1,   292,   130,   129,    -1,   296,   130,   129,    -1,
     293,   130,   199,    -1,   293,   130,   200,    -1,   293,   130,
       1,    -1,   292,   130,   199,    -1,   292,   130,   200,    -1,
     292,   130,     1,    -1,   296,   130,   199,    -1,   296,   130,
     200,    -1,   296,   130,     1,    -1,    48,    -1,    49,    -1,
     282,    -1,   297,   282,    -1,   284,    -1,   297,   284,    -1,
     274,    -1,   297,   274,    -1,   289,    -1,   297,   289,    -1,
     282,    -1,   298,   282,    -1,   284,    -1,   298,   284,    -1,
     146,    -1,   298,   146,    -1,   274,    -1,   298,   274,    -1,
     289,    -1,   298,   289,    -1,   268,    -1,   299,   268,    -1,
     282,    -1,   299,   282,    -1,   285,    -1,   299,   285,    -1,
     274,    -1,   299,   274,    -1,   289,    -1,   299,   289,    -1,
     268,    -1,   300,   268,    -1,   282,    -1,   300,   282,    -1,
     284,    -1,   300,   284,    -1,   146,    -1,   300,   146,    -1,
     289,    -1,   300,   289,    -1,   274,    -1,   300,   274,    -1,
     269,    -1,   301,   269,    -1,   282,    -1,   301,   282,    -1,
     284,    -1,   301,   284,    -1,   146,    -1,   301,   146,    -1,
     279,    -1,   301,   279,    -1,   280,    -1,   301,   280,    -1,
      81,    -1,    80,    -1,   268,    -1,   303,   268,    -1,   282,
      -1,   303,   282,    -1,   285,    -1,   303,   285,    -1,   217,
      -1,   303,   217,    -1,   217,   121,   211,   122,    -1,   303,
     217,   121,   211,   122,    -1,   303,    -1,   296,    -1,   268,
      -1,   305,   268,    -1,   282,    -1,   305,   282,    -1,   285,
      -1,   305,   285,    -1,   217,    -1,   305,   217,    -1,   217,
     121,   211,   122,    -1,   305,   217,   121,   211,   122,    -1,
     268,    -1,   306,   268,    -1,   282,    -1,   306,   282,    -1,
     285,    -1,   306,   285,    -1,   289,    -1,   306,   289,    -1,
     274,    -1,   306,   274,    -1,   217,    -1,   306,   217,    -1,
     217,   121,   211,   122,    -1,   306,   217,   121,   211,   122,
      -1,   268,    -1,   307,   268,    -1,   282,    -1,   307,   282,
      -1,   285,    -1,   307,   285,    -1,   289,    -1,   307,   289,
      -1,   274,    -1,   307,   274,    -1,   217,    -1,   307,   217,
      -1,   217,   121,   211,   122,    -1,   307,   217,   121,   211,
     122,    -1,   309,   128,     1,    -1,   308,   128,     1,    -1,
     217,    -1,   309,   128,   217,    -1,   308,   128,   217,    -1,
     351,   128,   217,    -1,   352,   128,   217,    -1,   311,    -1,
     148,    -1,    37,    -1,   148,   134,   266,   135,    -1,   148,
     134,   267,   135,    -1,   148,   134,   147,   135,    -1,   148,
     134,   135,    -1,   310,   134,   266,   135,    -1,   310,   134,
     267,   135,    -1,   310,   134,   147,   135,    -1,   310,   134,
     135,    -1,   217,    -1,   123,   331,   124,    -1,   123,   320,
     331,   124,    -1,   123,   332,   124,    -1,   123,   320,   332,
     124,    -1,   311,   134,   266,   135,    -1,   311,   134,   267,
     135,    -1,   311,   134,   147,   135,    -1,   311,   134,   135,
      -1,   311,   123,    -1,   312,   353,   124,    -1,   312,   354,
     124,    -1,   312,   309,   124,    -1,   312,   308,   124,    -1,
     312,   124,    -1,   312,   308,    -1,   312,     1,    -1,   312,
     351,   123,    -1,   312,   300,   217,   123,    -1,   313,    -1,
     311,    -1,   310,   123,    -1,   316,   353,   124,    -1,   316,
     354,   124,    -1,   316,   309,   124,    -1,   316,   308,   124,
      -1,   316,   124,    -1,   316,   308,    -1,   316,     1,    -1,
     316,   351,   123,    -1,   316,   300,   217,   123,    -1,   317,
      -1,   310,    -1,    74,    -1,    75,    -1,   325,    -1,    86,
     123,   386,   124,    -1,    79,    -1,   110,    -1,   111,    -1,
       3,    -1,    28,    -1,    75,    -1,    74,    -1,    44,    -1,
     322,    -1,   322,   123,   246,   124,    -1,   323,    -1,   324,
     323,    -1,   324,   128,   323,    -1,   321,   123,   123,   324,
     124,   124,    -1,   321,   123,   123,   124,   124,    -1,   123,
     329,   124,    -1,   123,   320,   329,   124,    -1,   134,   135,
      -1,   134,   266,   135,    -1,   134,   267,   135,    -1,   134,
     147,   135,    -1,   326,   134,   135,    -1,   326,   134,   266,
     135,    -1,   326,   134,   147,   135,    -1,   326,   134,   267,
     135,    -1,   123,   124,    -1,   123,   353,   124,    -1,   123,
     354,   124,    -1,   326,   123,   124,    -1,   326,   123,   353,
     124,    -1,   326,   123,   354,   124,    -1,   123,   330,   124,
      -1,   123,   320,   330,   124,    -1,   123,   124,    -1,   123,
     353,   124,    -1,   123,   354,   124,    -1,   327,   123,   124,
      -1,   327,   123,   353,   124,    -1,   327,   123,   354,   124,
      -1,   120,    -1,   120,   283,    -1,   120,   328,    -1,   120,
     283,   328,    -1,   328,    -1,   326,    -1,   328,   326,    -1,
     320,   328,    -1,   320,   328,   326,    -1,   328,    -1,   327,
      -1,   328,   327,    -1,   320,   328,    -1,   320,   328,   327,
      -1,   315,    -1,   328,   315,    -1,   320,   328,   315,    -1,
     331,   320,    -1,   337,   320,    -1,   319,    -1,   328,   319,
      -1,   320,   328,   319,    -1,   332,   320,    -1,   313,    -1,
     328,   313,    -1,   320,   328,   313,    -1,   328,   320,   313,
      -1,   314,    -1,   328,   314,    -1,   320,   328,   314,    -1,
     328,   320,   314,    -1,   317,    -1,   328,   317,    -1,   320,
     328,   317,    -1,   328,   320,   317,    -1,   318,    -1,   328,
     318,    -1,   320,   328,   318,    -1,   328,   320,   318,    -1,
     310,    -1,   328,   310,    -1,   320,   328,   310,    -1,   328,
     320,   310,    -1,   244,    -1,   130,   342,   129,    -1,   130,
     342,   128,   129,    -1,   263,    -1,   130,   342,   129,     1,
      -1,   130,   342,    -1,   130,   342,   128,   129,     1,    -1,
     130,   342,   128,    -1,   243,    -1,   222,    -1,   262,    -1,
     223,    -1,   338,    -1,   339,    -1,   342,   128,   338,    -1,
     342,   128,   339,    -1,   342,   338,    -1,   342,   339,    -1,
     331,    -1,   332,    -1,   331,   127,   338,    -1,   331,     1,
      -1,   331,   127,   339,    -1,   343,    -1,   345,   128,   343,
      -1,    37,   128,   343,    -1,    38,   128,   343,    -1,   148,
     128,   343,    -1,   346,   128,   343,    -1,   344,    -1,   343,
       1,    -1,   345,   128,   344,    -1,   346,   128,   344,    -1,
     297,    -1,   297,   329,    -1,   298,    -1,   298,   329,    -1,
     300,   332,    -1,   300,   329,    -1,   300,   136,    -1,   300,
     136,   332,    -1,   300,    -1,    65,    -1,   300,   332,     1,
      -1,   300,   329,     1,    -1,   349,    -1,   351,   128,   349,
      -1,   351,     1,   128,   349,    -1,   352,   128,   349,    -1,
     352,     1,   128,   349,    -1,     1,   128,   349,    -1,   309,
     128,   349,    -1,   309,     1,   128,   349,    -1,   308,   128,
     349,    -1,   308,     1,   128,   349,    -1,   350,    -1,   351,
     128,   350,    -1,   352,   128,   350,    -1,   352,     1,   128,
     350,    -1,     1,   128,   350,    -1,   309,   128,   350,    -1,
     308,   128,   350,    -1,   308,     1,   128,   350,    -1,   351,
      -1,   351,   128,    51,    -1,   352,   128,    51,    -1,   309,
     128,    51,    -1,   308,   128,    51,    -1,     1,   128,    51,
      -1,   352,    -1,   351,   128,     1,    -1,   352,     1,    -1,
     360,    -1,   325,    -1,   375,    -1,   126,    -1,   132,    -1,
     246,   126,    -1,   378,    -1,   380,    -1,   382,    -1,   359,
      -1,   196,   126,    -1,   195,   126,    -1,   194,   126,    -1,
     361,    -1,   381,    -1,   376,    -1,   379,    -1,   383,    -1,
     382,     1,    -1,   264,    -1,   386,    -1,   386,   123,   244,
     124,    -1,   134,   217,   135,   386,   123,   244,   124,    -1,
     357,    -1,   358,   128,   357,    -1,    -1,    86,   282,   123,
     386,   124,   126,    -1,    86,   282,   123,   386,   132,   358,
     124,   126,    -1,    86,   282,   123,   386,   132,   358,   132,
     358,   124,   126,    -1,    86,   282,   123,   386,   132,   358,
     132,   358,   132,   358,   124,   126,    -1,    86,   282,   123,
     386,     3,   358,   124,   126,    -1,    86,   282,   123,   386,
       3,   358,   132,   358,   124,   126,    -1,    86,   282,   123,
     386,   132,   358,     3,   358,   124,   126,    -1,    86,   123,
     386,   124,   126,    -1,    86,   123,   386,   132,   358,   124,
     126,    -1,    86,   123,   386,   132,   358,   132,   358,   124,
     126,    -1,    86,   123,   386,   132,   358,   132,   358,   132,
     358,   124,   126,    -1,    86,   123,   386,     3,   358,   124,
     126,    -1,    86,   123,   386,     3,   358,   132,   358,   124,
     126,    -1,    86,   123,   386,   132,   358,     3,   358,   124,
     126,    -1,   217,   132,   355,    -1,    52,   266,   132,   355,
      -1,    52,   267,   132,   355,    -1,    52,   132,   355,    -1,
      53,   132,   355,    -1,   217,   132,   364,    -1,    52,   266,
     132,   364,    -1,    52,   267,   132,   364,    -1,    52,   132,
     364,    -1,    53,   132,   364,    -1,   217,   132,   356,    -1,
      52,   266,   132,   356,    -1,    52,   267,   132,   356,    -1,
      52,   132,   356,    -1,    52,   132,    -1,    53,   132,   356,
      -1,    53,   132,    -1,   217,   132,   367,    -1,    52,   266,
     132,   367,    -1,    52,   267,   132,   367,    -1,    52,   132,
     367,    -1,    53,   132,   367,    -1,    80,    -1,    81,    -1,
      53,    -1,    80,    -1,    81,    -1,   299,   126,    -1,   299,
     345,   126,    -1,   171,   126,    -1,   367,   126,    -1,   301,
     126,    -1,   301,   345,   126,    -1,   302,   345,   126,    -1,
     175,   126,    -1,    77,   217,   127,   243,   126,    -1,    31,
      77,   217,   127,   243,   126,    -1,   301,     1,    -1,   299,
       1,    -1,   367,     1,    -1,   172,     1,    -1,   171,     1,
      -1,   299,   346,    -1,   364,    -1,   368,   364,    -1,   369,
     364,    -1,   368,     1,   126,    -1,   367,    -1,   368,   367,
      -1,   355,    -1,   370,   355,    -1,   371,   355,    -1,   356,
      -1,   370,   356,    -1,   371,   356,    -1,   370,   364,    -1,
     371,   364,    -1,   370,   367,    -1,   371,   367,    -1,   370,
      -1,   368,    -1,   368,   370,    -1,   369,   370,    -1,   371,
      -1,   369,    -1,   368,   371,    -1,   369,   371,    -1,   130,
      -1,   376,   129,    -1,   374,   373,    -1,   374,    -1,   374,
     372,    -1,   126,    -1,   246,   126,    -1,   264,   126,    -1,
      54,   123,   246,   124,   355,    -1,    54,   123,   264,   124,
     355,    -1,    54,   123,   246,   124,   355,    64,   355,    -1,
      54,   123,   264,   124,   355,    64,   355,    -1,    55,   123,
     246,   124,   355,    -1,    55,   123,   264,   124,   355,    -1,
      54,   123,   264,    -1,   378,     1,    -1,    56,   123,   246,
     124,   355,    -1,    56,   123,   264,   355,    -1,    56,   123,
     124,   355,    -1,    57,   355,    56,   123,   246,   124,   126,
      -1,    57,   355,    56,   123,   264,   126,    -1,    58,   123,
     377,   377,   124,   355,    -1,    58,   123,   377,   124,   355,
      -1,    58,   123,   377,   377,   246,   124,   355,    -1,    58,
     123,   377,   377,   264,   355,    -1,    58,   123,   124,   355,
      -1,    58,   123,   217,   132,   246,   124,   355,    -1,    58,
     123,   217,   132,   246,   126,   246,   124,   355,    -1,    58,
     123,     1,    -1,    58,   123,   264,     1,    -1,    58,   123,
     377,     1,    -1,    58,   123,   377,   264,     1,    -1,    58,
     123,   377,   377,   264,    -1,    58,   123,   377,   377,   124,
     356,    -1,    58,   123,   377,   377,   246,   124,   356,    -1,
      58,   123,   377,   377,   264,   356,    -1,    57,   355,    56,
     123,   246,   124,    -1,    57,   355,    56,   123,   246,    -1,
      57,   355,    56,   123,   264,    -1,    57,   355,    56,   123,
      -1,    57,   355,    56,    -1,    57,   355,    -1,    57,    -1,
      56,     1,    -1,    56,   123,   124,     1,    -1,    56,   123,
     264,    -1,    56,   123,   246,   124,   356,    -1,    56,   123,
     264,   356,    -1,    59,   217,   126,    -1,    60,   126,    -1,
      61,   126,    -1,    62,   126,    -1,    62,   246,   126,    -1,
      62,   264,   126,    -1,    62,   222,   126,    -1,    62,   223,
     126,    -1,    62,   264,    -1,    62,   223,    -1,    62,    -1,
      59,    -1,   301,   333,   368,   375,    -1,   301,   333,   375,
      -1,   301,   335,   368,   375,    -1,   301,   335,   375,    -1,
     333,   368,   375,    -1,   333,   375,    -1,   301,   333,   368,
     376,    -1,   301,   333,   376,    -1,   301,   335,   368,   376,
      -1,   301,   335,   376,    -1,   333,   368,   376,    -1,   333,
     376,    -1,     5,    -1,   386,     5,    -1,   384,    -1,   214,
      -1,   301,   214,    -1,   365,    -1,    76,   386,    -1,    76,
      31,   386,    -1,    76,   217,   386,    -1,   126,    -1,   362,
     384,    -1,   362,   214,    -1,   362,   365,    -1,   362,    76,
     386,    -1,   362,    76,    31,   386,    -1,   362,    76,   217,
     386,    -1,   362,   132,    -1,    31,   132,    -1,   101,   217,
      -1,   101,   150,    -1,   392,    -1,   362,   392,    -1,   216,
      -1,   301,   216,    -1,   385,    -1,   362,   216,    -1,   362,
     385,    -1,   366,    -1,   362,   366,    -1,   388,    -1,   390,
     388,    -1,   389,   388,    -1,   390,     1,    -1,   389,     1,
      -1,   387,    -1,   390,   387,    -1,   389,   214,    -1,   389,
     362,   214,    -1,   390,    -1,   389,    -1,    -1,   105,   386,
     217,   130,   397,   129,    -1,   105,   386,   150,   130,   397,
     129,    -1,   105,   386,   130,   397,   129,    -1,   300,   217,
     386,   126,    -1,   217,    -1,   122,   217,    -1,   121,   217,
      -1,   394,    -1,   395,   128,   394,    -1,   107,   395,   126,
      -1,   107,   395,   217,   126,    -1,   393,    -1,   396,    -1,
     397,   393,    -1,   397,   396,    -1,   108,   123,   244,   128,
     244,   124,    -1,   106,   123,   386,   128,   217,   124,    -1,
     107,   123,   386,   128,   217,   124,    -1,   105,   123,   386,
     124,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   284,   284,   303,   342,   343,   423,   427,   430,   431,
     432,   471,   473,   478,   483,   488,   490,   495,   497,   502,
     504,   509,   511,   513,   515,   517,   521,   525,   538,   540,
     542,   544,   546,   552,   554,   559,   564,   569,   571,   573,
     578,   579,   583,   584,   595,   599,   600,   602,   607,   608,
     610,   613,   625,   636,   655,   657,   662,   663,   664,   665,
     666,   667,   668,   669,   682,   686,   687,   688,   689,   693,
     694,   695,   696,   697,   698,   699,   703,   705,   710,   712,
     714,   716,   718,   748,   750,   755,   757,   759,   761,   763,
     792,   794,   796,   801,   803,   808,   810,   814,   816,   818,
     820,   825,   828,   831,   834,   899,   901,   906,   908,   910,
     912,   914,   945,   949,   950,   951,   955,   956,   957,   961,
     962,   963,   964,   968,   971,   974,   977,   980,   985,   986,
     988,   990,   992,   994,   999,  1003,  1006,  1009,  1012,  1015,
    1020,  1021,  1023,  1028,  1032,  1034,  1039,  1041,  1046,  1048,
    1053,  1058,  1060,  1065,  1067,  1069,  1071,  1076,  1078,  1080,
    1082,  1087,  1088,  1089,  1090,  1091,  1092,  1093,  1094,  1095,
    1096,  1097,  1099,  1100,  1102,  1106,  1109,  1110,  1111,  1112,
    1113,  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,
    1124,  1125,  1129,  1130,  1131,  1135,  1139,  1140,  1141,  1145,
    1146,  1147,  1148,  1149,  1153,  1154,  1166,  1167,  1171,  1172,
    1173,  1174,  1175,  1176,  1177,  1178,  1182,  1186,  1187,  1191,
    1199,  1200,  1204,  1205,  1206,  1210,  1211,  1215,  1216,  1217,
    1218,  1219,  1220,  1260,  1261,  1265,  1273,  1274,  1282,  1283,
    1285,  1286,  1295,  1296,  1300,  1307,  1314,  1320,  1327,  1333,
    1342,  1349,  1355,  1361,  1367,  1373,  1379,  1390,  1395,  1396,
    1401,  1402,  1403,  1407,  1411,  1412,  1413,  1414,  1415,  1416,
    1417,  1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,
    1439,  1440,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,
    1449,  1450,  1451,  1452,  1453,  1455,  1456,  1457,  1458,  1459,
    1461,  1462,  1466,  1470,  1474,  1475,  1479,  1481,  1482,  1483,
    1484,  1485,  1486,  1487,  1488,  1489,  1491,  1492,  1493,  1494,
    1495,  1496,  1497,  1498,  1525,  1526,  1527,  1528,  1532,  1533,
    1534,  1535,  1536,  1540,  1541,  1542,  1543,  1545,  1546,  1547,
    1548,  1551,  1552,  1554,  1558,  1559,  1568,  1569,  1570,  1571,
    1572,  1573,  1574,  1575,  1579,  1580,  1584,  1585,  1586,  1587,
    1588,  1589,  1590,  1594,  1595,  1596,  1597,  1598,  1602,  1603,
    1604,  1605,  1606,  1610,  1618,  1619,  1620,  1621,  1622,  1623,
    1624,  1625,  1626,  1630,  1631,  1632,  1633,  1634,  1636,  1637,
    1638,  1639,  1643,  1644,  1645,  1647,  1648,  1652,  1653,  1654,
    1656,  1657,  1661,  1662,  1663,  1665,  1666,  1670,  1671,  1672,
    1676,  1677,  1678,  1682,  1683,  1684,  1685,  1686,  1688,  1689,
    1690,  1691,  1693,  1694,  1695,  1696,  1698,  1699,  1700,  1701,
    1705,  1706,  1707,  1708,  1709,  1711,  1712,  1713,  1714,  1718,
    1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,
    1732,  1733,  1734,  1735,  1739,  1740,  1741,  1745,  1746,  1747,
    1748,  1750,  1751,  1753,  1754,  1759,  1761,  1766,  1794,  1795,
    1796,  1797,  1799,  1800,  1801,  1802,  1804,  1805,  1809,  1810,
    1819,  1820,  1824,  1825,  1826,  1827,  1828,  1829,  1830,  1834,
    1835,  1839,  1843,  1847,  1854,  1855,  1856,  1857,  1858,  1862,
    1863,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1916,  1917,
    1918,  1919,  1920,  1927,  1928,  1929,  1930,  1934,  1935,  1936,
    1938,  1939,  1943,  1944,  1945,  1947,  1948,  1952,  1953,  1954,
    1956,  1957,  1961,  1962,  1963,  1967,  1968,  1969,  1973,  1974,
    1975,  1976,  1977,  1978,  1979,  1980,  1981,  1983,  1984,  1985,
    1986,  1987,  1988,  1989,  1990,  1992,  1993,  1994,  1995,  1997,
    1998,  1999,  2000,  2002,  2010,  2014,  2019,  2026,  2027,  2031,
    2036,  2037,  2041,  2042,  2043,  2044,  2050,  2051,  2052,  2056,
    2057,  2058,  2059,  2063,  2065,  2069,  2070,  2071,  2072,  2073,
    2074,  2075,  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2089,
    2090,  2091,  2095,  2096,  2097,  2101,  2105,  2106,  2110,  2111,
    2112,  2116,  2117,  2119,  2120,  2121,  2122,  2123,  2125,  2126,
    2127,  2128,  2129,  2131,  2132,  2136,  2137,  2141,  2142,  2143,
    2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,  2157,
    2158,  2160,  2161,  2162,  2163,  2164,  2166,  2167,  2168,  2169,
    2173,  2174,  2178,  2179,  2183,  2187,  2188,  2189,  2194,  2195,
    2199,  2200,  2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,
    2209,  2210,  2211,  2212,  2213,  2214,  2215,  2216,  2217,  2218,
    2219,  2220,  2221,  2222,  2223,  2224,  2228,  2229,  2230,  2231,
    2232,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2240,  2241,
    2242,  2243,  2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,
    2257,  2259,  2261,  2263,  2265,  2267,  2269,  2271,  2273,  2275,
    2280,  2281,  2285,  2291,  2297,  2304,  2314,  2315,  2316,  2317,
    2321,  2322,  2323,  2325,  2326,  2327,  2329,  2330,  2331,  2335,
    2339,  2347,  2356,  2365,  2366,  2368,  2369,  2373,  2380,  2387,
    2390,  2403,  2417,  2420,  2422,  2424,  2429,  2430,  2434,  2435,
    2436,  2437,  2438,  2439,  2440,  2441,  2445,  2446,  2447,  2448,
    2449,  2450,  2451,  2452,  2453,  2454,  2458,  2459,  2460,  2461,
    2462,  2463,  2464,  2465,  2466,  2467,  2471,  2472,  2473,  2474,
    2475,  2476,  2477,  2478,  2479,  2480,  2481,  2482,  2486,  2487,
    2488,  2489,  2490,  2491,  2492,  2493,  2494,  2495,  2499,  2500,
    2504,  2505,  2506,  2507,  2508,  2509,  2510,  2511,  2512,  2514,
    2516,  2524,  2534,  2535,  2539,  2540,  2541,  2542,  2543,  2544,
    2545,  2546,  2547,  2555,  2564,  2565,  2566,  2567,  2568,  2569,
    2570,  2571,  2572,  2573,  2574,  2575,  2576,  2584,  2593,  2594,
    2595,  2596,  2597,  2598,  2599,  2600,  2601,  2602,  2603,  2604,
    2605,  2613,  2622,  2623,  2627,  2628,  2629,  2630,  2631,  2635,
    2636,  2643,  2645,  2654,  2663,  2672,  2681,  2682,  2683,  2684,
    2688,  2689,  2690,  2691,  2692,  2693,  2694,  2695,  2696,  2700,
    2704,  2705,  2706,  2707,  2708,  2713,  2722,  2731,  2740,  2754,
    2755,  2760,  2764,  2765,  2766,  2767,  2768,  2773,  2782,  2791,
    2800,  2814,  2815,  2864,  2865,  2866,  2867,  2879,  2880,  2881,
    2886,  2887,  2888,  2889,  2890,  2894,  2895,  2899,  2900,  2901,
    2905,  2906,  2910,  2911,  2912,  2913,  2914,  2915,  2916,  2917,
    2918,  2919,  2920,  2921,  2922,  2923,  2924,  2925,  2929,  2930,
    2931,  2932,  2933,  2934,  2935,  2936,  2940,  2941,  2942,  2943,
    2947,  2948,  2949,  2950,  2951,  2955,  2956,  2957,  2958,  2959,
    2963,  2964,  2966,  2968,  2970,  2975,  2976,  2978,  2980,  2985,
    2986,  2987,  2988,  2992,  2993,  2994,  2995,  2999,  3000,  3001,
    3002,  3006,  3007,  3008,  3009,  3013,  3014,  3015,  3016,  3020,
    3021,  3022,  3039,  3040,  3041,  3042,  3055,  3072,  3073,  3078,
    3079,  3083,  3084,  3085,  3086,  3089,  3090,  3094,  3095,  3096,
    3100,  3104,  3108,  3109,  3110,  3111,  3112,  3121,  3130,  3131,
    3132,  3133,  3137,  3138,  3142,  3143,  3148,  3149,  3150,  3151,
    3152,  3153,  3172,  3173,  3177,  3178,  3179,  3180,  3181,  3182,
    3184,  3185,  3186,  3187,  3191,  3192,  3193,  3194,  3195,  3197,
    3198,  3199,  3203,  3204,  3205,  3206,  3207,  3208,  3212,  3213,
    3214,  3219,  3220,  3221,  3222,  3223,  3224,  3225,  3226,  3227,
    3228,  3229,  3230,  3231,  3235,  3236,  3237,  3238,  3239,  3240,
    3241,  3245,  3246,  3247,  3251,  3252,  3253,  3257,  3258,  3259,
    3260,  3262,  3263,  3264,  3266,  3267,  3268,  3269,  3271,  3272,
    3273,  3277,  3278,  3279,  3280,  3281,  3283,  3284,  3285,  3286,
    3287,  3291,  3292,  3293,  3294,  3295,  3296,  3297,  3299,  3300,
    3301,  3302,  3303,  3307,  3308,  3309,  3313,  3314,  3318,  3319,
    3320,  3321,  3325,  3326,  3327,  3329,  3330,  3331,  3335,  3339,
    3340,  3342,  3343,  3344,  3348,  3349,  3350,  3351,  3355,  3356,
    3360,  3361,  3362,  3366,  3367,  3368,  3369,  3370,  3371,  3372,
    3376,  3377,  3378,  3379,  3383,  3384,  3385,  3386,  3390,  3394,
    3398,  3400,  3403,  3409,  3410,  3411,  3415,  3416,  3417,  3418,
    3419,  3420,  3424,  3425,  3429,  3430,  3431,  3433,  3434,  3436,
    3437,  3438,  3439,  3440,  3442,  3443,  3447,  3448,  3449,  3450,
    3454,  3455,  3456,  3457,  3459,  3460,  3461,  3462,  3463,  3464,
    3465,  3468,  3472,  3473,  3477,  3478,  3482,  3483,  3484,  3485,
    3486,  3487,  3488,  3489,  3493,  3494,  3495,  3496,  3502,  3503,
    3505,  3506,  3509,  3510,  3513,  3514,  3515,  3516,  3517,  3518,
    3522,  3523,  3535,  3536,  3539,  3542,  3544,  3545,  3546,  3556,
    3558,  3559,  3561,  3562,  3563,  3564,  3574,  3575,  3576,  3577,
    3578,  3579,  3583,  3584,  3593,  3595,  3596,  3598,  3600,  3604,
    3605,  3606,  3607,  3608,  3612,  3613,  3614,  3616,  3621,  3622,
    3623,  3627,  3628,  3629,  3633,  3637,  3638,  3639,  3643,  3644,
    3648,  3649,  3653,  3654,  3655,  3656,  3660,  3664,  3668,  3672
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "THREAD",
  "WIDE_STRING_LITERAL", "BUILTIN_OFFSETOF", "'*'", "'<'", "'>'", "'('",
  "')'", "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'", "':'", "'$'",
  "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'", "'|'",
  "'?'", "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
      42,    60,    62,    40,    41,   126,    59,    61,    44,   125,
     123,    46,    58,    36,    91,    93,    38,    43,    45,    33,
      47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   145,   146,   146,   147,   147,   148,   149,   150,   150,
     150,   151,   151,   152,   153,   154,   154,   155,   155,   156,
     156,   157,   157,   157,   157,   157,   157,   157,   158,   158,
     158,   158,   158,   159,   159,   160,   161,   162,   162,   162,
     163,   163,   164,   164,   164,   165,   165,   165,   166,   166,
     166,   166,   166,   166,   167,   167,   168,   168,   168,   168,
     168,   168,   168,   168,   168,   169,   169,   169,   169,   170,
     170,   170,   170,   170,   170,   170,   171,   171,   172,   172,
     172,   172,   172,   173,   173,   174,   174,   174,   174,   174,
     175,   175,   175,   176,   176,   177,   177,   177,   177,   177,
     177,   177,   177,   177,   177,   178,   178,   179,   179,   179,
     179,   179,   180,   181,   181,   181,   182,   182,   182,   183,
     183,   183,   183,   184,   184,   184,   184,   184,   185,   185,
     185,   185,   185,   185,   186,   187,   187,   187,   187,   187,
     188,   188,   188,   189,   190,   190,   191,   191,   192,   192,
     193,   194,   194,   195,   195,   195,   195,   196,   196,   196,
     196,   197,   197,   197,   197,   197,   197,   197,   197,   197,
     197,   197,   197,   197,   197,   198,   198,   198,   198,   198,
     198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
     198,   198,   198,   198,   198,   198,   199,   199,   199,   200,
     200,   200,   200,   200,   201,   201,   202,   202,   203,   203,
     203,   203,   203,   203,   203,   203,   204,   205,   205,   206,
     207,   207,   208,   208,   208,   209,   209,   210,   210,   210,
     210,   210,   210,   211,   211,   212,   213,   213,   213,   213,
     213,   213,   213,   213,   214,   214,   214,   214,   214,   214,
     215,   216,   216,   216,   216,   216,   216,   217,   218,   218,
     219,   219,   219,   220,   221,   221,   221,   221,   221,   221,
     221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
     221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
     221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
     221,   221,   222,   223,   224,   224,   225,   225,   225,   225,
     225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
     225,   225,   225,   225,   226,   226,   226,   226,   227,   227,
     227,   227,   227,   228,   228,   228,   228,   228,   228,   228,
     228,   228,   228,   228,   229,   229,   230,   230,   230,   230,
     230,   230,   230,   230,   231,   231,   232,   232,   232,   232,
     232,   232,   232,   233,   233,   233,   233,   233,   234,   234,
     234,   234,   234,   235,   236,   236,   236,   236,   236,   236,
     236,   236,   236,   237,   237,   237,   237,   237,   237,   237,
     237,   237,   238,   238,   238,   238,   238,   239,   239,   239,
     239,   239,   240,   240,   240,   240,   240,   241,   241,   241,
     242,   242,   242,   243,   243,   243,   243,   243,   243,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     246,   246,   246,   246,   247,   247,   247,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   249,   249,
     249,   249,   249,   249,   249,   249,   249,   249,   250,   250,
     251,   251,   252,   252,   252,   252,   252,   252,   252,   253,
     253,   253,   253,   253,   254,   254,   254,   254,   254,   255,
     255,   255,   255,   255,   255,   255,   255,   255,   256,   256,
     256,   256,   256,   256,   256,   256,   256,   257,   257,   257,
     257,   257,   258,   258,   258,   258,   258,   259,   259,   259,
     259,   259,   260,   260,   260,   261,   261,   261,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   263,   263,   263,
     263,   263,   264,   264,   264,   264,   264,   264,   264,   265,
     265,   265,   265,   266,   267,   268,   268,   268,   268,   268,
     268,   268,   269,   269,   269,   269,   269,   269,   269,   270,
     270,   270,   271,   271,   271,   272,   273,   273,   274,   274,
     274,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   276,   276,   277,   277,   277,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     279,   279,   280,   280,   281,   282,   282,   282,   283,   283,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     287,   287,   288,   288,   288,   288,   289,   289,   289,   289,
     290,   290,   290,   290,   290,   290,   290,   290,   290,   291,
     292,   292,   293,   294,   294,   294,   294,   295,   295,   295,
     295,   295,   295,   295,   295,   295,   296,   296,   297,   297,
     297,   297,   297,   297,   297,   297,   298,   298,   298,   298,
     298,   298,   298,   298,   298,   298,   299,   299,   299,   299,
     299,   299,   299,   299,   299,   299,   300,   300,   300,   300,
     300,   300,   300,   300,   300,   300,   300,   300,   301,   301,
     301,   301,   301,   301,   301,   301,   301,   301,   302,   302,
     303,   303,   303,   303,   303,   303,   303,   303,   303,   303,
     303,   303,   304,   304,   305,   305,   305,   305,   305,   305,
     305,   305,   305,   305,   306,   306,   306,   306,   306,   306,
     306,   306,   306,   306,   306,   306,   306,   306,   307,   307,
     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
     307,   307,   308,   308,   309,   309,   309,   309,   309,   310,
     310,   310,   310,   310,   310,   310,   310,   310,   310,   310,
     311,   311,   311,   311,   311,   311,   311,   311,   311,   312,
     313,   313,   313,   313,   313,   314,   314,   314,   314,   315,
     315,   316,   317,   317,   317,   317,   317,   318,   318,   318,
     318,   319,   319,   320,   320,   320,   320,   321,   321,   321,
     322,   322,   322,   322,   322,   323,   323,   324,   324,   324,
     325,   325,   326,   326,   326,   326,   326,   326,   326,   326,
     326,   326,   326,   326,   326,   326,   326,   326,   327,   327,
     327,   327,   327,   327,   327,   327,   328,   328,   328,   328,
     329,   329,   329,   329,   329,   330,   330,   330,   330,   330,
     331,   331,   331,   331,   331,   332,   332,   332,   332,   333,
     333,   333,   333,   334,   334,   334,   334,   335,   335,   335,
     335,   336,   336,   336,   336,   337,   337,   337,   337,   338,
     338,   338,   339,   339,   339,   339,   339,   340,   340,   341,
     341,   342,   342,   342,   342,   342,   342,   343,   343,   343,
     344,   344,   345,   345,   345,   345,   345,   345,   346,   346,
     346,   346,   347,   347,   348,   348,   349,   349,   349,   349,
     349,   349,   350,   350,   351,   351,   351,   351,   351,   351,
     351,   351,   351,   351,   352,   352,   352,   352,   352,   352,
     352,   352,   353,   353,   353,   353,   353,   353,   354,   354,
     354,   355,   355,   355,   355,   355,   355,   355,   355,   355,
     355,   355,   355,   355,   356,   356,   356,   356,   356,   356,
     356,   357,   357,   357,   358,   358,   358,   359,   359,   359,
     359,   359,   359,   359,   359,   359,   359,   359,   359,   359,
     359,   360,   360,   360,   360,   360,   360,   360,   360,   360,
     360,   361,   361,   361,   361,   361,   361,   361,   361,   361,
     361,   361,   361,   362,   362,   362,   363,   363,   364,   364,
     364,   364,   365,   365,   365,   365,   365,   365,   366,   367,
     367,   367,   367,   367,   368,   368,   368,   368,   369,   369,
     370,   370,   370,   371,   371,   371,   371,   371,   371,   371,
     372,   372,   372,   372,   373,   373,   373,   373,   374,   375,
     376,   376,   376,   377,   377,   377,   378,   378,   378,   378,
     378,   378,   379,   379,   380,   380,   380,   380,   380,   380,
     380,   380,   380,   380,   380,   380,   381,   381,   381,   381,
     381,   381,   381,   381,   381,   381,   381,   381,   381,   381,
     381,   381,   381,   381,   381,   381,   382,   382,   382,   382,
     382,   382,   382,   382,   383,   383,   383,   383,   384,   384,
     384,   384,   384,   384,   385,   385,   385,   385,   385,   385,
     386,   386,   387,   387,   387,   387,   387,   387,   387,   387,
     387,   387,   387,   387,   387,   387,   387,   387,   387,   387,
     387,   387,   388,   388,   388,   388,   388,   388,   388,   389,
     389,   389,   389,   389,   390,   390,   390,   390,   391,   391,
     391,   392,   392,   392,   393,   394,   394,   394,   395,   395,
     396,   396,   397,   397,   397,   397,   398,   399,   400,   401
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     1,     3,     3,     1,     1,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     2,     5,     6,     6,     2,     5,     1,     1,
       1,     4,     1,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     1,     3,     3,     1,     5,
       5,     5,     5,     4,     4,     4,     4,     5,     5,     5,
       5,     4,     4,     4,     4,     5,     5,     5,     5,     5,
       5,     5,     5,     3,     3,     2,     2,     1,     3,     3,
       3,     3,     1,     2,     3,     3,     2,     2,     2,     1,
       2,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     3,     2,     1,     2,     2,     2,     4,
       4,     3,     3,     4,     5,     4,     6,     6,     4,     5,
       4,     6,     6,     5,     5,     2,     2,     2,     5,     3,
       5,     6,     5,     7,     7,     8,     8,     7,     7,     3,
       3,     3,     4,     3,     5,     5,     6,     7,     6,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     4,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     4,     4,     1,
       1,     2,     2,     3,     5,     2,     3,     5,     5,     5,
       1,     3,     2,     2,     3,     3,     2,     3,     3,     4,
       3,     3,     3,     3,     3,     3,     4,     4,     4,     1,
       1,     4,     3,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     4,     5,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     3,     3,     1,     3,     3,     3,     3,     1,
       1,     1,     4,     4,     4,     3,     4,     4,     4,     3,
       1,     3,     4,     3,     4,     4,     4,     4,     3,     2,
       3,     3,     3,     3,     2,     2,     2,     3,     4,     1,
       1,     2,     3,     3,     3,     3,     2,     2,     2,     3,
       4,     1,     1,     1,     1,     1,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     1,     2,     3,
       6,     5,     3,     4,     2,     3,     3,     3,     3,     4,
       4,     4,     2,     3,     3,     3,     4,     4,     3,     4,
       2,     3,     3,     3,     4,     4,     1,     2,     2,     3,
       1,     1,     2,     2,     3,     1,     1,     2,     2,     3,
       1,     2,     3,     2,     2,     1,     2,     3,     2,     1,
       2,     3,     3,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       3,     4,     1,     4,     2,     5,     3,     1,     1,     1,
       1,     1,     1,     3,     3,     2,     2,     1,     1,     3,
       2,     3,     1,     3,     3,     3,     3,     3,     1,     2,
       3,     3,     1,     2,     1,     2,     2,     2,     2,     3,
       1,     1,     3,     3,     1,     3,     4,     3,     4,     3,
       3,     4,     3,     4,     1,     3,     3,     4,     3,     3,
       3,     4,     1,     3,     3,     3,     3,     3,     1,     3,
       2,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     2,     2,     2,     1,     1,     1,     1,     1,     2,
       1,     1,     4,     7,     1,     3,     0,     6,     8,    10,
      12,     8,    10,    10,     5,     7,     9,    11,     7,     9,
       9,     3,     4,     4,     3,     3,     3,     4,     4,     3,
       3,     3,     4,     4,     3,     2,     3,     2,     3,     4,
       4,     3,     3,     1,     1,     1,     1,     1,     2,     3,
       2,     2,     2,     3,     3,     2,     5,     6,     2,     2,
       2,     2,     2,     2,     1,     2,     2,     3,     1,     2,
       1,     2,     2,     1,     2,     2,     2,     2,     2,     2,
       1,     1,     2,     2,     1,     1,     2,     2,     1,     2,
       2,     1,     2,     1,     2,     2,     5,     5,     7,     7,
       5,     5,     3,     2,     5,     4,     4,     7,     6,     6,
       5,     7,     6,     4,     7,     9,     3,     4,     4,     5,
       5,     6,     7,     6,     6,     5,     5,     4,     3,     2,
       1,     2,     4,     3,     5,     4,     3,     2,     2,     2,
       3,     3,     3,     3,     2,     2,     1,     1,     4,     3,
       4,     3,     3,     2,     4,     3,     4,     3,     3,     2,
       1,     2,     1,     1,     2,     1,     2,     3,     3,     1,
       2,     2,     2,     3,     4,     4,     2,     2,     2,     2,
       1,     2,     1,     2,     1,     2,     2,     1,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     1,     1,
       0,     6,     6,     5,     4,     1,     2,     2,     1,     3,
       3,     4,     1,     1,     2,     2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1290,   257,     6,   592,   593,   594,   596,   597,   661,   662,
     663,   664,   665,   667,   670,   671,   668,   669,   655,   656,
     660,   666,   756,   757,   605,  1135,   235,   679,   913,   914,
       0,     0,   917,  1133,  1134,   680,   681,   672,     0,     0,
       0,     0,     0,   918,   919,   683,   682,   684,   685,   598,
     595,   956,     0,  1259,   804,   675,     8,     4,     0,     0,
       0,  1253,     0,  1272,   880,   798,     0,   674,     0,   650,
     652,   806,   808,   657,   800,   802,   739,   673,     0,     0,
     651,   653,     0,     0,     0,     0,     0,   979,   654,     0,
     915,     0,     0,     0,  1255,  1277,  1252,  1274,  1284,  1279,
       0,     0,     0,  1270,     0,  1267,  1250,     0,     0,  1256,
       0,     0,     0,     0,  1269,  1268,     0,   658,   957,   654,
     958,   871,   870,   880,   912,   869,   899,   970,     0,   911,
     975,     0,     0,     0,     0,     0,     0,  1145,     0,   237,
     236,     0,     0,   245,     0,   244,     2,     3,     0,     5,
       0,   607,   606,     0,     0,   627,     0,     0,     0,     0,
     743,     0,   723,   722,     0,  1148,   594,   664,   665,  1142,
     805,     8,  1254,  1273,   880,   799,   807,   809,   801,   803,
     979,   987,   654,     0,     0,  1018,     0,     0,     0,  1028,
       0,     0,   871,     0,   870,     0,     0,   889,     0,     0,
     585,   586,   587,   589,   590,  1041,   591,   588,   894,   792,
     864,   786,     0,   796,     0,   788,   790,   739,   794,     0,
       0,  1040,     0,     0,  1044,  1054,     0,     0,     0,     0,
       0,     0,   980,     0,   687,   688,   689,   690,   691,   693,
     696,   697,   694,   695,   686,   692,   709,   698,     0,     0,
     703,   702,   704,   705,  1178,   701,     0,     0,   776,   700,
     782,   778,   780,   784,   699,     0,  1154,     0,     0,     0,
       0,  1243,  1249,   594,     0,  1266,  1261,  1275,     0,  1262,
    1278,  1260,  1276,  1271,  1283,  1286,     0,     0,     0,     0,
       0,  1281,  1282,  1285,  1280,     1,     0,  1257,  1258,  1251,
       0,     0,   458,   263,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   273,     0,   347,     0,   350,     0,     0,   346,
     348,   349,   351,     0,   265,     0,   264,   306,   272,   271,
     258,   457,     0,   344,   354,     0,   356,   363,   368,   374,
       0,   383,   392,   397,   402,   407,   410,   413,   430,     0,
     479,   478,   480,   482,   489,   494,   499,   508,   517,   522,
     527,   532,   535,   538,     0,   260,   296,   297,   298,   299,
       0,     0,     0,     0,     0,   659,   959,     0,   901,     0,
     906,     0,     0,     0,     0,     0,     0,     0,   912,   971,
     976,     0,   881,   973,   883,   978,   974,   672,     4,   229,
     228,   227,   233,     0,   264,   354,   219,   480,     0,   206,
     249,     0,     0,   248,   255,     0,     0,  1136,  1137,     0,
     168,     0,   169,   170,     0,     0,     0,     0,     0,   172,
     246,     0,     0,     0,     0,    29,    31,   163,   175,   188,
       0,   187,     0,   116,   119,     0,   195,   128,     0,   164,
     140,     0,   167,   183,   196,   199,     0,     0,   264,     0,
       0,   176,     0,   983,   654,     0,    12,    18,     0,   811,
     810,   818,   812,     0,   814,   816,   739,   823,   822,   250,
     256,   247,     0,     0,   239,   238,   640,   599,   602,   639,
     643,   629,     0,     0,     0,   222,   223,   224,   225,     0,
     217,     0,   752,   745,     0,     0,   742,   749,   744,     0,
       0,   755,   746,     0,     0,   725,   724,     0,     0,     0,
       0,     0,   980,   988,     0,  1020,     0,     0,  1239,  1245,
       0,  1241,  1247,  1029,  1143,     0,     0,     0,  1144,   888,
       0,   264,   583,   584,     0,     0,     0,     0,   607,   606,
     608,     0,   726,     0,     0,   664,     0,     0,  1038,   793,
       8,   880,   787,   797,   789,   791,   795,   912,   869,   654,
     961,   960,     0,     0,     0,   893,     0,     0,   892,     0,
       0,     0,  1070,     0,   890,   891,   981,     0,   982,     0,
       0,  1152,  1140,  1151,    76,  1149,   690,   691,  1138,   880,
     777,   783,   779,   781,   785,   654,     0,  1153,  1150,  1141,
       0,  1155,     0,  1242,  1248,  1156,     0,     0,     0,     0,
       0,     0,     0,     0,  1237,     0,     0,     0,   698,     0,
       0,     0,   157,  1074,  1075,   701,     0,     0,     0,   264,
       0,   354,     0,     0,   480,   567,   572,     0,  1072,  1160,
    1163,  1080,  1071,  1084,     0,     0,     0,     0,  1182,  1180,
    1073,  1086,     0,  1087,  1078,  1085,     0,  1088,  1179,     0,
       0,  1263,   880,     0,     0,     0,  1273,     0,   869,   987,
     654,     0,     0,     0,     0,  1249,  1287,     0,     0,   413,
       0,     0,   916,     0,   337,   472,     0,   333,   468,   334,
     469,     0,   858,   848,   856,   850,   852,   854,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     341,   476,     0,   274,     0,     0,     0,   762,   758,   760,
     764,  1032,     0,   261,     0,   301,   302,     0,   325,     0,
     324,     0,   460,    93,     0,   270,   459,     0,   314,   315,
       0,     0,     0,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   439,     0,     0,   336,   471,   335,   470,
       0,     0,     0,     0,     0,     0,     0,   375,   500,     0,
       0,   373,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   676,     0,   322,   323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     677,   678,     0,     0,     0,  1302,  1303,     0,     0,     0,
     875,     0,     0,     0,   879,     0,     0,     0,   905,   904,
     902,   903,   912,   971,   976,   882,   884,   998,    10,     9,
       0,     0,     0,   654,   960,   207,     0,     0,   264,   206,
       0,     0,   830,   824,   826,   828,     0,     0,     0,    16,
      20,     0,   185,   184,   186,     0,     0,     0,     0,   347,
       0,   264,     0,    26,     0,    21,    28,    24,     0,    25,
      23,    22,    30,    32,   190,    83,   191,   122,   162,     0,
       0,     0,     0,   132,     0,     0,   134,     0,     0,   143,
     161,   200,   197,   202,   201,   198,   203,   115,     0,     0,
       0,   880,   720,   177,   995,     0,   991,   654,     0,    11,
      17,   710,   896,  1040,     0,     0,     0,   984,     0,     0,
     173,   165,   192,   181,     0,   180,     0,   166,   880,   179,
       0,   607,   606,   819,   813,   815,   817,     0,     0,     0,
     604,   642,     0,     0,     7,   212,   208,   741,     0,     0,
       0,     0,  1017,  1024,  1025,  1026,    64,    53,    92,    39,
      38,    57,    69,    45,    48,     0,    74,    56,     0,     0,
       0,  1008,  1010,     0,  1007,  1009,     0,    41,    44,   912,
     981,   972,   989,   977,   998,   990,     0,   999,  1002,  1019,
    1021,  1238,  1244,  1240,  1246,  1023,  1030,  1027,  1031,   887,
     885,   886,  1067,  1049,  1058,   612,   611,     0,     0,   458,
     727,     0,     0,   458,   728,     0,     0,     0,   942,   880,
       0,     0,   654,   960,     0,     0,     0,   934,     0,     0,
       0,     0,     0,  1039,   963,     0,     0,   962,  1043,  1042,
       0,   863,  1066,   866,  1052,  1060,     0,   862,  1065,   865,
    1050,  1059,     0,  1069,  1063,   867,  1045,  1055,     0,  1064,
     868,  1047,  1056,   920,   921,   924,   923,   922,     0,   925,
     927,     0,     0,     0,     0,    77,     0,  1139,  1157,     0,
       0,     0,     0,     0,     0,  1221,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   264,     0,  1072,  1219,
    1077,  1079,     0,     0,  1227,  1228,  1229,     0,  1235,     0,
       0,     0,     0,     0,     0,   158,   144,  1083,  1082,  1081,
       0,     0,     0,   573,     0,  1076,     0,     0,     0,     0,
     453,     0,     0,   458,     0,     0,     0,     0,  1161,  1164,
    1166,     0,  1162,  1165,  1167,     0,  1193,  1089,  1264,  1265,
     237,   236,     0,     0,     0,   988,     0,     0,  1245,     0,
    1247,  1248,     0,     0,  1146,     0,     0,   770,   264,   772,
     766,   768,   774,  1034,     0,     0,     0,     0,     0,     0,
     859,   849,   857,   851,   853,   855,   654,   966,   965,     0,
     844,   834,   842,   836,   838,   840,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,   763,   759,   761,   765,  1033,     0,     0,
     458,     0,     0,     0,   105,     0,   300,   458,     0,     0,
      94,   458,     0,     0,   461,   313,   309,   329,   463,   464,
     328,   465,   312,     0,     0,   435,   431,   303,   357,   483,
     358,   484,   359,   485,   364,   490,   365,   491,   369,   495,
     370,   496,   377,   502,   378,   503,   376,   501,   388,   513,
     384,   509,   389,   514,   385,   510,   395,   520,   393,   518,
     400,   525,   398,   523,   405,   530,   403,   528,   408,   533,
     411,   536,   563,     0,   579,     0,     0,     0,     0,   437,
     433,   462,   321,   318,     0,   466,   467,   320,     0,     0,
     436,   432,   360,   486,   361,   487,   362,   488,   366,   492,
     367,   493,   371,   497,   372,   498,   381,   506,   382,   507,
     379,   504,   380,   505,   390,   515,   386,   511,   391,   516,
     387,   512,   396,   521,   394,   519,   401,   526,   399,   524,
     406,   531,   404,   529,   409,   534,   412,   537,   564,     0,
       0,     0,     0,   438,   434,     0,     0,  1295,  1298,     0,
       0,  1293,  1304,  1305,     0,     0,   874,   872,   873,   878,
     876,   877,   234,   232,   231,   230,   264,   654,   963,   241,
       0,   207,   240,   127,     0,   125,   831,   825,   827,   829,
       0,   654,     0,    15,    19,     0,   182,   995,   654,     0,
     139,     0,   137,   831,     0,   264,   654,     0,    27,    84,
     117,   120,   118,   121,   129,   130,   131,   133,   141,   142,
     114,   112,   113,    13,   712,   715,     0,     0,   908,  1040,
       0,     0,     0,   996,   992,     0,     0,   711,   880,   897,
     985,   986,   880,   193,   194,   178,     0,     0,     0,     0,
     600,   601,   603,     0,     0,   632,   628,     0,     0,     0,
       0,     0,   226,   218,   216,     0,     0,     0,    36,    37,
      75,    54,     0,    55,     0,    63,    61,    72,    67,    73,
      60,    90,    39,    70,    62,    91,    59,    71,    68,     0,
      58,     0,   690,    33,    35,    34,  1011,  1012,     0,   620,
     610,     0,   615,   609,     0,   458,   729,     0,     0,     0,
     960,     0,   932,   943,   944,   937,   935,   936,     0,   964,
     945,     0,     0,   938,     0,     0,     0,  1053,  1061,  1040,
    1051,  1046,  1048,  1057,   931,     0,     0,     0,   928,   706,
     707,   708,   458,     0,     0,  1114,  1124,  1119,     0,     0,
       0,  1115,  1126,  1120,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1218,  1206,     0,  1183,   264,     0,
       0,     0,  1226,  1232,  1233,  1230,  1231,     0,     0,     0,
       0,   145,  1111,  1121,  1116,     0,   159,   570,   568,     0,
       0,     0,   451,   574,   571,   569,   452,   575,     0,   989,
    1244,  1246,  1147,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   771,   773,   767,   769,   775,  1035,     0,
     293,   291,     0,     0,   950,   654,     0,     0,     0,     0,
       0,     0,   968,     0,   967,     0,     0,     0,   845,   835,
     843,   837,   839,   841,     0,   267,     0,   266,   295,     0,
       0,     0,     0,     0,     0,  1309,     0,     0,     0,     0,
       0,   355,   481,   262,   108,   106,   327,   326,    99,   103,
     310,     0,   311,   307,   308,   580,     0,     0,     0,     0,
       0,     0,   319,   316,   317,     0,     0,     0,     0,  1297,
    1296,  1300,     0,     0,     0,  1292,  1291,     0,   960,   218,
       0,     0,   123,   126,     0,     0,     0,     0,     0,   996,
       0,   135,   138,     0,    14,   458,     0,     0,   721,     0,
     880,   909,   997,   993,   994,   713,   716,   898,   174,   820,
       0,   243,   242,     0,   631,     0,   213,   214,   204,   209,
     210,   220,     0,     0,    51,    46,    49,    52,    47,    50,
      37,    43,    40,    42,     0,     0,  1015,  1016,   619,     0,
     614,     0,   963,   962,   933,   946,   947,   940,   939,   941,
    1037,  1036,     0,   930,   929,    79,  1112,  1122,  1117,     0,
    1113,  1123,  1118,     0,     0,     0,     0,     0,  1222,  1196,
       0,     0,  1195,  1225,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1203,     0,  1184,  1207,  1185,
    1208,     0,     0,     0,  1096,   916,  1096,     0,     0,   155,
       0,     0,     0,   160,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   473,   292,   860,     0,   965,     0,
     948,   951,   952,   277,   278,     0,   969,   953,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   268,   281,
     282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     477,     0,   331,   330,   455,   581,   422,   555,   414,   539,
     426,   559,   418,   547,   456,   582,   423,   556,   415,   540,
     427,   560,   419,   548,   424,   557,   416,   541,   428,   561,
     420,   549,   425,   558,   417,   542,   429,   562,   421,   550,
    1299,  1301,  1294,   832,     0,   124,   150,   997,     0,   136,
      86,   910,     0,     0,   821,     0,     0,     0,     0,     0,
       0,   205,     0,   221,     0,     0,  1013,  1014,  1003,     0,
       0,     0,     0,   926,  1186,  1187,  1190,  1191,  1194,  1224,
       0,     0,     0,     0,     0,     0,     0,  1200,  1209,     0,
       0,     0,     0,  1094,     0,  1091,  1104,     0,  1096,     0,
    1096,     0,     0,     0,     0,   475,   474,   967,   949,   861,
     954,   955,   275,   276,   846,   285,   286,     0,     0,     0,
       0,   279,   280,   289,   290,     0,     0,   294,  1307,  1308,
    1306,   343,   833,     0,   714,   717,   719,   718,     0,     0,
     215,   211,     0,  1000,  1005,     0,     0,     0,     0,     0,
       0,     0,  1214,  1198,     0,     0,  1199,  1211,     0,  1202,
    1213,     0,     0,     0,  1096,     0,  1096,     0,  1096,     0,
    1097,     0,     0,     0,   148,     0,   153,     0,   156,     0,
     847,   283,   284,     0,   287,   288,   171,  1001,  1188,  1189,
       0,     0,  1197,  1204,     0,  1201,  1212,     0,  1108,  1095,
       0,     0,     0,  1105,     0,     0,  1096,  1096,     0,  1096,
     147,   146,   151,   149,     0,     0,   355,   481,   269,     0,
       0,     0,  1092,     0,     0,  1096,  1101,     0,     0,  1098,
       0,     0,   154,  1205,     0,  1109,  1110,  1106,     0,     0,
       0,     0,  1096,   152,     0,     0,  1102,  1103,  1099,     0,
    1093,  1107,     0,  1100
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   209,    55,    56,   975,   333,   441,   442,   443,   444,
     445,   446,   447,   448,   989,   990,   991,   992,   993,   994,
     995,   996,   997,   998,   999,  1000,   256,   257,   449,   450,
      58,   334,   335,   746,   775,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,  2093,  2094,  2095,   463,   646,
     647,   648,   464,   465,   466,   467,  1787,   409,   505,   410,
     506,   411,   507,   508,   867,   412,   413,    59,    60,    61,
      62,    63,   336,   337,   338,   339,   340,  1001,  1002,   341,
     342,   749,  1269,   343,   651,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   734,
     829,   653,  1326,   360,   361,   654,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   655,   656,  1127,
    1328,   554,   555,   211,    65,   498,   499,   212,    67,   213,
     214,    68,    69,    70,    71,    72,    73,   215,   118,   216,
     262,   932,   933,   217,   218,   219,    77,    78,    79,    80,
      81,   220,   741,  1203,   265,   471,    83,    84,   488,   489,
     877,  1226,   718,  1050,  1051,   124,    85,   472,    87,   473,
     127,   128,   129,   936,   130,   119,    89,  1099,  1100,  1101,
      90,   580,  1217,   475,   582,  1219,   133,   185,   476,   477,
     187,   940,   135,  1019,  1537,  1007,  1008,  1538,   188,   189,
     190,   191,   742,  1204,   224,   225,   226,   227,   228,   229,
     659,   660,  2013,  2014,   661,   662,   663,    93,   478,   266,
      94,    95,   267,   268,   269,   666,   667,   668,   669,   270,
     670,   898,  1621,  1130,   673,   674,   675,  1131,   677,    96,
      97,   375,    98,    99,   100,   101,   102,   103,   835,  1398,
    1399,   836,   837,   376,   377,   378,   379
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1899
static const int yypact[] =
{
   39187, -1899, -1899, -1899, -1899,    28, -1899, -1899, -1899, -1899,
   -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899,
   -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899,
    1069,   108, -1899, -1899, -1899, -1899, -1899, -1899,   247,   289,
     412,   684,   114, -1899, -1899, -1899, -1899, -1899, -1899, -1899,
   -1899,  2473,  2733, -1899, -1899, -1899,   241, -1899,   473,   684,
     570, -1899,   243,   511,  1084, -1899,   314, -1899,   630, -1899,
     602, -1899, -1899, -1899, -1899, -1899,  1093, -1899,   669,   710,
   -1899,   768,  1102, 38788,  2421,   232, 39484, -1899,   660,   811,
   -1899,  1887, 42123, 37351, -1899, -1899, -1899, -1899, -1899, -1899,
   39290, 38383,   939, -1899,   108, -1899, -1899,   114,   114,   946,
     873,   114, 29983,   684, -1899, -1899,   608, -1899,  2473, -1899,
   -1899, -1899,   822, -1899,   309,  1051, -1899, -1899, 39582, -1899,
   -1899,  2733,  1716,  1792,  2148,  1291, 23700, -1899,   897,    66,
     555, 31128, 41746, -1899, 31255, -1899, -1899, -1899,   684, -1899,
    1240,  1213,  1331,   166, 41746, -1899, 41476, 31382, 41746, 31509,
   -1899, 31636, -1899, -1899,   684, -1899, -1899,   271,   947, -1899,
   -1899,   950, -1899,   511,   649, -1899, -1899, -1899, -1899, -1899,
    1262,  1409,   660,  1716,  1265,  1291, 42123, 42123,   416, -1899,
    1354,   952,   961,   947,   535,   660,  1363, -1899, 28283,   979,
   -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899,
     672, -1899,   395, -1899,   991, -1899, -1899,  1013, -1899,  1019,
    1548, 36431,   408,   515, -1899, -1899,   758,   775,  1038,  1056,
     144,  1064, -1899,   144, -1899, -1899, -1899, -1899, -1899, -1899,
   -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899,  1104,  1107,
   -1899, -1899, -1899, -1899, -1899, -1899,   181,    36, -1899, -1899,
   -1899, -1899, -1899, -1899, -1899, 38988, -1899, 17556,  6071, 42328,
   17696, -1899,  1063,  1174,  1137, -1899, -1899,   511, 38888, -1899,
   -1899, -1899, -1899, -1899, -1899, -1899,   602,   768, 40072, 42123,
   40360, -1899, -1899, -1899, -1899, -1899,  1164,   946,   946, -1899,
   29983,   504, -1899, -1899, 30068, 30153, 30153,  1142, 41926, 29983,
   -1899, -1899,  1198,  1232, 41926, 29983,  1237,  1244,  1271,  1280,
    1283, 30238, -1899,  1311, -1899, 11066, -1899,   114, 25648, -1899,
   -1899, -1899, -1899,  1325, -1899,    84,  1341, -1899, -1899,   108,
   -1899, -1899, 12949, -1899,  1485, 28368, -1899,  1014,   902,  1199,
   29983,   844,  1114,  1305,  1376,  1359,  1514,   135,  1485,  1412,
     719, -1899,  1485, -1899,  1097,  1168,  1550,  1113,  1615,  1404,
    1403,  1406,  1536,   286,  1485,   946, -1899, -1899, -1899, -1899,
    1462,   159, 41566,  1473,  1480, -1899, -1899, 28453, -1899, 28538,
   -1899,   786,   829,  1497,  1519,  1716,  2692,  2694,   309, -1899,
   -1899,   905, -1899, -1899, -1899, -1899, -1899,  1198,  1325, -1899,
   -1899, -1899, -1899,   682,   971, -1899,  1199, -1899,  1550, 36546,
   -1899, 23823, 41476, -1899,   697, 41206, 40456, -1899, -1899,  1469,
   -1899,   684, -1899, -1899,   108, 40648, 40264, 10801, 41836, -1899,
   -1899,  1413,  1506,  1506,   806, -1899,  1538, -1899, -1899, -1899,
      93,  1048,   137, -1899, -1899, 30485,  1539, -1899,  1223, -1899,
   -1899,   696, -1899, -1899, -1899,  1544, 30620, 30747,   439,   399,
     719, 37561, 39680, -1899,   660,  1887, -1899, -1899, 37456, -1899,
   -1899,  1556, -1899,   684, -1899, -1899, -1899,  2130, 41926, -1899,
     697, -1899, 30874, 31001,  1561,  1572, -1899,  1557, -1899,  1566,
   -1899, -1899,  2525,  1575,   927, -1899, -1899, -1899, -1899,   847,
     627, 36546,   863, -1899, 31763, 31890, -1899,   863, -1899, 32017,
   32144,   863, -1899, 32271, 32398, -1899, -1899,  2733,  2733,  2733,
   21893,   905,  1262,  1409,   905, -1899, 28623,  6071, -1899,  1063,
    6071, -1899,  1063, -1899, -1899,  2733,  2733,   905, -1899, -1899,
    1564,   328, -1899, -1899,  1567,  1573, 41296,  1512,  1585,  1586,
   -1899, 32525, -1899, 32652,   547, -1899, 36198, 28708,  2733, -1899,
    1138,   672, -1899, -1899, -1899, -1899, -1899,   309,  1583,   660,
     556,    70,   379,  1617,  1581, -1899, 40936,  1590, -1899, 41026,
    1593, 41116,  1594, 41386, -1899, -1899, -1899,  1294, -1899, 29983,
     684, -1899, -1899,  1595, -1899, -1899,   271,   947, -1899,  1596,
   -1899, -1899, -1899, -1899, -1899,   660,  1388,   952, -1899, -1899,
    1597, -1899, 17836, -1899,  1063, -1899,   222, 28793,  1598,  1602,
    1606,   190, 17976,  1608,   108,  1607,  1611, 18116,  1198,  2305,
    1609,  1616,   108, -1899, -1899,  1325,  1622,  1623,  1624,  1395,
   16151,  1485, 16296, 25733,  1485,  1485, -1899, 16436, 39088, -1899,
   -1899, -1899, -1899, -1899, 18256, 18396, 18536, 18676, -1899, -1899,
   -1899,  1063, 18816, -1899, -1899, -1899, 18956, -1899, -1899,   114,
     114,   946,   685,   684,  1396,  1604, -1899,   309,   232, -1899,
     660,  1716, 42123, 42123,  6071, -1899, -1899, 40168, 29983,   347,
    1628,   448, -1899, 11861, -1899, -1899, 28878, -1899, -1899, -1899,
   -1899, 41926,  1636, -1899, -1899, -1899, -1899, -1899, 36891, 41926,
   23946,   108, 37006, 41926, 29983,   114,   114,   114, 29983, 11066,
   -1899, -1899, 10428, -1899, 13106, 13251, 13396, -1899, -1899, -1899,
   -1899, 10253,  1635,    94, 22032, -1899, -1899,   175, -1899,   -26,
   -1899, 22171,  1631, -1899, 22310, -1899, -1899,  1563, -1899, -1899,
   25818,  1569, 29983, -1899, -1899, -1899, -1899, -1899, -1899, -1899,
   -1899, -1899, -1899, -1899, 28368,   198, -1899, -1899, -1899, -1899,
   29983, 29983, 29983, 29983, 29983, 29983, 29983,  1199,  1550, 29983,
   29983, -1899, 29983, 28368, 28368, 28368, 28368, 28368, 29983, 29983,
   13541, 28368, -1899,  1579, -1899, -1899, 25903,  1580, 29983, 28368,
   29983, 29983, 29983, 29983, 29983, 29983, 29983, 29983, 29983, 29983,
   29983, 28368, 28368, 28368, 28368, 28368, 29983, 29983, 13686, 28368,
   -1899, -1899,   257,   672, 41836, -1899, -1899, 38482, 41566, 41566,
   -1899,  1630,  1632,  1633, -1899,  1634,  1637,  1639, -1899, -1899,
   -1899, -1899,   309, -1899, -1899, -1899, -1899,  1641, -1899, -1899,
   23700, 23700, 36316,   660,   718, -1899,   337,   849,  1735, 36546,
     870,  1646,  1645, -1899, -1899, -1899,  2130, 36661, 40552, -1899,
   -1899,   108, -1899, -1899, -1899, 37666,  1648,   108, 36776,  1981,
   24069,  2321, 40744, -1899,  1656, -1899,  1063, -1899,  1063, -1899,
   -1899, -1899,  1063, -1899,  1642, -1899,  1010, -1899, -1899,  4135,
    4135,  1506,  1506, -1899,  1506,   212, -1899,  1506,  1506, -1899,
   -1899,   893, -1899,  1544,   893, -1899,  1544,  1150, 28963,  2288,
   29983,   892, -1899,  1658,   309, 39778, -1899,   660,  1716, -1899,
   -1899,   916,   979, 36431, 30350,   793,   144, -1899,   144,  2733,
   -1899, -1899, -1899, -1899,   201, -1899,   227, -1899,   439, 37561,
   23700, -1899, -1899,  1663, -1899, -1899, -1899, 41476, 41476, 29983,
     108, -1899, 32779,   193, -1899,   650,   747, -1899, 41476,   108,
     651,   108,  1411, -1899, -1899, -1899, -1899, -1899, -1899,  1506,
   -1899, -1899, -1899, -1899, -1899, 37771,  1465, -1899, 22449, 42226,
   22588, -1899, -1899, 12607, -1899, -1899, 40840, -1899, -1899,   309,
    1262, -1899,  1409, -1899,   309, -1899, 28623, -1899, -1899, -1899,
   -1899, -1899,  1063, -1899,  1063, -1899, -1899, -1899, -1899, -1899,
   -1899, -1899, -1899, -1899, -1899, -1899,  1566,   206,   299,  1668,
   -1899, 32906, 33033,  1669, -1899, 33160, 33287, 33414, -1899,   615,
     478,   517,  1873,  1966,  1676,  1679,  1680, -1899,  1672,  1675,
    1678,   660,   905,  1291,    70, 39876, 29048,   556, -1899, -1899,
   41656, -1899, -1899,   672, -1899, -1899, 41656, -1899, -1899,   672,
   -1899, -1899, 41656, -1899, -1899,   672, -1899, -1899, 41656, -1899,
     672, -1899, -1899, -1899, -1899, -1899, -1899, -1899,  1690,  1692,
   -1899,  1078,  1693,  1694,   170, -1899, 22727, -1899, -1899, 19096,
    1684,  1687, 19236, 29983, 29983, -1899, 29133, 29218,  1691,  1701,
    1706, 11397,  1707,   108, 25988,  2583,  1468, 26073, -1899,  1775,
   -1899, -1899, 26158,  1712, -1899, -1899, -1899,  1717,  1722, 26243,
   16576,   114,  1709, 29983, 29983,   108, -1899, -1899, -1899, -1899,
   21615,   358, 28368, -1899,  1360, -1899, 29983, 13831, 13976, 28368,
   -1899, 29983, 14121,  1597, 19376, 19516, 19656, 19796, -1899, -1899,
   -1899, 19936, -1899, -1899, -1899, 20076, -1899, -1899,   946,   946,
    1721,  1730, 35954, 36080,   905, -1899,   905,  6071, -1899,  6071,
   -1899, -1899,  1727, 28368, -1899, 28368,   861, -1899,   439, -1899,
   -1899, -1899, -1899, 10253,  1736,  1744, 42016, 23700, 39386, 29983,
    1733, -1899, -1899, -1899, -1899, -1899,   660,  1710,  1746,  1738,
    1756, -1899, -1899, -1899, -1899, -1899, 37121, 26328,  1755,  1758,
    1763, 29983,  1757, 37236,  1752,   618,    35,    72,  1764,  1770,
    1768, -1899,   108, -1899, -1899, -1899, -1899, -1899, 29983,   114,
     239, 37873, 22866,  1771, -1899, 28368, -1899,   254, 37975, 23005,
   -1899,   262, 38077, 23144, -1899, -1899, -1899, -1899,  1136,  1773,
   -1899, -1899, -1899, 26413,  6546, -1899, -1899,  1771, -1899, -1899,
   -1899, -1899, -1899, -1899,  1014,  1097,  1014,  1097,   902,  1168,
     902,  1168,  1199,  1550,  1199,  1550,  1199,  1550, -1899, -1899,
     844,  1113, -1899, -1899,   844,  1113, -1899, -1899,  1114,  1615,
   -1899, -1899,  1305,  1404, -1899, -1899,  1376,  1403,  1359,  1406,
    1514,  1536, -1899,    53, -1899, 26498,  1767,  7374,  1772, -1899,
   -1899, -1899, -1899, -1899,  1218, -1899, -1899, -1899, 26583, 24713,
   -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899,  1014,  1097,
    1014,  1097,   902,  1168,   902,  1168,  1199,  1550,  1199,  1550,
    1199,  1550,  1199,  1550, -1899, -1899,   844,  1113, -1899, -1899,
     844,  1113, -1899, -1899,  1114,  1615, -1899, -1899,  1305,  1404,
   -1899, -1899,  1376,  1403,  1359,  1406,  1514,  1536, -1899, 26668,
    1776, 24798,  1777, -1899, -1899,   108,   108, -1899, -1899,   208,
    1108, -1899, -1899, -1899, 38584, 38686, -1899, -1899, -1899, -1899,
   -1899, -1899, -1899, -1899, -1899, -1899,  1287,  2555,   718, -1899,
   23700,   108, -1899, -1899, 23700, -1899,    -6, -1899, -1899, -1899,
     518,   660,  1716, -1899, -1899,   294,  1658,  1641,   660,  1716,
   -1899,  1788, -1899,   565,   559,  1467,  2733,  1801, -1899, -1899,
   -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899, -1899,
    1316, -1899, -1899, -1899, -1899, -1899, 23283,  2369,   979, 36431,
   12778,   817,   905,   309, -1899,   905, 29983, -1899,   587, -1899,
   -1899, -1899,  1802,  1642,  1631,  1658,   888, 23700,   955,  1041,
   -1899, -1899, -1899, 33541, 33668,  1803, -1899,  3552, 41836, 41836,
   41836, 41836, -1899, -1899, -1899, 29983,  1800, 29303, -1899,  1063,
   -1899, -1899, 29388, -1899, 29473, -1899, -1899, -1899,  1491,  1465,
   -1899, -1899,  1506, -1899, -1899, -1899, -1899, -1899,  1491,  1465,
   -1899, 29558,  4798, -1899, -1899, -1899, -1899, -1899, 20216, -1899,
   -1899,   215, -1899, -1899,   248,  1804, -1899, 33795, 33922,   660,
    1966,  1806, -1899, -1899, -1899, -1899, -1899, -1899,   905,   556,
   -1899,  1808,  1810, -1899,  1805,  1807,  1809, -1899, -1899, 36431,
   -1899, -1899, -1899, -1899, -1899, 29983,  1811,  1275, -1899, -1899,
   -1899, -1899,   268, 38179, 23422, -1899, -1899, -1899, 20356, 21615,
   21615, -1899, -1899, -1899, 20496, 26753, 16716, 26838, 26923, 24435,
   27008, 16856, 21754,  1814,  1817, 21754, 29983, 29643,  1880, 27093,
    1722, 24883,   114, 21754,  1815, 12175, 11397, -1899,  1496, 27178,
   24968, 27263, -1899, -1899, -1899, -1899, -1899,   107,   114,  1813,
    1250, -1899, -1899, -1899, -1899, 20636, -1899, -1899, -1899,  1818,
    1820,   108, -1899, -1899, -1899, -1899, -1899, -1899, 41476, -1899,
   -1899, -1899, -1899, 27348,  1819, 25053,  1821, 27433,  1822, 25138,
    1826,  1836,  1839, -1899, -1899, -1899, -1899, -1899, -1899, 14266,
   -1899, -1899,  1840,  1073, -1899,  2824,  1841,  1843,  1846,  1837,
    1852, 23700,  1746, 39974,  1710, 29983, 23700, 29983,  1829, -1899,
   -1899, -1899, -1899, -1899,  1847, -1899, 29728, -1899, -1899,  1860,
    1864, 29983, 29983,  1870, 10428, -1899,   108,   108, 29983, 14411,
     108, -1899, -1899,   946, -1899, -1899, -1899, -1899, -1899, -1899,
   -1899, 14556, -1899, -1899, -1899, -1899, 28368, 14701, 14846, 28368,
   14991, 15136, -1899, -1899, -1899, 15281, 15426, 15571, 15716, -1899,
   -1899, -1899,   257,  1845,   344, -1899, -1899,   660,   718,  1994,
    1118, 23700, -1899, -1899,  1876,   905,   905,  1506,   905,  1641,
    1881, -1899, -1899,  1884, -1899,   281, 38281, 23561, -1899,   660,
     881, -1899,   309, -1899, -1899,  1888,  1891, -1899, -1899, -1899,
    1152, -1899, -1899, 34049,  1890, 34176, -1899,  1892, 36546, -1899,
    1897, -1899, 29983, 28623,  1907, -1899, -1899,  1907, -1899, -1899,
   -1899,  1907, -1899, -1899, 20776, 20916, -1899, -1899, -1899, 34303,
   -1899, 34430,    70,   556, -1899, -1899, -1899, -1899, -1899, -1899,
   -1899,  1291, 27518, -1899, -1899, -1899, -1899, -1899, -1899, 21056,
   -1899, -1899, -1899, 21196, 11397, 24157, 11397, 24157, 12412, -1899,
   24574, 16996, -1899, -1899, 21754, 21754, 27603, 11397, 27688, 24296,
    1904, 25223, 27773,   140, 21336, -1899, 29983, -1899, 12412, -1899,
   12175, 11397, 25308, 29813,    12,  1906,    12,   200,  1900, -1899,
     108, 29983, 29983,   108, 28368, 28368, 28368, 28368, 28368, 28368,
   28368, 28368, 15861, 16006, -1899, -1899, -1899,   660,  1746,  1909,
   -1899, -1899, -1899, -1899, -1899,  1167,  1710, -1899,  1910,  1911,
    1901,  1908,  1187,  1918,  1919, 23700, 29983, 11066, -1899, -1899,
   -1899,  1922,  1926,  1927,  1928, 29983,  1920,  1940,  1944,  1946,
   -1899,  1949, -1899, -1899, -1899, -1899, -1899, -1899, -1899,   448,
   -1899, -1899, -1899,   448, -1899, -1899, -1899, -1899, -1899,   448,
   -1899, -1899, -1899,   448, -1899, -1899, -1899,   448, -1899, -1899,
   -1899,   448, -1899, -1899, -1899,   448, -1899, -1899, -1899,   448,
   -1899, -1899, -1899, -1899,  1231, -1899, -1899,  1641, 28368, -1899,
   -1899, -1899, 29983, 29983, -1899, 34557, 34684, 34811, 34938, 35065,
   41836, -1899, 41836, -1899, 25393, 21476, -1899, -1899, -1899, 35192,
   35319, 35446, 35573, -1899,  1978,  1982, -1899, -1899, -1899, -1899,
   11397, 29983, 29898,  1906, 17136, 17276, 25478, -1899, 12412, 24574,
   27858, 17416,   108, -1899,  1124,   593, -1899,   126,    12,  1953,
      12,   360,   616,  1951,  1255, -1899, -1899,  1710, -1899, -1899,
   -1899, -1899, -1899, -1899, -1899, -1899, -1899,  1236,  1945,  1948,
    1957, -1899, -1899, -1899, -1899,  1950,  1959, -1899, -1899, -1899,
   -1899, -1899, -1899,  1960, -1899, -1899, -1899, -1899, 35700, 35827,
   -1899, -1899, 27943, -1899, -1899, 11397, 11397, 28028, 25563, 11397,
   28113, 24296,  1962, -1899, 11397, 29983, -1899, -1899, 24574, -1899,
   -1899,  1961,  1980,    12,    12, 29983,    12,  1983,    12,  1349,
   -1899,   205,  1506,   579, -1899,   621, -1899,  1974, -1899,   108,
   -1899, -1899, -1899, 29303, -1899, -1899, -1899, -1899, -1899, -1899,
    1962, 11397, -1899, -1899, 28198, -1899, -1899,   114, -1899, -1899,
    1256,  1984,  1257, -1899,  1431,  1986,    12,    12,  1987,    12,
   -1899, -1899, -1899, -1899,   360,   721, -1899, -1899, -1899, 11397,
     610,  1989, -1899,  1990,  1992,    12, -1899,  1298,  1301, -1899,
    1533,   623, -1899, -1899, 29983, -1899, -1899, -1899,  1312,  1993,
    1995,  1996,    12, -1899,  2001,  2000, -1899, -1899, -1899,  1338,
   -1899, -1899,  2011, -1899
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1899,   151,    58,  9484, -1899,  2031, -1899, -1899, -1899, -1899,
   -1899, -1899,  1649,  1662,  -966, -1899,  -972,  -339,   121,   130,
    -953,  -943,  -892, -1899,  -691,  -682, -1899, -1899,  1664,  1665,
   -1899,  2123,  3736, -1899,  -225,   736,   753, -1899, -1899, -1899,
   -1899,  1671, -1899, -1899, -1899,  -634, -1898,   -14, -1899, -1899,
   -1899, -1899,  -278,  2317,   -22,    11,   652,  -847, -1899,  -793,
   -1899,  -855, -1899,  1176,  -124,  1296,  -884,     1,  1872,   -13,
    1874,    -4,     0, -1899,  1248, -1899, -1899,  3946,  4235, -1899,
    5852,  -413,  1362, -1899,  3731, -1899,  -330,   503,   799,   401,
   -1899,  -436,  -703,  -470,  -151,  -423,   -10,   596,  7321,  4625,
    -178,  8783,  -803,  1754, -1899,  4298,  -326,   629,   853,  1443,
     275,    24,    67,   238,   189,   287,   699,  5125,  -422,  7552,
    -799,  -114,  1044, 10555,   -59,  1195,  -144,  2639, 11101,  8232,
   -1899, -1899, -1899,   -64,   -40,   -35, -1899,  6856, -1899,  1474,
    2550,   702,  -810,  3233,  8991, -1899, 11338, -1899, -1899, -1899,
     -29,  3260, -1899, -1899,  1130,  6347,   -19, -1899, -1899,  1310,
    1734,  1451,  1862,   -84,   -70,  7545, 10130,  4094,  6722,  -448,
    -127,  -421,   666,  -920,    74,  2901, -1899, -1899, -1078, -1899,
    4468,  -559, -1208,  7654,   362,  -625,    50,   359,   218,  1740,
    -281,  -566,  -458,  -995,  -533,  -924,  -917,   385,   755,  1128,
     -38,  1914,  -708,   261,   197,  -468,  -438, -1899,   -89,   -77,
    8198,   146,    97, -1371, -1899, -1899, -1899,  2082, -1899,  2219,
    2090,   -58,  2586,    -8,  1916,  1011,  1015, -1899, -1899, -1899,
     -91,   367, -1531,  -203, -1899, -1899, -1899,     6, -1899,  2091,
     -55,    19,  2094,  1587, -1899, -1899, -1899,  2098,  -817,   454,
   -1899,  -795,   851, -1899, -1899, -1899, -1899
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1290
static const yytype_int16 yytable[] =
{
      64,   271,   222,  1020,  1461,   399,  1415,   693,  1145,   502,
    1684,  1462,  1228,   941,  1413,   778,   223,   106,  1474,   779,
    1402,  1536,  1067,  1578,   175,  1390,  1516,   947,  1526,  1392,
     108,   110,   509,  1522,   945,   280,   286,   603,   282,   393,
     299,   115,  1403,   176,   391,  1518,   196,  1528,   177,   109,
     935,   394,   123,  1251,  1725,  1519,   399,  1529,   392,   140,
    1258,   116,  1252,  1262,   149,   148,   152,   672,  1414,  1259,
     172,   287,  1263,     1,   278,  1436,  1486,   299,  1852,   173,
     276,   288,   163,   174,   123,   752,   210,   285,  1034,   277,
    1863,   123,  1308,    64,   904,   538,   541,  1232,     2,   299,
      64,    64,  1255,   747,   296,   104,  1520,   121,  1530,  1256,
    1864,     1,   299,   381,  1018,  1751,   384,   138,  1075,   106,
    1374,  1081,   492,  1087,  1752,  1092,   297,   298,   210,  2086,
     301,   123,   123,   184,   184,   514,   414,   519,   906,   523,
     149,   468,   481,  1864,   468,   299,  2012,     1,   495,  1485,
     497,    54,   799,   497,   481,   493,   510,   468,   481,   468,
     105,   468,     1,  1706,   526,   604,   774,   500,   515,     1,
     520,   380,   524,     1,   149,   148,  1253,   623,   537,   540,
     801,   396,   601,   123,   809,  -454,  1503,   421,   922,   925,
     939,  1115,    -8,   566,  1495,   719,     1,  2133,   551,  1277,
    1707,   723,  1483,  2018,   567,   299,   400,  1539,  2127,     1,
     149,     1,   559,   753,   922,   925,  1808,   106,    92,   175,
     163,   571,   905,   618,   286,  1249,   286,   616,  1484,   175,
     123,  1865,   280,   123,   170,   282,   922,   925,   176,  1866,
    -109,   922,   925,   177,    54,   922,   925,  1435,   176,  1810,
    2087,    54,    54,  2133,  2083,  -100,   550,   400,  2088,   287,
       1,   287,   664,  -104,  2003,   609,   753,    52,   853,   -82,
     649,   697,  1866,   842,   680,   846,   676,   696,   682,   800,
    1526,   694,   -89,   831,   686,  1522,   277,  1526,    64,   683,
      64,  1526,  1522,   681,  1581,   501,  1522,     1,   870,  1528,
    1542,   186,     1,   827,  1254,  1067,  1528,   602,   712,  1529,
    1528,    92,  1434,  1116,   712,   184,  1529,     1,   289,    92,
    1529,  2002,  1496,  1673,  2019,   551,  1312,  1254,   184,  2128,
     905,     1,  2020,  2083,  1741,  1540,  1742,  2129,  1270,   755,
       1,  1809,     2,   970,  -618,   327,   743,  1268,   619,   299,
     895,   897,   899,   901,  1378,   197,   753,  1300,  1304,  1271,
    1530,     1,   136,     1,   799,   974,   198,  1530,  -109,   143,
     111,  1530,   569,   144,  1811,  1318,   970,  -613,  1395,  1396,
    1068,   149,   833,  -100,  1270,  1366,  1370,   551,   944,   551,
    1654,  -104,  1658,  1334,  1656,   123,  1660,   -82,     1,   527,
     927,   123,   223,  1384,  1011,  -871,   757,   758,   759,   584,
     -89,   134,   112,  1036,   149,  1583,   693,   543,  1757,   833,
    1011,   868,   510,     2,  1584,   872,   571,   941,  1543,   170,
     828,   883,   388,  2092,   884,   833,   872,   891,   833,   170,
    1534,    54,     1,   389,   150,   841,  1021,   845,  1636,  1023,
    1278,  1280,  1282,  1059,  1279,  1281,  1283,   935,   754,   272,
     711,   672,   672,   672,   672,   827,   468,   468,   149,   854,
    1962,   931,   210,  1152,  1896,   123,  1159,  1055,   958,   584,
    1342,  1344,  1346,   962,  1343,  1345,  1347,   163,   963,  1056,
     397,  1193,   468,   468,  1067,  2017,   186,  1471,  1480,  1824,
    1481,   941, -1037, -1037,   976,  1559,   692, -1037,   289,   299,
     149,   980,  1474,  1110,   468,   468,   587,   935,   587,   468,
     468,     1,   760,   468,   468,   557,   928,   123,   123,   123,
     761,   123,   585,   762,   123,   113,   586,   416,   935,  1041,
    1750,  1045, -1022,  1806, -1022,   123,   123,   123,  1535,   747,
       1,   149,  1773,   539,   542,  1774,   833,   497,     1,   146,
     147,   468,     1,   468,   526,  1415,  1049,   551,   123,   754,
     569,   149,  1042,  1413,  1046,     2,   747,   982,   982,   982,
     583,   123,     1,  1676,   747,   935,  1073,  1402,  1402,  1079,
       1,  1085,  1195,  1090,  1018,   184,   184,  1433,   299,   137,
    1104,  1694,  1568,  1780,   747,  1013,   586,  1802,  1703,  1403,
    1403,     1,  1526,   299,  1803,   299,  -864,  1522,     1,     1,
    1573,  1013,   569,   299,     1,  1058,     1,  1749,   702,  1229,
       1,  1528,  1126,   286,  1133,   624,     2,   671,   175,   588,
     145,  1529,  1146,   589,   879,   589,  1316,  2089,  1753,  2091,
    1791,  1786,     1,  1789,     1,   400,   695,   176,  1103,  1517,
    1523,  1527,   569,   529,   649,   649,   649,   649,   287,   387,
     676,   676,   676,   676,  1382,     1,   422,  1047,   939,  1065,
    2027,   423,   149,  1181,  1187,  1189,  1751,     1,     1,  1762,
    1066,   123,  1530,   858,  2092,  1761,  2092,   571,  1178,  1179,
     141,  1908,   142,  1198,  -458,  -458,  -458,   146,   147,   254,
    1777,  1205,     2,  2120,    26,  2122,  2085,  2124,  1210,  1220,
     551,  1230,  1210,  1220,     1,  1533,   803,   804,   805,  1198,
    1638,   155,   833,  2154,  1643,   146,   147,  1645,   382,  1647,
    2096,  1242,  1705,  -864,  1235,  1236,  1237,   146,   147,   181,
    2132,   787,  2163,  1033,   979,  2147,  2148,  1265,  2150,   590,
     153,  1272,   154,   922,   925,   917,   918,   922,   925,   146,
     147,   146,   147,  1055,  2158,  1766,   592,  1498,  1505,   530,
      51,   865,  1499,  1074,  1767,  1056,  1080,   584,  1086,  1320,
    1091,  2169,   146,   147,   590,  1526,   134,  1895,  1536,   157,
    1522,   158,  1902,  1332,   859,   146,   147,  1337,   896,  1986,
     860,   902,  1169,  1173,  1528,   530,  1464,  1386,   590,  1309,
    1454,  1455,   416,  1456,  1529,   919,  1458,  1459,  -458,  1497,
     587,  -458,  1397,   149,  1400,  1773,  1774,   833,   833,   833,
     159,   862,   806,  1488,  1489,  2152,   393,  1375,   170,   533,
     807,  1470,   567,   808,  1197,  1490,   789,   790,   394,  1559,
     414,  1416,   210,  1313,     1,   392,   976,  1964,   149,   980,
    -458,  -458,  -458,   981,  1500,  1530,   163,  1426,   571,  1501,
    1197,  1146, -1062,  1197,     1,   571,   591,  1441,  1443,     2,
    1445,  1379,   833,  1541,  1544,     1,   699,   160,  1508, -1068,
    -458,  -458,  -458,   593,  1022,   699,   672,  1024,     1,   672,
     848,   699,  1523,  1527,   586,   692,  1479, -1062,  1711,  1523,
    1527,   591,  1712,  1523,  1527,   134,   399,  1063,  1054,   123,
       1,   149,   900,     2,   231,   210,   254,  1983,   123,   295,
    1771, -1062,   121,  1478,   181,   591,   123,   672,   123,  1482,
    1493,   299,  1565,   849,   689,   974,   387,   589,   149,   931,
     414,   672,   672,   672,   672,   791,   792,   510,   510,   977,
     497,  1419,   468,   497,     1,   978,  1561,   978,   510,  1504,
     149,  1506,  -216,  1494,   711,   569,  -458,  1319,  1562,  1806,
    1239,  1813,  1422,  1240,  -458,    32,  1916,  -458,   978,   701,
     300,   146,   147,  1603,  1971,  1807,   123,  1873,   701,   941,
    1779,   935,   146,   147,   701,  1385,   860,  -460,  -460,  -460,
     569,  2037,  1466,   420,  -458,  1547,    43,    44,    52,   569,
     747,   671,   671,   671,   671,  1317,   569,   497,   497,   783,
     784,   468,   468,   569,  2053,   468,   468,   468,  1476,   149,
    1889,   935,   123,   123,   935,  -265,  -265,  -265,  1548,  1188,
    1190,  1191,   123,  1383,   123,   210,   551,  1986,  1301,  1305,
     833,   136,     1,   149,   106,   528,   833,  1781,   529,   149,
     546,  1093,   833,   978,   387,   149,  1321,     1,   833,   527,
     149,   146,   147,  -216,   569,  1679,  1367,  1371,   861,  -216,
     107,   754,   396,  1247,   149,     1,  1094,   556,  2138,   649,
     569,     1,   649,   106,  1387,   676,  1018,  1699,   676,  1677,
     560,  1126,  1095,  1133,  1564,   817,   818,   400,   793,   794,
       2,  1678,  1618,  2060,   780,  2061,   400,   689,  1013,  1260,
       1,  -460,   106,   561,  -870,  1631,  -870,  -870,   562,    26,
     649,  1272,  1096,  1097,   781,   782,   676,  -459,  -459,  -459,
    1627,   492,   594,  1782,   649,   649,   649,   649,   679,   978,
     676,   676,   676,   676,   197,  -265,    28,    29,  -900,  -265,
     595,    32,   468,   468,   123,   198,   123,   597,    38,  1813,
    1292,  1294,   678,  1296,   493,  1886,   833,  1012,   149,  2040,
    1015,   860,  1576,   833,   146,   147,  1577,   414,   210,   785,
     786,  -870,    43,    44,   156,   922,   925,   810,  1356,  1358,
    1360,  1362,  -870,  -740,  1054,  -740,  1688,   599,   146,   147,
     600,  1421,   161,  1688,   819,   820,  2022,   811,   812,  1430,
    1963,   496,   149,     1,  1523,  1527,   860,  -870,  2082,   134,
    1444,   104,  2083,  1559,  1662,  1586,  2084,  -870,  1592,   136,
    1720,   416,   416,  -899,  1721,   711,   535,  1567,  1713,   922,
     925,  1987,   387,  1570,  1974,  -870,  -870,  -870,  1093,  1571,
     860,  -459,   983,   984,   985,  1572,  1284,  1286,   134,  2029,
       1,   698,   911,   912,   699,   860,  1633,  1093,  -216,  1923,
    1025,  1027,   583,  1094,  1643,   813,   814,  1647,   134,  2034,
    1169,  1173,  1169,  1173,   913,   860,  1348,  1350,   914,  1095,
     915,   720,  1094,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,   935,   935,  -899,  -899,  1095,    28,
      29,  -899,  1732,  -626,    32,  -626,  1721,  1661,  -899,  1096,
    1097,    38,   916,  2052,  1663,   721,  1509,  1185,  2100,   860,
     724,   416,  1775,   689,   860,    28,    29,   725,  1096,  1097,
      32,  1018,  -899,  -899,  1869,    43,    44,    38,  1870,  2098,
    2141,  2143,  1018,  2099,  2083,  2083,   672,   672,  -899,  -899,
    -899, -1017,   536, -1017,   726,  1739,  1740,   701,   672,  1743,
     149,    43,    44,   727,   833,   833,   728,   146,   147,  -216,
    -911,   397,  1285,  1287,  1551,  -216,   149,   754,  1098,  1744,
    1416,  1506,  2159,   853,   414,  2160,  2083,  1523,  1527,  2083,
    1754,   843,   123,   847,   732,  1631,  2165,  -458,  -458,   123,
    2083,   795,  1349,  1351,  1763,   149,   123,  -458,  1639,  1640,
    1641,  1807,  -458,  -458,  -458,   751,  -458,  -458,  -458,  -458,
    -458,  -625,  2172,  -625,   503,  2135,  2083,   123,   516,  1770,
       1,   754,   123,  2125,    75,   123,   671,  2083,   149,   671,
     544,  2126,   545,  -911,  -911,    28,    29,   414,  -911,   548,
      32,   545,    32,   468,   468,  -911,   396,    38,   833,   833,
     833,   833,   797,   763,   764,   765,   766,   767,   768,   769,
     770,   771,   772,  1035,  1107,     1,   545,   671,   796,  -911,
    -911,    43,    44,    43,    44,   754,  1182,  1150,   142,  1987,
     798,   671,   671,   671,   671,  -911,   802,  -911,  1507,   893,
     823,  -880,  -880,   254,   689,   824,  -880,   468,   468,   825,
     123,     1,   826,  -880,  1650,  2144,  1651,   179,   123,  2083,
     815,   816,  1018,  2145,  1264,  1668,     1,    75,  1672,   571,
    1271,  1900,     1,  1903,    75,    75,     2,  -880,  -880,   418,
    1331,  1336,     1,     1,  1288,  1290,   830,  1911,  1913,   649,
     649,  1513,   881,  1514,  1898,   676,   676,   754,   754,  1126,
    1613,   649,  1126,   838,  1185,  1126,  1899,   676,   416,  1618,
     839,  1060,   773,  1126,  1352,  1354,  1126,  1511,  1069,  1512,
     569,   850,    28,    29,   854,   689,   754,    32,  1856,   821,
     822,  1853,  1013,  1795,    38,  1798,   254,   672,  1289,  1291,
    1018,  1146,  1796,   851,  1799,  1450,  1452,  1867,   510,   747,
     747,   747,   747,   747,   747,   747,   747,  2161,    43,    44,
    1006,  2083,  1451,  1453,   903,  2162,  1966,   910,  1353,  1355,
     920,  1111,   689,  1026,  1028,  1164,  1166,   960,   563,  1165,
    1167,   414,   967,   210,   969,  1011,   414,   291,   294,  1404,
    1405,    28,    29,   968,   970,   575,    32,   922,   925,  1029,
     922,   925,  1030,    38,  1242,   973,  1917,  1918,  1031,  1070,
    1921,   922,   925,   922,   925,  1037,  1038,   198,  1076,     1,
     569,  1082,  1088,  1108,  1105,  1113,  1106,    43,    44,  1114,
    1112,  1132,  1143,  1134,  1183,  1827,  1831,  1135,     1,  1144,
   -1036, -1036,  1397,   747,     2, -1036,  -216,  1843,  1147,  1148,
    1149,   414,   179,   121,  1194,   123,   123,  1207,   123,  1248,
    1260,  1975,   179,  1978,    75,  1406,  1424,  1407,  1408,  1409,
     149,  1449,  1410,  2136,  1411,   389,  1423,  2137,  1440,  1551,
     922,   925,  1448,   468,  1487,   468,  1467,  1989,   833,  1991,
      28,    29,  2038,   788,  1976,    32,  1979,  -732,  -735,   739,
    1552,  2045,    38,  1553,  1554,   397,   672,  1555,   672,   468,
    1556,   468,   123,  1557,  1574,  1575,  1589,  1579,  1580,  1590,
    1990,   416,  1992,  1605,  1606,   416,    43,    44,   583,  1607,
    1609,  1614,  1628,  1683,  1126,  1126,  1126,  1126,  1622,    52,
     649,  1206,  1648,  1623,  1126,  1126,   676,  1126,  1624,  1126,
    1649,   422,  1015,  1652,  1681,   146,   147,  -216,  2054,  2056,
    1669,  1126,  1420,  -216,   418,   754,    28,    29,  1670,  1208,
    1146,    32,  1685,  1631,  1006,   672,     1,  1686,    38,  1696,
    1704,  1006,  1697,  2015,  1006,  2015,  1013,  1698,   416,  1800,
       1,  1701,  1708,   575,  1709,   470,  1710,  1722,   470,  1728,
    1715,     2,    43,    44,  1731,   414,   416,   551,  1736,  1738,
     121,   470,  1760,   470,  -458,   470,   402,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  1764,  1778,  1792,  1821,  1783,
    1814,  1820,  1815,  -738,  1816,  1823,  1850,  1868,  1854,   569,
    1817,  1871,  1818,  1872,  1819,   575,  1844,    28,    29,  1845,
    1905,  1875,    32,  1877,  1879,  2058,   671,   671,  1881,    38,
    1882,    28,    29,  1883,  1885,  1890,    32,  1891,   671,     1,
    1892,  1961,  1893,    38,  1465,   468,   468,   468,   468,   468,
     833,  1906,   833,    43,    44,   575,  1999,  1894,  2059,   468,
     468,   468,   468,    51,     2,  1909,   566,    43,    44,  1910,
    1126,  2130,  2131,   121,  1915,  -231,  1965,   567,  1968,   649,
      52,   649,  2081,  1491,  1969,   676,  1977,   676,  -956,  1980,
    1972,  1146,  1631,  1973,  1982,    18,    19,  2001,  -458,  -458,
    2021,    57,  2016,  2028,  2030,  2031,  2032,  2015,  -458,  2015,
      28,    29,  2065,  2033,  2047,    32,  2066,  -458,  -458,  -458,
    -458,  -458,    38,  2035,  2036,    28,    29,  2041,   468,   468,
      32,  2042,  2043,  2044,  2048,  1126,  1126,    38,  2049,  1126,
    2050,  1126,   114,  2051,  1126,  2097,    43,    44,   649,  2090,
    2101,  2103,   416,  2102,   676,  2104,  2106,   416,  2112,   566,
      57,    43,    44,  1631,  2105,  1146,  2117,   151,  1185,  1146,
     567,    51,  2015,  2015,  2134,  2015,  2118,  2015,  2142,  2123,
    1566,  1126,  2146,  2149,    57,  2155,  2156,    57,  2157,  2166,
    2151,  2167,  2168,   255,    57,  2170,  2171,   951,  1006,  1006,
    1006,    57,    57,     1,  1146,  1631,  2140,  2173,  1649,  1126,
     952,  1015,   953,   954,    57,  2015,  2015,   383,  2015,   957,
    1981,  1146,   416,  1790,  1502,  2077,  1412,  2080,     2,    57,
     684,  1604,   685,  1457,  2015,  1492,   880,   408,  1335,  1768,
     888,   179,   408,   255,  1233,   408,   722,  1201,  1984,   617,
    2119,  2015,   290,   279,   281,   255,   665,    57,   408,   255,
     408,   283,   408,   416,   739,   293,  1960,     0,     0,     0,
       0,     0,     0,  1201,    28,    29,  1201,   671,     0,    32,
       0,     0,     0,     0,     0,  1245,    38,   255,   255,     0,
     470,   470,    28,    29,  2116,     0,     0,    32,     0,   408,
       0,     0,  1293,  1295,    38,  1297,  1006,     0,     0,     0,
      43,    44,     0,   558,     0,     0,   470,   470,     0,     0,
       0,     0,    57,  1680,     0,     0,     0,     0,    43,    44,
    1357,  1359,  1361,  1363,   451,     0,     0,   451,   470,   470,
       0,     0,   404,   470,   470,  1700,     0,   470,   470,     0,
     451,     0,   451,     0,   451,     0,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,   255,     0,     0,   255,
     255,   645,     0,   418,   418,     0,   416,     0,   575,    57,
       0,     0,     0,     0,     0,   470,     2,   470,     0,    57,
     255,    57,     0,   699,   699,   121,   699,   699,     0,     0,
       0,   699,   699,   699,   699,     0,     0,     0,     0,   255,
       0,     0,     0,   575,     0,   255,     0,     0,     0,    18,
      19,     0,   575,     0,     0,     0,   408,     0,     0,   575,
       0,     0,    28,    29,   739,     0,   575,    32,     0,     0,
       0,     0,     1,     0,    38,     0,   671,     0,   671,    28,
      29,  1006,  1006,     0,    32,     0,     0,     0,  1006,  1006,
       0,    38,  1006,  1006,     0,  -880,  -880,     2,    43,    44,
    -880,     0,     0,   418,     0,     0,   121,  -880,    51,     0,
       0,    52,  1463,    57,     0,    43,    44,   575,   408,     0,
     408,  1649,  1015,     0,     1,     0,  1929,  1933,  1141,  1939,
    1943,  -880,  -880,   575,  1947,  1951,  1955,  1959,     0,     0,
       0,     0,     0,    28,    29,   671,     0,     0,    32,     2,
      57,   754,   408,    57,     0,    38,   255,    57,   192,   193,
       0,     0,   882,     0,     0,     0,    57,   255,     0,    57,
     699,   699,   699,   699,   699,   699,   699,   699,     0,    43,
      44,     0,     0,     0,     0,     0,     0,   621,   625,    51,
       0,     0,    52,     0,     0,    28,    29,   408,   408,     0,
      32,   930,    57,    57,     0,     0,     0,    38,     0,   408,
       0,     0,     0,     0,   961,     0,     0,    18,    19,   255,
    1776,     0,     0,   408,   408,     0,   971,     0,  -641,     0,
       0,    43,    44,     0,     0,     0,     0,     0,     0,     0,
       0,    51,    57,     0,    52,   408,   408,    28,    29,     0,
     408,   408,    32,  -641,   408,   408,     0,     0,     0,    38,
       0,   645,  -641,  -641,   699,     0,     0,     0,   255,     0,
       0,   255,     0,   701,   701,   701,   701,   701,   701,   701,
     701,     0,     0,    43,    44,     0,     0,    57,     0,   451,
     451,     0,   408,    51,   408,     0,  1006,    57,   408,  -641,
    -641,   955,     0,     0,  -641,     0,     0,     0,     0,     0,
       0,  -641,     0,     0,     0,   451,   451,    57,     0,     0,
      57,     0,    57,     0,    57,     0,     0,    18,    19,    28,
      29,    57,     0,     0,    32,  -641,  -641,   451,   451,    66,
       0,    38,   451,   451,     0,  -641,   451,   451,  -641,     0,
     418,   972,     0,   970,  -641,     0,     0,    28,    29,     0,
       0,     0,    32,   470,   470,    43,    44,   701,     0,    38,
       0,     0,     0,     0,     0,    51,     0,  1666,   862,     0,
       0,     0,     0,     0,   451,     0,   451,     0,     0,   567,
       0,     0,   485,    43,    44,   645,   645,   645,   645,     0,
       0,     0,     0,     0,   485,     0,  1612,     0,   485,     0,
       0,     0,     0,  1006,  1006,     0,     0,     0,     0,     0,
       0,     0,    66,   255,   255,   255,   470,     0,    57,  1901,
       0,  1904,    66,     0,   408,     0,     1,     0,     0,    66,
      66,     0,   255,     0,     0,  1912,  1914,     0,     0,   255,
     255,   408,     0,   255,   255,     0,   621,     0,     0,   621,
     408,     2,     0,    57,     0,     0,    28,    29,    28,    29,
     121,    32,    57,    32,     0,   645,     0,     0,    38,     0,
      38,   483,   645,   923,   926,   645,     0,     0,     0,     0,
       0,     0,     0,   483,     0,   470,   470,   483,     0,   470,
     470,   470,    43,    44,    43,    44,     0,    28,    29,   923,
     926,     0,    32,     0,     0,   613,   855,     0,   856,    38,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   923,   926,     0,     0,     0,   923,   926,     0,     0,
     923,   926,     0,    43,    44,     0,     0,     0,     0,     0,
       0,     0,     0,    51,   622,   626,    52,     0,   716,     0,
       0,     0,     0,   418,   716,    57,     0,   418,    57,    57,
      57,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   621,   625,  1170,  1174,     0,     0,     0,
       0,   408,   408,    57,     0,     0,  1006,  1006,    28,    29,
      57,    88,     0,    32,     0,     0,     0,     0,   255,    57,
      38,     0,     0,   621,     0,     0,    57,    66,     0,   255,
       0,   408,     0,    57,     0,     0,     0,    66,     0,    66,
     418,     0,     0,     0,    43,    44,   470,   470,     0,     0,
       0,     0,     0,   575,    51,     0,     0,  1208,   418,     0,
    2039,     0,     0,   131,     0,     0,     0,     0,     0,  2046,
       0,     0,     0,     0,     0,     0,    57,     0,     0,     0,
       0,     0,     0,     0,    57,   875,     0,     0,     0,     0,
       0,     0,     0,   164,   182,   195,   875,     0,     0,     0,
      57,   408,   233,     0,    88,     0,     0,     0,    57,    57,
       0,    88,    88,   408,     0,     0,     0,     0,     0,    57,
       0,     0,     0,     0,     0,     0,  2055,  2057,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   645,
     255,   645,   195,   401,   403,   405,   406,   255,   966,     0,
       0,     0,   474,   575,     0,   474,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   474,     0,
     474,     0,   474,     0,   483,     0,     0,     0,     0,     0,
       0,     0,   408,   408,     0,   483,   408,   408,   408,     0,
       0,     0,     0,     0,   534,   403,   405,     0,     0,     0,
       0,     0,     0,     0,     0,   451,    57,   408,     0,     0,
       0,    57,     0,     0,     0,     0,     0,    57,     0,     0,
       0,     0,     0,    57,     0,     0,     0,     0,     0,    57,
       0,   564,   579,   622,   418,     0,   622,   483,     0,   418,
       0,     0,     0,     0,     0,     0,     0,   645,     0,     0,
     645,     0,     0,   645,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   451,   451,   615,     0,   451,   451,
     451,     0,     0,     0,     0,     0,     0,     0,   739,   182,
       0,   645,     0,     0,     0,     0,     0,     0,     0,   690,
       0,    88,     0,     0,   418,   645,   645,   645,   645,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   408,   408,     0,     0,     0,   255,     0,
     255,     0,     0,     0,     0,     0,     0,    57,     0,     0,
       0,     0,     0,    76,    57,   418,     0,   255,   408,    57,
       0,     0,     0,     0,     0,     0,     0,   470,   470,     0,
     622,   626,  1171,  1175,     0,     0,     0,   255,     0,     0,
      82,     0,   575,     0,   255,     0,     0,     0,  1214,  1224,
       0,     0,  1214,  1224,     0,     0,     0,     0,     0,     0,
     622,     0,   255,   645,     0,     0,     0,     0,     0,   255,
     645,     0,     0,   255,   645,     0,   401,   403,   405,     0,
       0,   470,   470,     0,     0,   451,   451,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    76,     0,     0,     0,
     863,     0,     0,     0,     0,     0,    76,   474,  1587,     0,
       0,  1593,     0,    76,    76,     0,    66,     0,   131,     0,
       0,     0,     0,    82,     0,     0,     0,     0,   418,     0,
       0,     0,     0,    82,     0,     0,     0,     0,   923,   926,
      82,    82,   923,   926,     0,     0,     0,   474,   474,  1634,
       0,     0,   937,     0,     0,   486,   948,     0,     0,   474,
       0,   739,     0,  1170,  1174,  1170,  1174,   486,   164,     0,
       0,   486,     0,   474,   474,     0,     0,     0,     0,     0,
       0,     0,   487,     0,     0,     0,   621,     0,   621,     0,
       0,     0,   863,     0,   487,   474,   474,     0,   487,     0,
     474,   474,     0,     0,   474,   474,     0,  1429,   195,   195,
     195,     0,     0,     0,     0,    57,    57,     0,  1429,     0,
       0,     0,     0,     0,     0,     0,   195,   195,     0,     0,
       0,   408,     0,     0,     0,   408,     0,     0,     0,     0,
       0,     0,   474,     0,   474,     0,     0,  1052,     0,  1061,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   405,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   645,     0,     0,
      57,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    76,     0,     0,     0,     0,   483,     0,   408,     0,
       0,    76,     0,    76,   408,   408,     0,   483,     0,    57,
      57,    57,    57,     0,     0,     0,     0,   470,    82,   470,
       0,     0,     0,     0,     0,     0,     0,     0,    82,     0,
      82,     0,     0,  1784,     0,  -630,   613,     0,     0,     0,
       0,     0,     0,   470,     0,   470,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   408,   408,
    -630,     0,     0,     0,     0,     0,     0,     0,     0,  -630,
    -630,     0,  1186,     0,     0,     0,     0,     0,   690,     0,
      57,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   255,   645,   451,   451,     0,  1216,
     645,   645,     0,  1216,     0,     0,  -630,  -630,     0,     0,
       0,  -630,     0,   645,     0,     0,   645,     0,  -630,     0,
       0,     0,   863,     0,   645,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   486,     0,
       0,     0,  -630,  -630,     0,     0,     0,     0,     0,   486,
     451,   451,  -630,     0,     0,  -630,     0,     0,  1785,    57,
     970,  -630,     0,     0,     0,   876,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1588,   876,     0,  1594,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   408,     0,    57,     0,     0,   408,     0,     0,
       0,   486,     0,     0,     0,     0,     0,     0,     0,   470,
     470,   470,   470,   470,     0,    57,  1635,     0,     0,     0,
       0,     0,     0,   470,   470,   470,   470,     0,   876,     0,
    1171,  1175,  1171,  1175,     0,     0,   613,     0,     0,     0,
       0,     0,     0,  1417,     0,     0,     0,     0,     0,     0,
     863,     0,     0,   622,     0,   622,  1692,   164,   863,  1431,
       0,     0,   408,  1692,     0,     0,  1438,     0,     0,   863,
       0,  1446,     0,     0,     0,     0,     0,   255,   645,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1828,  1832,
     923,   926,   470,   470,   408,     0,   408,     0,     0,    57,
       0,  1587,     0,     0,  1593,     0,     0,     0,     0,     0,
     131,     0,  1634,     0,     0,     0,     0,     0,     0,  1475,
     408,     0,   408,   344,   579,     0,     0,     0,     0,     0,
     131,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     937,     0,     0,     0,   923,   926,     0,   415,     0,     0,
       0,     0,     0,   474,     0,   645,   645,   452,     0,     0,
     452,     0,     0,   403,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   452,     0,   452,     0,   452,     0,     0,
       0,     0,     0,     0,     0,     0,   451,   937,   451,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   415,
      76,     0,   451,     0,   451,     0,   408,     0,   408,     0,
       0,     0,   474,   474,     0,     0,   474,   474,   474,     0,
       0,     0,     0,  1549,   401,     0,     0,    82,     0,     0,
       0,     0,     0,     0,   405,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   408,   408,   408,   408,
     408,    57,     0,    57,     0,     0,     0,     0,     0,     0,
     408,   408,   408,   408,     0,     0,     0,     0,     0,     0,
       0,   415,     0,     0,     0,   704,   707,   709,     0,     0,
     415,     0,     0,     0,     0,     0,   415,     0,     0,     0,
       0,     0,   730,     0,     0,     0,     0,     0,     0,   344,
       0,     0,     0,  1828,  1832,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   415,     0,     0,     0,
       0,   415,     0,   474,   474,     0,     0,     0,     0,   408,
     408,     0,     0,     0,    86,     0,     0,     0,   451,   451,
     451,   451,   451,     0,   863,     0,     0,   863,     0,  1675,
     486,     0,   451,   451,   451,   451,     0,     0,   415,     0,
     415,   486,     0,     0,     0,     0,     0,  1216,     0,     0,
       0,     0,     0,     0,  1216,     0,   302,   876,     1,   303,
     106,     0,     0,     0,     0,     0,    86,     0,   876,     0,
       0,     0,   415,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1829,  1833,    86,    86,     0,
       0,   451,   451,     0,     0,    86,     0,    86,   626,     0,
       0,   626,     0,     0,    86,    86,     0,     0,     0,   626,
     307,     0,   452,   452,     0,     0,   308,   309,     0,     0,
       0,     0,     0,     0,   956,     0,     0,     0,     0,     0,
     312,     0,     0,     0,     0,    86,    86,     0,   452,   452,
       0,     0,     0,   313,     0,     0,     0,   314,   315,   316,
     317,   318,   319,   320,     0,     0,     0,     0,     0,     0,
     452,   452,     0,   322,     0,   452,   452,     0,   706,   452,
     452,   415,     0,     0,     0,     0,     0,     0,   327,   328,
       0,     0,     0,     0,   748,     0,     0,    86,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   776,   923,   926,     0,   923,   926,   452,   415,   452,
       0,     0,     0,     0,     0,     0,   923,   926,   923,   926,
       0,     0,     0,     0,     0,     0,     0,     0,  1747,     0,
       0,     0,     0,     0,    86,     0,     0,    86,     0,     0,
     344,     0,     0,  1756,     0,     0,     0,     0,     0,     0,
     401,     0,     0,     0,     0,     0,     0,   195,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   415,    86,
       0,     0,     0,     0,     0,     0,     0,     0,  1769,     0,
     579,     0,    86,     0,     0,   923,   926,     0,     0,     0,
       0,     0,    86,     0,    86,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   474,   474,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     362,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   415,
     626,   626,     0,     0,   417,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   474,   474,
       0,   401,     0,     0,     0,   344,     0,     0,     0,   344,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     579,     0,     0,     0,     0,   415,     0,     0,     0,     0,
       0,     0,   415,     0,     0,   415,     0,     0,     0,    86,
       0,     0,     0,     0,     0,     0,   417,     0,     0,     0,
       0,     0,     0,     0,     0,   344,     0,     0,     0,     0,
       0,   415,   415,   415,   415,   415,   415,   415,     0,     0,
     415,   415,     0,   415,   415,   415,   415,   415,   415,   415,
     415,    86,   344,     0,     0,     0,     0,     0,     0,     0,
     344,   415,   415,   415,   415,   415,   415,   415,   415,   415,
     415,   415,   415,   415,   415,   415,   415,   415,   415,     0,
     344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1887,     0,     0,     0,
     777,     0,     0,  1137,     0,     0,     0,     0,     0,     0,
       0,   415,   415,     0,     0,     0,     0,     0,   417,     0,
       0,     0,   705,   708,   710,     0,     0,   417,     0,     0,
       0,     0,     0,   417,     0,     0,     0,     0,     0,   731,
       0,    86,    86,    86,     0,    86,   362,     0,    86,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
      86,    86,     0,   417,     0,     0,     0,     0,   417,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   415,
      86,   415,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   474,   417,   474,   417,     0,   863,
       0,   415,     0,     0,     0,     0,     0,     0,     0,     0,
     415,     0,     0,     0,     0,     0,   748,     0,   452,     0,
     474,     0,   474,     0,     0,     0,     0,     0,     0,   417,
    1275,     0,   405,     0,     0,     0,     0,     0,     0,   415,
       0,   415,     0,     0,     0,     0,     0,   359,   658,  1298,
    1302,  1306,  1310,  1314,     0,     0,  1323,  1329,     0,     0,
       0,     0,   748,     0,     0,  1340,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1364,  1368,  1372,
    1376,  1380,     0,     0,  1323,  1393,     0,   452,   452,     0,
       0,   452,   452,   452,     0,    86,     0,     0,     0,     0,
       0,    86,     0,     0,     0,     0,     0,   415,     0,  -871,
       0,     0,  -871,  -871,  -871,     0,  -871,  -871,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   417,     0,
       0,     0,     0,     0,     0,     0,     0,   415,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   415,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -871,     0,   417,     0,     0,     0,  -871,
    -871,  -871,  1138,     0,   344,   344,   474,   474,   474,   474,
     474,     0,  -871,     0,     0,     0,     0,     0,     0,     0,
     474,   474,   474,   474,     0,   652,  -871,   362,     0,     0,
    -871,  -871,  -871,  -871,  -871,  -871,  -871,  -871,     0,   894,
       0,     0,     0,     0,     0,     0,  -871,  -871,   452,   452,
       0,     0,     0,  -871,  -871,   417,  -871,  -871,  -871,     0,
       0,  -871,  -871,     0,  -871,  -871,  -871,  -871,   415,     0,
     415,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   750,     0,     0,     0,     0,     0,   474,
     474,     0,   415,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   415,
       0,     0,     0,   415,    86,     0,   344,     0,     0,     0,
     415,     0,     0,     0,   415,  1267,   417,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   362,    86,     0,     0,   362,     0,  1299,  1303,
    1307,  1311,  1315,     0,     0,  1324,     0,     0,     0,     0,
       0,  1267,   417,    86,     0,     0,     0,     0,     0,   417,
       0,     0,   417,     0,     0,     0,  1365,  1369,  1373,  1377,
    1381,     0,     0,  1324,     0,     0,     0,     0,     0,     0,
    1137,     0,   362,     0,     0,     0,     0,     0,   417,   417,
     417,   417,   417,   417,   417,     0,     0,   417,   417,     0,
     417,   417,   417,   417,   417,   417,   417,   417,  1275,   362,
    1128,     0,     0,     0,     0,  1340,     0,   362,   417,   417,
     417,   417,   417,   417,   417,   417,   417,   417,   417,   417,
     417,   417,   417,   417,   417,   417,     0,   362,     0,     0,
       0,     0,   658,   658,   658,   658,     0,     0,     0,  1323,
       0,  1323,     0,     0,     0,     0,    86,    86,     0,     0,
       0,   415,     0,     0,     0,   415,     0,     0,   417,   417,
       0,  1017,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   415,     0,     0,
       0,  1716,     0,     0,     0,     0,     0,   415,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   415,     0,
       0,     0,     0,     0,  1102,     0,   417,     0,   417,   452,
     452,     0,     0,     0,     0,     0,   415,   374,   344,     0,
       0,     0,     0,   415,     0,   415,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   652,   417,     0,
       0,     0,   415,     0,     0,     0,     0,   417,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    86,     0,
      86,     0,     0,   452,   452,     0,     0,     0,     0,   652,
     652,   652,   652,     0,     0,     0,   417,     0,   417,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   415,     0,     0,     0,     0,
       0,     0,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1234,
       0,     0,     0,  1238,     0,     0,     0,     0,     0,  1610,
       0,     0,     0,     0,   417,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   750,     0,  1637,     0,     0,
       0,     0,     0,     0,  1644,     0,     0,     0,     0,  1276,
       0,     0,     0,     0,   417,     0,     0,     0,     0,  1477,
       0,     0,   415,     0,     0,   417,   415,   415,   415,     0,
       0,     0,     0,     0,     0,     0,  1330,   344,  1324,     0,
    1324,   750,   415,   415,  1341,     0,     0,     0,     0,   344,
       0,   362,   362,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   374,  1394,     0,     0,     0,   415,   415,
       0,   415,   415,     0,     0,     0,   415,   415,   415,   415,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   415,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   415,     0,
       0,     0,     0,     0,     0,   417,     0,   417,     0,     0,
       0,     0,   553,     0,   553,     0,     0,     0,     0,   452,
       0,   452,     0,   415,     0,     0,     0,     0,     0,   417,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      86,     0,     0,     0,     0,   452,   417,   452,     0,     0,
     417,     0,     0,   362,     0,     0,     0,   417,     0,     0,
       0,   417,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   658,     0,     0,
     658,     0,     0,     0,     0,     0,     0,     0,     0,  1128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   344,   344,     0,   415,   415,   415,   415,   415,
     415,   415,   415,     0,     0,     0,     0,     0,   658,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   658,   658,   658,   658,   415,   415,     0,     0,
       0,  1017,     0,     0,    86,     0,   415,     0,     0,     0,
       0,     0,     0,     0,     0,  1005,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1716,     0,     0,
       0,     0,  1924,  1926,  1930,  1934,  1936,  1940,     0,     0,
       0,  1944,  1948,  1952,  1956,     0,     0,     0,     0,     0,
       0,     0,   553,     0,     0,     0,     0,     0,     0,   415,
       0,     0,     0,   415,   415,     0,     0,     0,     0,     0,
       0,   452,   452,   452,   452,   452,     0,     0,   417,     0,
       0,     0,   417,     0,   374,   452,   452,   452,   452,     0,
       0,     0,     0,     0,   652,     0,     0,   652,     0,     0,
       0,     0,     0,     0,     0,     0,   652,     0,     0,     0,
       0,     0,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   417,     0,     0,     0,  1629,  1630,
       0,     0,     0,     0,   417,   652,     0,  1276,     0,     0,
       0,  1642,     0,     0,  1341,   417,  1646,     0,     0,   652,
     652,   652,   652,     0,   452,   452,     0,     0,     0,     0,
       0,     0,     0,   417,     0,   362,     0,     0,     0,     0,
     417,     0,   417,     0,     0,     0,   344,     0,     0,     0,
    1926,  1930,  1936,  1940,  1944,  1948,  1952,  1956,     0,   417,
       0,     0,     0,     0,   344,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   374,
       0,     0,     0,   374,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1005,
       0,     0,     0,     0,     0,     0,  1005,     0,     0,  1005,
    1717,     0,   417,     0,     0,   344,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   374,
       0,     0,     0,     0,     0,     0,    86,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   374,     0,     0,     0,
       0,     0,     0,     0,   374,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   374,     0,  1922,     0,     0,     0,
       0,  1925,  1927,  1931,  1935,  1937,  1941,     0,     0,     0,
    1945,  1949,  1953,  1957,     0,     0,     0,     0,     0,   417,
       0,     0,     0,   417,   417,   417,     0,     0,     0,     0,
       0,     0,     0,   469,   362,     0,   469,     0,     0,   417,
     417,     0,     0,     0,     0,     0,   362,     0,     0,   469,
       0,   469,     0,   469,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   417,   417,     0,   417,   417,
       0,     0,     0,   417,   417,   417,   417,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   417,
       0,     0,     0,  1005,     0,   553,     0,   658,   658,     0,
       0,     0,     0,     0,     0,   417,     0,  1128,     0,  1128,
     658,     0,   620,   658,     0,     0,     0,     0,     0,     0,
       0,   658,     0,     0,  1128,     0,     0,     0,     0,     0,
     417,     0,     0,     0,   553,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,   650,  1005,     0,  1005,     0,     0,     0,     0,
       0,     0,  1017,     0,     0,     0,     0,   246,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   247,    38,   248,     0,
       0,     0,     0,  1017,     0,     0,     0,     0,     0,   362,
     362,   249,   417,   417,   417,   417,   417,   417,   417,   417,
       0,    43,    44,   250,   251,   252,   253,   206,   207,     0,
       0,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   254,     0,   417,   417,     0,     0,     0,     0,     0,
       0,     0,     0,   417,   652,   652,     0,     0,     0,     0,
       0,     0,     0,     0,   652,     0,   652,   652,     0,     0,
     652,  1005,     0,     0,     0,     0,     0,     0,   652,     0,
       0,   652,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   417,     0,   374,   374,
     417,   417,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1128,  1128,  1128,  1128,     0,     0,  1128,     0,
       0,     0,   658,   658,     0,  1128,     0,  1128,   469,   469,
       0,  1017,     0,     0,     0,     0,     0,     0,     0,  1128,
       0,     0,     0,  1919,   553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   469,   469,  1717,     0,     0,     0,
       0,  1642,     0,     0,  1646,     0,   553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   469,   469,     0,     0,
       0,   469,   469,     0,     0,   469,   469,  1005,     0,     0,
     374,     0,  1003,   362,  1005,     0,     0,     0,  1005,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   362,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   469,     0,   469,     0,     0,  1017,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1017,
       0,     0,     0,   221,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   362,     0,     0,     0,     0,     0,     0,   652,
     652,   652,   652,     0,     0,   652,     0,     0,  1128,   652,
     652,     0,   652,     0,   652,   221,     0,  1128,     0,  1128,
       0,     0,     0,   419,   650,     0,   652,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2023,  2024,     0,     0,
       0,     0,     0,   511,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   650,   650,   650,   650,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1128,  1128,     0,     0,  1128,     0,  1128,
       0,     0,  1128,     0,     0,     0,  1128,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,  1128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1005,     0,     0,     0,     0,  1003,     0,     0,     0,
       0,   553,     0,  1003,     0,     0,  1003,  1128,     0,  1017,
       0,   307,     0,     0,     0,     0,     0,   308,   309,   310,
       0,     0,     0,     0,     0,   652,     0,     0,     0,     0,
     311,   312,   374,     0,   652,     0,   652,  1005,     0,  1005,
       0,     0,     0,     0,   313,     0,     0,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  1005,     0,     0,     0,
       0,     0,     0,     0,   322,   323,   324,     0,     0,   325,
    1160,   326,     0,     0,  1161,     0,     0,     0,     0,   327,
     328,  1724,   329,   330,   331,   332,     0,  1017,     0,     0,
     652,   652,     0,     0,   652,     0,   652,     0,     0,   652,
       0,     0,     0,   652,     0,     0,     0,     0,     0,  1005,
    2121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1017,   834,
       0,     0,     0,     0,     0,     0,   652,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   469,   469,     0,   652,     0,     0,     0,   869,   511,
       0,     0,     0,   878,   126,     0,     0,     0,     0,  2164,
       0,     0,   885,     0,     0,   892,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   180,   126,     0,     0,     0,
     553,     0,   553,   232,     0,     0,     0,     0,     0,   943,
       0,   374,     0,     0,   469,   959,   553,   553,     0,     0,
       0,     0,     0,   374,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1003,     0,  1003,   126,   126,     0,    74,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1005,   469,   469,     0,     0,   469,   469,   469,
       0,     0,     0,   221,     0,   532,     0,   117,     0,     0,
       0,     0,     0,   221,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   221,     0,     0,   221,     0,   221,   178,
     221,     0,     0,     0,     0,     0,     0,     0,   261,    74,
       0,     0,   596,     0,     0,   598,    74,    74,  1003,     0,
       0,   650,     0,     0,   650,     0,     0,     0,     0,     0,
       0,     0,     0,   650,   385,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   126,     0,     0,
       0,     0,     0,     0,     0,     0,   374,   374,   484,     0,
     180,     0,   650,     0,     0,     0,     0,     0,     0,     0,
     484,     0,     0,     0,   484,     0,   650,   650,   650,   650,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   469,   469,     0,     0,     0,     0,
     553,     0,   261,   261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   553,   553,     0,
       0,     0,     0,     0,  1003,     0,     0,     0,     0,     0,
       0,  1003,     0,     0,     0,  1003,     0,   126,     0,     0,
       0,   612,     0,     0,   261,   261,   261,     0,     0,     0,
       0,     0,     0,     0,   178,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   178,   261,    74,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   126,
       0,     0,     0,     0,   715,     0,     0,     0,     0,     0,
     715,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   738,     0,     0,   834,   834,   834,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   232,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   419,   419,   221,
     374,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   374,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   126,
     126,   126,     0,  1010,     0,     0,   598,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   126,   126,   126,
       0,     0,     0,     0,     0,   574,     0,     0,     0,   374,
       0,   874,  1469,     0,     0,     0,     0,     0,   126,     0,
       0,     0,   874,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   419,     0,     0,
       0,     0,     0,     0,   511,   511,     0,     0,  1003,     0,
       0,     0,     0,     0,     0,   511,     0,   574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   965,   469,   469,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1003,     0,  1003,   574,     0,     0,
       0,     0,     0,     0,     0,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,   261,     0,     0,     0,
       0,     0,     0,   261,     0,     0,   261,     0,     0,   469,
     469,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   221,   232,     0,     0,     0,   221,     0,     0,
       0,     0,     0,  1569,     0,     0,     0,     0,     0,  1569,
       0,     0,     0,     0,     0,   221,  1003,     0,     0,   307,
       0,   650,   650,     0,     0,   308,   309,   310,     0,     0,
       0,   650,     0,   650,   650,     0,     0,   650,   311,   312,
       0,     0,     0,     0,     0,   650,     0,     0,   650,     0,
       0,     0,   313,     0,     0,     0,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,   324,  1142,     0,   325,  1160,   326,
       0,     0,  1729,     0,     0,     0,  1730,   327,   328,     0,
     329,   330,   331,   332,     0,     0,     0,     0,     0,   552,
     261,   261,   261,   261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   261,   261,
     261,     0,     0,   178,   419,   221,     0,     0,     0,  1200,
       0,     0,     0,     0,     0,     0,     0,   261,     0,     0,
       0,     0,     0,     0,  1213,  1223,   738,     0,  1213,  1223,
       0,     0,     0,     0,     0,  1200,     0,     0,  1200,     0,
       0,     0,     0,     0,     0,     0,     0,  1244,     0,     0,
     261,     0,     0,     0,     0,     0,     0,   261,     0,     0,
     261,     0,   126,     0,     0,     0,     0,     0,     0,  1003,
       0,   700,     0,     0,     0,     0,     0,     0,     0,     0,
     552,     0,     0,     0,     0,   469,   552,   469,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,     0,     0,    91,     0,     0,     0,     0,     0,
       0,   469,     0,   469,     0,     0,     0,     0,   596,     0,
     598,   126,     0,     0,     0,     0,     0,   398,     0,     0,
       0,     0,     0,     0,     0,     0,   650,   650,   650,   650,
     574,     0,   650,     0,     0,     0,   650,   650,     0,   650,
       0,   650,     0,     0,     0,   120,   132,     0,   552,     0,
     552,     0,     0,   650,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   574,     0,     0,   398,     0,
       0,     0,     0,  1428,   574,     0,     0,   183,   132,     0,
       0,   574,   230,     0,  1428,   117,   738,    91,   574,     0,
       0,   834,   834,     0,    91,    91,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   577,   419,     0,     0,
       0,   419,   386,     0,   126,   126,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   395,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   574,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   574,     0,     0,     0,     0,
       0,     0,   657,     0,     0,     0,     0,   469,   469,   469,
     469,   469,     0,   687,   419,     0,   531,     0,     0,     0,
       0,   469,   469,   469,   469,   419,  1788,   419,  1788,   547,
       0,  1004,   650,     0,   261,   261,   261,     0,     0,     0,
       0,   650,   612,   650,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   581,     0,   736,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   596,     0,   598,     0,
     469,   469,     0,     0,     0,     0,     0,   650,   650,   132,
       0,   650,     0,   650,     0,     0,   650,     0,     0,     0,
     650,     0,   183,     0,     0,     0,     0,     0,     0,     0,
     852,     0,   691,     0,    91,     0,   857,     0,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   261,   650,     0,   261,     0,     0,   261,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1142,     0,     0,     0,     0,     0,     0,     0,   736,
       0,   650,     0,     0,     0,   511,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   261,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   934,     0,     0,  1192,
     261,   261,   261,   261,     0,     0,     0,     0,   419,     0,
     221,     0,     0,   419,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   261,     0,   261,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1665,
       0,     0,   612,     0,     0,  1004,     0,     0,     0,     0,
       0,     0,  1004,   864,     0,  1004,  1009,     0,     0,  1014,
       0,     0,  1691,     0,     0,     0,     0,     0,     0,  1691,
       0,   132,  1009,     0,     0,     0,     0,     0,   419,     0,
       0,     0,     0,     0,     0,     0,     0,   261,   261,     0,
       0,     0,     0,   577,   261,   261,     0,     0,   261,   261,
       0,     0,     0,     0,     0,   938,   577,     0,   946,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   864,     0,     0,   126,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,   132,   132,     0,     0,     0,     0,     0,  1140,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   132,
     132,     0,     0,     0,     0,  1158,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   657,   657,   657,   657,
    1053,     0,  1062,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1064,     0,     0,   687,     0,     0,     0,
       0,     0,   687,     0,     0,     0,     0,     0,     0,  1004,
       0,   552,   419,     0,     0,   736,     0,     0,   736,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   547,
       0,     0,   126,     0,     0,     0,     0,     0,     0,     0,
       0,   736,     0,     0,     0,     0,     0,  1158,     0,     0,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1274,     0,     0,     0,     0,  1004,
       0,  1004,   261,     0,   260,   574,     0,   419,     0,   419,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1184,     0,     0,     0,     0,     0,
       0,   691,  1327,     0,     0,     0,     0,     0,     0,     0,
    1339,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1218,     0,     0,     0,  1218,     0,     0,     0,
    1391,     0,     0,     0,     0,     0,     0,   552,     0,     0,
       0,     0,     0,     0,     0,   864,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   260,   260,
       0,     0,     0,   687,     0,   574,     0,  1004,     0,     0,
    1437,     0,     0,     0,     0,     0,     0,     0,   552,   261,
     261,     0,   736,     0,     0,   261,   261,     0,     0,     0,
       0,     0,     0,   573,     0,     0,     0,     0,   261,     0,
       0,   261,     0,     0,     0,     0,     0,     0,     0,   261,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1473,     0,     0,     0,     0,   577,     0,
       0,     0,     0,     0,     0,     0,     0,   611,     0,     0,
     260,   260,   260,     0,   934,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   864,  1418,     0,     0,
       0,   260,     0,   864,     0,     0,     0,     0,     0,     0,
     552,   864,  1432,     0,   126,     0,     0,     0,     0,  1439,
     714,     0,   864,   120,   132,     0,   714,     0,     0,     0,
       0,   934,   552,     0,     0,     0,     0,   737,     0,     0,
     738,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1004,     0,     0,     0,     0,     0,     0,
    1004,     0,     0,   132,  1004,     0,     0,     0,     0,     0,
       0,  1472,     0,     0,     0,     0,     0,   581,   398,     0,
       0,     0,     0,   132,     0,     0,     0,   577,     0,   577,
       0,     0,     0,   938,     0,     0,     0,     0,     0,     0,
       0,     0,   261,   261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   574,     0,     0,     0,     0,     0,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
     938,   657,     0,     0,   657,  1596,  1598,     0,  1601,     0,
       0,     0,     0,     0,     0,     0,  1611,     0,     0,     0,
       0,     0,     0,     0,  1620,     0,     0,     0,     0,     0,
       0,  1158,     0,     0,     0,     0,     0,     0,     0,     0,
     261,   261,   657,   573,     0,     0,  1550,     0,     0,  1158,
       0,     0,     0,     0,  1158,  1558,   657,   657,   657,   657,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   687,
       0,   687,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   573,     0,  1655,     0,  1659,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   260,   738,     0,     0,     0,     0,     0,   260,
       0,     0,   260,     0,     0,     0,     0,     0,     0,  1158,
       0,     0,     0,     0,     0,     0,     0,  1004,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1158,     0,     0,     0,     0,
    1129,     0,     0,  1004,     0,  1004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1004,     0,     0,     0,     0,   864,     0,     0,
     864,     0,  1218,     0,  1168,  1172,     0,     0,     0,     0,
    1682,     0,     0,     0,     0,     0,     0,  1158,     0,     0,
    1218,     0,     0,     0,     0,     0,     0,  1218,     0,     0,
    1158,     0,     0,     0,     0,     0,   260,   260,   260,   260,
       0,     0,     0,     0,     0,  1004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   260,   260,   260,     0,     0,     0,
       0,     0,     0,     0,     0,  1199,     0,     0,     0,     0,
       0,  1158,     0,   260,     0,     0,     0,     0,     0,     0,
    1212,  1222,   737,     0,  1212,  1222,     0,     0,     0,     0,
       0,  1199,     0,     0,  1199,     0,     0,     0,     0,     0,
       0,     0,     0,  1243,     0,     0,   260,   687,     0,     0,
       0,     0,     0,   260,  1759,     0,   260,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   552,     0,   552,     0,
       0,     0,  1437,     0,   577,     0,     0,  1772,     0,     0,
    1014,     0,   552,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1928,  1932,
       0,  1938,  1942,     0,     0,     0,  1946,  1950,  1954,  1958,
       0,     0,     0,     0,     0,     0,   573,     0,     0,     0,
       0,  1748,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   263,     0,  1755,     0,     0,  1004,     0,
       0,     0,  1758,     0,     0,   852,     0,     0,     0,     0,
     395,   573,     0,   577,     0,     0,     0,     0,   735,     0,
     573,     0,     0,     0,   577,     0,     0,   573,     0,     0,
       0,  1439,   737,   581,   573,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   657,   657,     0,     0,     0,     0,  1158,     0,  1158,
       0,     0,  1158,   657,     0,     0,     0,     0,  1846,  1849,
       0,  1851,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1158,     0,  1862,     0,   573,     0,   263,   263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   573,     0,     0,     0,  1928,  1932,  1938,  1942,  1946,
    1950,  1954,  1958,  1812,     0,  1158,     0,     0,     0,  1158,
       0,     0,   576,     0,     0,     0,     0,     0,     0,     0,
     735,     0,     0,   581,     0,     0,     0,   552,     0,     0,
     260,   260,   260,     0,     0,     0,   552,     0,   611,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   614,     0,     0,   263,
     263,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     263,     0,     0,     0,     0,     0,     0,     0,     0,  1004,
       0,     0,     0,   552,   552,     0,     0,     0,     0,   717,
     687,   687,     0,  1967,     0,   717,     0,  1585,     0,     0,
    1591,     0,     0,     0,     0,     0,   740,     0,     0,  1608,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1888,
       0,     0,     0,     0,     0,     0,     0,     0,   260,     0,
       0,   260,     0,     0,   260,     0,     0,     0,  1632,     0,
       0,     0,     0,     0,     0,     0,     0,  1009,     0,     0,
       0,     0,  1168,  1172,  1168,  1172,     0,     0,     0,     0,
       0,     0,     0,     0,  1158,     0,     0,     0,     0,     0,
       0,     0,   260,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   657,  1158,     0,     0,   260,   260,   260,   260,
    1158,  1418,     0,     0,  1851,     0,  2005,     0,     0,     0,
     576,     0,     0,     0,     0,  2011,     0,     0,     0,   260,
    1139,   260,     0,  1758,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1664,  1157,     0,   611,     0,
    1162,     0,   864,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1690,   736,
       0,     0,   576,     0,     0,  1690,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   260,   260,     0,   735,     0,     0,   735,
     260,   260,     0,     0,   260,   260,     0,     0,     0,     0,
       0,     0,   576,  1227,     0,     0,     0,     0,     0,     0,
       0,     0,   735,     0,     0,     0,     0,     0,  1157,  1162,
       0,   263,     0,     0,     0,     0,     0,     0,   263,     0,
       0,   263,     0,     0,     0,     0,   122,     0,     0,     0,
       0,  1682,     0,   139,     0,  1273,     0,     0,     0,     0,
       0,     0,     0,  2068,  2071,     0,  1158,     0,  1158,     0,
       0,   657,  1158,   657,     0,     0,   162,   171,   194,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1325,     0,     0,     0,     0,     0,     0,
       0,  1338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1389,     0,     0,     0,   122,   122,     0,     0,  1158,
       0,     0,  1158,     0,     0,     0,     0,     0,     0,     0,
     657,     0,   494,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   525,     0,
       0,     0,     0,     0,     0,   263,   263,   263,   263,     0,
       0,     0,     0,     0,     0,     0,  1158,   122,     0,     0,
       0,     0,     0,   735,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   263,   263,   263,     0,     0,     0,     0,
       0,     0,     0,     0,  1202,     0,     0,     0,   260,     0,
       0,   573,   263,     0,   162,   570,     0,     0,     0,  1215,
    1225,   740,     0,  1215,  1225,     0,     0,     0,     0,     0,
    1202,     0,     0,  1202,     0,     0,     0,     0,     0,     0,
       0,     0,  1246,     0,     0,   263,     0,     0,     0,     0,
       0,     0,   263,     0,     0,   263,     0,     0,     0,   171,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   171,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   570,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1826,  1830,     0,
       0,     0,     0,     0,     0,     0,     0,  1839,     0,  1842,
    1585,   573,     0,  1591,     0,     0,     0,     0,     0,     0,
       0,  1632,     0,     0,  1855,   260,   260,     0,     0,     0,
       0,   260,   260,     0,     0,   576,     0,     0,     0,     0,
       0,     0,     0,     0,   260,     0,     0,   260,     0,     0,
       0,     0,     0,     0,     0,   260,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     576,     0,     0,     0,     0,     0,     0,     0,     0,   576,
       0,     0,     0,     0,     0,     0,   576,     0,     0,   122,
       0,   740,     0,   576,     0,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1595,  1597,     0,  1600,
       0,     0,     0,     0,     0,     0,     0,  1139,     0,     0,
    1162,     0,     0,     0,     0,  1619,     0,     0,     0,     0,
       0,   570,  1157,  1162,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   576,     0,   737,     0,     0,     0,
    1157,  1162,     0,     0,     0,  1157,     0,     0,     0,     0,
     576,     0,     0,     0,     0,   570,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   162,     0,     0,     0,     0,  1653,     0,  1657,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   263,
     263,   263,     0,     0,     0,     0,     0,   614,   260,   260,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1157,   122,   122,   122,     0,   122,     0,     0,   122,     0,
     573,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     122,   122,  1994,  1995,  1996,  1997,     0,     0,  1998,     0,
       0,     0,  1826,  1830,     0,  1839,     0,  1842,   525,     0,
     570,     0,   122,     0,     0,     0,  1157,  1162,     0,  2007,
       0,     0,     0,     0,     0,   122,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   260,   260,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   263,     0,     0,
     263,     0,     0,   263,     0,     0,     0,     0,  1157,     0,
    1162,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1157,  1162,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   737,
       0,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   263,   263,   263,   263,     0,
       0,     0,     0,     0,     0,     0,     0,  1180,     0,     0,
       0,     0,  1157,     0,  1162,   122,     0,     0,   263,     0,
     263,   570,   125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1667,     0,     0,   614,  1998,     0,
       0,     0,     0,     0,     0,     0,     0,  2076,     0,  2079,
       0,     0,     0,   125,   125,     0,     0,  1693,     0,     0,
       0,     0,     0,     0,  1693,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   263,   263,     0,     0,     0,     0,     0,   263,
     263,     0,     0,   263,   263,     0,     1,     0,     0,     0,
       0,   125,   125,  2108,  2109,     0,     0,  2076,     0,  2079,
       0,     0,  2113,     0,     0,     0,  2115,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,  2115,
       0,     0,     0,   125,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,  2153,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   578,     0,    40,     0,     0,     0,     0,  1822,     0,
     162,     0,   570,    43,    44,    45,    46,    47,    48,   570,
       0,     0,     0,    51,   570,     0,   862,     0,  1157,  1162,
    1157,  1162,     0,  1157,  1841,     0,     0,   567,     0,  1595,
    1848,     0,  1619,     0,  1162,   125,     0,     0,     0,     0,
       0,     0,  1157,  1162,  1619,     0,     0,     0,   125,     0,
       0,     0,     0,   122,     0,     0,     0,     0,   688,     0,
       0,     0,   122,     0,     0,     0,     0,   570,     0,     0,
       0,     1,     0,   122,     0,     0,  1157,     0,  1162,     0,
    1157,     0,  1162,   570,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   263,     0,     0,
     576,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     570,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,     0,     0,    40,     0,
       0,   578,     0,     0,     0,     0,   122,   122,    43,    44,
      45,    46,    47,    48,     0,     0,   122,     0,   122,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     576,     0,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,     0,     0,   263,   263,     0,     0,     0,     0,
     263,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   263,     0,     0,   263,     0,     0,     0,
       0,   578,     0,     0,   263,  1157,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1157,     0,     0,     0,     0,  1162,
       0,  1157,  1841,     0,  1162,  1619,     0,  2004,     0,  2006,
       0,     0,     0,     0,     0,  1162,  2010,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   125,   125,
       0,   125,     0,     0,   688,     0,     0,     0,   122,     0,
     122,     0,     0,     0,     0,   125,   125,   125,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     735,     0,     0,     0,     0,   740,   125,   482,   578,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   482,
       0,   578,     0,   482,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,   258,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   263,   263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   572,     0,     0,   576,
       0,     0,     0,     0,  2067,  2070,     0,  1157,  1162,  1157,
       0,     0,     0,  1157,  1841,     0,     0,     0,     0,     0,
       0,     0,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     610,   688,     0,   258,   258,   258,     0,   688,     0,     2,
       0,     0,     0,     0,     0,   263,   263,     0,   121,     0,
       0,     0,     0,     0,   258,     0,     0,     0,     0,     0,
    1157,  1162,     0,  1157,  1841,     0,     0,     0,  2114,     0,
       0,     0,     0,   713,     0,     0,   307,     0,     0,   713,
       0,     0,   308,   309,   310,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   311,   312,    38,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1157,   740,   313,
       0,     0,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,     0,     0,     0,   122,     0,     0,   322,
     323,   889,     0,   122,   890,   733,   326,     0,     0,     0,
     122,     0,     0,     0,   327,   328,     0,   329,   330,   331,
     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,     0,   570,     0,     0,   122,     0,     0,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   572,     0,     0,     0,     0,     0,
     873,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   873,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   578,     0,
       0,     0,     0,     0,     0,   578,     0,     0,     0,     0,
     125,     0,     0,     0,     0,     0,   572,     0,     0,     0,
       0,     0,     0,     0,   122,     0,     0,     0,     0,     0,
       0,     0,   122,   964,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   570,     0,     0,     0,     0,     0,   125,
       0,     0,     0,     0,     0,     0,   572,   302,   578,     1,
     303,   106,   304,   578,   305,   306,     0,     0,     0,   125,
       0,     0,     0,     0,     0,   258,     0,     0,     0,   578,
       0,     0,   258,     0,     2,   258,     0,     0,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,     0,     0,   578,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     311,   407,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,    40,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,    45,    46,
      47,    48,   125,   125,   322,   323,   324,     0,     0,   325,
     733,   326,   578,   259,   578,     0,     0,     0,     0,   327,
     328,     0,   329,   330,   331,   332,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   258,
     258,   258,   258,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     122,     0,   122,   259,     0,     0,     0,   258,   258,   258,
       0,     0,     0,     0,     0,   259,     0,     0,     0,   259,
       0,     0,     0,     0,     0,     0,   258,     0,     0,     0,
       0,     0,     0,  1211,  1221,     0,     0,  1211,  1221,     0,
       0,     0,     0,     0,     0,     0,     0,   259,   259,     0,
       0,     0,     0,     0,     0,     0,   122,     0,     0,   258,
       0,     0,     0,     0,     0,     0,   258,     0,     0,   258,
       0,     0,     0,     0,   688,     0,   688,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,     0,   259,
     259,   259,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   572,
     259,     0,     0,     0,     0,     0,     0,     0,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,   259,
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,     0,     0,     0,   572,     2,     0,     0,     0,     0,
     264,     0,  1427,   572,     0,     0,     0,     0,     0,     0,
     572,     0,     0,  1427,     0,     0,     0,   572,     0,  1117,
    1118,  1119,   630,  1120,  1121,  1122,  1123,   635,   636,  1124,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,    32,     0,     0,     0,
     264,   311,   312,  1125,     0,   640,   641,   642,     0,     0,
       0,     0,   264,     0,     0,   313,   264,     0,   572,   314,
     315,   316,   317,   318,   319,   320,   321,    43,    44,     0,
       0,     0,     0,     0,   572,   322,   323,   324,     0,     0,
     325,     0,   326,   643,   264,   264,   259,   254,     0,   644,
     327,   328,     0,   329,   330,   331,   332,   259,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   258,   258,   258,     0,     0,     0,     0,
       0,   610,   578,     0,     0,     0,     0,     0,     0,   578,
       0,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
       0,     0,     0,     0,     0,     0,     0,   578,     0,   578,
       0,     0,   578,   264,     0,   578,   264,   264,   264,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   264,     0,     0,
       0,   259,     0,     0,     0,     0,     0,     0,   259,     0,
       0,   259,     0,     0,     0,     0,   264,     0,     0,     0,
       0,     0,   264,     0,     0,     0,     0,     0,     0,     0,
       0,   258,     0,     0,   258,     0,     0,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,     0,     0,     0,   578,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   578,
       0,     0,     0,     0,     0,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   258,
     258,   258,   258,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   258,     0,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   610,     0,   264,     0,   259,   259,   259,   259,     0,
       0,     0,     0,     0,   264,     0,     0,     0,     0,     0,
       0,  1689,     0,     0,     0,     0,     0,     0,  1689,     0,
       0,     0,     0,   259,   259,   259,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   258,   258,     0,     0,
       0,     0,   259,   258,   258,     0,     0,   258,   258,   259,
     259,     0,     0,   259,   259,     0,   264,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,     0,   259,     0,     0,   259,     0,     0,     0,     0,
       0,     0,   302,     0,     1,   303,   106,   304,   264,   305,
     306,     0,     0,     0,     0,   264,     0,     0,   264,     0,
       0,     0,     0,     0,     0,   578,   578,     0,   578,     2,
       0,     0,     0,     0,     0,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1196,    27,     0,     0,
       0,     0,   308,   309,   310,    28,    29,     0,     0,     0,
      32,     0,   125,    35,    36,   311,   407,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,    40,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,    45,    46,    47,    48,     0,   259,   322,
     323,   324,     0,     0,   325,   733,   326,     0,     0,   259,
       0,     0,     0,     0,   327,   328,     0,   329,   330,   331,
     332,     0,   264,   264,   264,   264,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,     0,     0,   572,     0,     0,     0,     0,     0,
     264,   264,   264,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
       0,     0,     0,     0,     0,     0,   264,   264,     0,     0,
     264,   264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   264,     0,     0,     0,     0,     0,     0,   264,
       0,     0,   264,     0,     0,     0,     0,     0,     0,   259,
     259,   259,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   572,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   258,   258,
       0,     0,     0,     0,   258,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   258,     0,     0,
     258,     0,     0,     0,     0,     0,     0,     0,   258,     0,
       0,     0,     0,     0,     0,     0,  -458,     0,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,     0,     0,     0,   259,     0,     0,
     259,     0,     0,   259,     0,   264,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   264,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -458,     0,     0,     0,     0,     0,  -458,  -458,  -458,     0,
       0,   259,     0,     0,     0,     0,     0,     0,     0,  -458,
    -458,     0,     0,     0,     0,   259,   259,   259,   259,     0,
       0,     0,     0,  -458,     0,     0,     0,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,     0,     0,     0,   259,     0,
     259,     0,     0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,     0,     0,  -458,   259,  -458,  -458,
       0,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
       0,   258,   258,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,     0,   259,     0,   264,   264,   264,     0,
       0,     0,     0,   572,   264,     0,     0,     0,     0,     0,
       0,     0,   259,   259,     0,     0,     0,     0,     0,   259,
     259,     0,     0,   259,   259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   258,
     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -458,     0,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,     0,     0,     0,   264,     0,     0,   264,     0,     0,
     264,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -458,     0,     0,
       0,     0,     0,  -458,  -458,  -458,     0,     0,   264,     0,
       0,     0,     0,     0,     0,     0,  -458,  -458,     0,     0,
       0,     0,   264,   264,   264,   264,     0,     0,     0,     0,
    -458,     0,     0,     0,  -458,  -458,  -458,  -458,  -458,  -458,
    -458,  -458,     0,     0,     0,   264,     0,   264,     0,     0,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,  -458,     0,  -458,
    -458,     0,     0,  -458,   264,  -458,  -458,     0,  -458,  -458,
    -458,  -458,  -458,  -458,  -458,  -458,  -458,     0,     0,     0,
       0,     0,     0,     0,   264,     0,     0,   259,     0,     0,
       0,   264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
     264,     0,     0,     0,     0,     0,   264,   264,     0,     0,
     264,   264,     0,     0,     0,     0,     0,     0,   756,     0,
       0,     0,     0,     0,   757,   758,   759,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -345,     0,     0,     0,     0,     0,     0,
       0,  -345,  -345,     0,   259,   259,  -345,     0,     0,     0,
     259,   259,  -345,  -345,  -345,     0,     0,     0,     0,     0,
       0,     0,     0,   259,     0,     0,   259,  -345,     0,     0,
       0,     0,     0,     0,   259,     0,     0,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,
     760,     0,     0,  -345,  1531,  -345,  -345,     0,   761,     0,
       0,   762,     0,  -345,  -345,  -345,     0,  -345,  -345,  -345,
    -345,  -345,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -907,   584,
       0,  -907,  -907,  -907,  -907,     0,  -907,  -907,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   264,     0,  -907,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,     0,
       0,  -907,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -907,  -907,     0,  -907,     0,     0,  -907,
    -907,  -907,  -907,  -907,     0,     0,  -907,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,   259,   259,  -907,
    -907,  -907,  -907,     0,  -907,     0,  -907,  -907,  -907,     0,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,     0,
       0,  -907,   848,  -907,  -907,     0,   586,  -907,  -907,     0,
       0,  -907,  -907,     0,  -907,  -907,  -907,  -907,     0,     0,
       0,   264,   264,     0,     0,     0,     0,   264,   264,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     264,     0,     0,   264,     0,   259,   259,     0,     0,  -345,
     756,   264,  -345,  -345,  -345,  -345,   757,   758,   759,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,     0,  -345,  -345,     0,  -345,     0,     0,
    -345,  -345,  -345,  -345,  -345,     0,     0,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,     0,  -345,     0,  -345,  -345,  -345,
       0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,   760,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
     761,  -345,  -345,   762,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   264,   264,  -450,  1153,     0,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,
       0,  -450,  -450,     0,  -450,     0,     0,  -450,  -450,  -450,
    -450,  -450,   264,   264,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,     0,  -450,     0,  -450,  -450,  -450,     0,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -304,   302,     0,     1,   303,   106,   304,  -304,   305,
     306,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     2,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,     0,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,     0,     0,   307,  -304,     0,  -304,
       0,     0,   308,   309,   310,  -304,  -304,     0,     0,  -304,
    -304,  -304,  -304,  -304,  -304,   311,   312,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,     0,  -304,     0,   313,
    -304,  -304,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,   322,
     323,   324,  -304,  -304,   325,  1241,   326,  -304,  -304,  1156,
    -304,  -304,  -304,  -304,   327,   328,  -304,   329,   330,   331,
     332,  -304,  -304,  -304,  -304,  -304,  -305,   302,     0,     1,
     303,   106,   304,  -305,   305,   306,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,     2,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,
       0,   307,  -305,     0,  -305,     0,     0,   308,   309,   310,
    -305,  -305,     0,     0,  -305,  -305,  -305,  -305,  -305,  -305,
     311,   312,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,     0,  -305,     0,   313,  -305,  -305,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,   322,   323,   324,  -305,  -305,   325,
    1160,   326,  -305,  -305,  1161,  -305,  -305,  -305,  -305,   327,
     328,  -305,   329,   330,   331,   332,  -305,  -305,  -305,  -305,
    -305,  -565,   302,     0,     1,   303,   106,   304,  -565,   305,
     306,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,     2,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,     0,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,     0,     0,   307,  -565,     0,  -565,
       0,     0,   308,   309,   310,  -565,  -565,     0,     0,  -565,
    -565,  -565,  -565,  -565,  -565,   311,   312,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,     0,  -565,     0,   313,
    -565,  -565,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,   322,
     323,   324,  -565,  -565,   325,  -565,   326,  -565,  -565,  -565,
    -565,   744,  -565,  1322,   327,   328,  -565,   329,   330,   331,
     332,  -565,  -565,  -565,  -565,  -565,  -566,   302,     0,     1,
     303,   106,   304,  -566,   305,   306,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,     2,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,  -566,  -566,
    -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,     0,
       0,   307,  -566,     0,  -566,     0,     0,   308,   309,   310,
    -566,  -566,     0,     0,  -566,  -566,  -566,  -566,  -566,  -566,
     311,   312,  -566,  -566,  -566,  -566,  -566,  -566,  -566,  -566,
    -566,     0,  -566,     0,   313,  -566,  -566,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -566,  -566,  -566,  -566,
    -566,  -566,  -566,  -566,   322,   323,   324,  -566,  -566,   325,
    -566,   326,  -566,  -566,  -566,  -566,   744,  -566,  1388,   327,
     328,  -566,   329,   330,   331,   332,  -566,  -566,  -566,  -566,
    -566,  -576,   302,     0,     1,   303,   106,   304,  -576,   305,
     306,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     2,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,     0,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,     0,     0,   307,  -576,     0,  -576,
       0,     0,   308,   309,   310,  -576,  -576,     0,     0,  -576,
    -576,  -576,  -576,  -576,  -576,   311,   312,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,     0,   313,
    -576,  -576,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,   322,
     323,   324,  -576,  -576,   325,  -576,   326,  -576,  -576,  1156,
    -576,  -576,  -576,  -576,   327,   328,  -576,   329,   330,   331,
     332,  -576,  -576,  -576,  -576,  -576,  -578,   302,     0,     1,
     303,   106,   304,  -578,   305,   306,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     2,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,
       0,   307,  -578,     0,  -578,     0,     0,   308,   309,   310,
    -578,  -578,     0,     0,  -578,  -578,  -578,  -578,  -578,  -578,
     311,   312,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,     0,  -578,     0,   313,  -578,  -578,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,   322,   323,   324,  -578,  -578,   325,
    1160,   326,  -578,  -578,  1161,  -578,  -578,  -578,  -578,   327,
     328,  -578,   329,   330,   331,   332,  -578,  -578,  -578,  -578,
    -578,  -577,   302,     0,     1,   303,   106,   304,  -577,   305,
     306,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     2,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,     0,     0,   307,  -577,     0,  -577,
       0,     0,   308,   309,   310,  -577,  -577,     0,     0,  -577,
    -577,  -577,  -577,  -577,  -577,   311,   312,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,     0,   313,
    -577,  -577,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,   322,
     323,   324,  -577,  -577,   325,  -577,   326,  -577,  -577,  1156,
    -577,  -577,  -577,  -577,   327,   328,  -577,   329,   330,   331,
     332,  -577,  -577,  -577,  -577,  -577,  -338,  1884,     0,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,
       0,  -338,  -338,     0,  -338,     0,     0,  -338,  -338,  -338,
    -338,  -338,     0,     0,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,     0,  -338,     0,  -338,  -338,  -338,     0,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -342,  1920,     0,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,     0,     0,  -342,  -342,     0,  -342,
       0,     0,  -342,  -342,  -342,  -342,  -342,     0,     0,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,     0,  -342,     0,  -342,
    -342,  -342,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -332,   302,     0,     1,
     303,   106,   304,  -332,   305,   306,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,     2,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,     0,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,     0,
       0,   307,  -332,     0,  -332,     0,     0,   308,   309,   310,
    -332,  -332,     0,     0,  -332,  -332,  -332,  -332,  -332,  -332,
     311,   312,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,     0,  -332,     0,   313,  -332,  -332,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,   322,   323,   324,  -332,  -332,   325,
    -332,   326,  -332,  -332,  -332,  -332,   744,  -332,  -332,   327,
     328,  -332,   329,   330,   331,   332,  -332,  -332,  -332,  -332,
    -332,  -543,   302,     0,     1,   303,   106,   304,  -543,   305,
     306,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,     2,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,     0,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,     0,     0,   307,  -543,     0,  -543,
       0,     0,   308,   309,   310,  -543,  -543,     0,     0,  -543,
    -543,  -543,  -543,  -543,  -543,   311,   312,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,     0,  -543,     0,   313,
    -543,  -543,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,   322,
     323,   324,  -543,  -543,   325,  -543,   326,  -543,  -543,  -543,
    -543,   744,  -543,  -543,   327,   328,  -543,   329,   330,   331,
     332,  -543,  -543,  -543,  -543,  -543,  -551,   302,     0,     1,
     303,   106,   304,  -551,   305,   306,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,     2,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,     0,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,     0,
       0,   307,  -551,     0,  -551,     0,     0,   308,   309,   310,
    -551,  -551,     0,     0,  -551,  -551,  -551,  -551,  -551,  -551,
     311,   312,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,     0,  -551,     0,   313,  -551,  -551,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,   322,   323,   324,  -551,  -551,   325,
    -551,   326,  -551,  -551,  -551,  -551,   744,  -551,  -551,   327,
     328,  -551,   329,   330,   331,   332,  -551,  -551,  -551,  -551,
    -551,  -544,   302,     0,     1,   303,   106,   304,  -544,   305,
     306,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     2,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,     0,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,     0,     0,   307,  -544,     0,  -544,
       0,     0,   308,   309,   310,  -544,  -544,     0,     0,  -544,
    -544,  -544,  -544,  -544,  -544,   311,   312,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,     0,  -544,     0,   313,
    -544,  -544,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,   322,
     323,   324,  -544,  -544,   325,  -544,   326,  -544,  -544,  -544,
    -544,   744,  -544,  -544,   327,   328,  -544,   329,   330,   331,
     332,  -544,  -544,  -544,  -544,  -544,  -552,   302,     0,     1,
     303,   106,   304,  -552,   305,   306,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,     2,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,
       0,   307,  -552,     0,  -552,     0,     0,   308,   309,   310,
    -552,  -552,     0,     0,  -552,  -552,  -552,  -552,  -552,  -552,
     311,   312,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,     0,  -552,     0,   313,  -552,  -552,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,   322,   323,   324,  -552,  -552,   325,
    -552,   326,  -552,  -552,  -552,  -552,   744,  -552,  -552,   327,
     328,  -552,   329,   330,   331,   332,  -552,  -552,  -552,  -552,
    -552,  -545,   302,     0,     1,   303,   106,   304,  -545,   305,
     306,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     2,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,     0,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,     0,     0,   307,  -545,     0,  -545,
       0,     0,   308,   309,   310,  -545,  -545,     0,     0,  -545,
    -545,  -545,  -545,  -545,  -545,   311,   312,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,     0,   313,
    -545,  -545,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,   322,
     323,   324,  -545,  -545,   325,  -545,   326,  -545,  -545,  -545,
    -545,   744,  -545,  -545,   327,   328,  -545,   329,   330,   331,
     332,  -545,  -545,  -545,  -545,  -545,  -553,   302,     0,     1,
     303,   106,   304,  -553,   305,   306,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,     2,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,     0,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,     0,
       0,   307,  -553,     0,  -553,     0,     0,   308,   309,   310,
    -553,  -553,     0,     0,  -553,  -553,  -553,  -553,  -553,  -553,
     311,   312,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,     0,  -553,     0,   313,  -553,  -553,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,   322,   323,   324,  -553,  -553,   325,
    -553,   326,  -553,  -553,  -553,  -553,   744,  -553,  -553,   327,
     328,  -553,   329,   330,   331,   332,  -553,  -553,  -553,  -553,
    -553,  -546,   302,     0,     1,   303,   106,   304,  -546,   305,
     306,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,     2,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,     0,  -546,  -546,  -546,  -546,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,     0,     0,   307,  -546,     0,  -546,
       0,     0,   308,   309,   310,  -546,  -546,     0,     0,  -546,
    -546,  -546,  -546,  -546,  -546,   311,   312,  -546,  -546,  -546,
    -546,  -546,  -546,  -546,  -546,  -546,     0,  -546,     0,   313,
    -546,  -546,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -546,  -546,  -546,  -546,  -546,  -546,  -546,  -546,   322,
     323,   324,  -546,  -546,   325,  -546,   326,  -546,  -546,  -546,
    -546,   744,  -546,  -546,   327,   328,  -546,   329,   330,   331,
     332,  -546,  -546,  -546,  -546,  -546,  -554,   302,     0,     1,
     303,   106,   304,  -554,   305,   306,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,     2,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,  -554,  -554,
    -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,     0,
       0,   307,  -554,     0,  -554,     0,     0,   308,   309,   310,
    -554,  -554,     0,     0,  -554,  -554,  -554,  -554,  -554,  -554,
     311,   312,  -554,  -554,  -554,  -554,  -554,  -554,  -554,  -554,
    -554,     0,  -554,     0,   313,  -554,  -554,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -554,  -554,  -554,  -554,
    -554,  -554,  -554,  -554,   322,   323,   324,  -554,  -554,   325,
    -554,   326,  -554,  -554,  -554,  -554,   744,  -554,  -554,   327,
     328,  -554,   329,   330,   331,   332,  -554,  -554,  -554,  -554,
    -554,  -340,  2025,     0,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,     0,     0,  -340,  -340,     0,  -340,
       0,     0,  -340,  -340,  -340,  -340,  -340,     0,     0,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,     0,  -340,     0,  -340,
    -340,  -340,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -339,  2026,     0,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,
       0,  -339,  -339,     0,  -339,     0,     0,  -339,  -339,  -339,
    -339,  -339,     0,     0,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,     0,  -339,     0,  -339,  -339,  -339,     0,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -345,   756,     0,  -345,  -345,  -345,  -345,   757,   758,
     759,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,     0,     0,  -345,  -345,     0,  -345,
       0,     0,  -345,  -345,  -345,  -345,  -345,     0,     0,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,     0,  -345,     0,  -345,
    -345,  -345,     0,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,   760,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  1151,  -345,  -345,   762,     0,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -450,  1153,     0,  -450,
    -450,  -450,  -450,     0,  -450,  -450,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,
       0,  -450,  -450,     0,  -450,     0,     0,  -450,  -450,  -450,
    -450,  -450,     0,     0,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,     0,  -450,     0,  -450,  -450,  -450,     0,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,  -450,
    -450,  -450,  -450,  -450,  -450,  -450,  -450,     0,     0,  -450,
    -450,  -450,  -450,     0,  -450,  -450,  -450,  1154,  -450,  -450,
    -450,     0,  -450,  -450,  -450,  -450, -1090,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1090, -1090, -1090, -1090, -1090,
   -1090, -1090, -1090, -1090, -1090, -1090, -1090, -1090, -1090, -1090,
   -1090, -1090, -1090, -1090, -1090, -1090, -1090,     0, -1090, -1090,
   -1090, -1090, -1090, -1090, -1090, -1090, -1090, -1090, -1090,     0,
       0,   307, -1090,     0, -1090,     0,     0,   308,   309,   310,
   -1090, -1090,     0,     0, -1090, -1090, -1090, -1090, -1090, -1090,
     311,   312, -1090, -1090, -1090, -1090, -1090, -1090, -1090, -1090,
   -1090,     0, -1090,     0,   313, -1090, -1090,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1090, -1090, -1090, -1090,
   -1090, -1090, -1090, -1090,   322,   323,   324,     0,     0,   325,
    1160,   326, -1090,     0,  1161, -1090, -1090,     0, -1090,   327,
     328,     0,   329,   330,   331,   332, -1234,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1234, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234,     0, -1234, -1234,
   -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,     0,
       0,   307, -1234,     0, -1234,     0,     0,   308,   309,   310,
   -1234, -1234,     0,     0, -1234, -1234, -1234, -1234, -1234, -1234,
     311,   312, -1234, -1234, -1234, -1234, -1234, -1234, -1234, -1234,
   -1234,     0, -1234,     0,   313, -1234, -1234,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1234, -1234, -1234, -1234,
   -1234, -1234, -1234, -1234,   322,   323,   324,     0,     0,   325,
    1160,   326,  1626,     0,  1161, -1234, -1234,     0, -1234,   327,
     328,     0,   329,   330,   331,   332, -1192,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192,     0, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,     0,
       0,   307, -1192,     0, -1192,     0,     0,   308,   309,   310,
   -1192, -1192,     0,     0, -1192, -1192, -1192, -1192, -1192, -1192,
     311,   312, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192,     0, -1192,     0,   313, -1192, -1192,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192,   322,   323,   324,     0,     0,   325,
    1835,   326, -1192,     0,  1161, -1192, -1192,     0, -1192,   327,
     328,     0,   329,   330,   331,   332, -1223,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307, -1223,     0, -1223,     0,     0,   308,   309,   310,
   -1223, -1223,     0,     0, -1223,    32, -1223, -1223, -1223, -1223,
     311,   312,  1125, -1223,   640,   641,   642, -1223, -1223, -1223,
   -1223,     0, -1223,     0,   313, -1223, -1223,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44, -1223, -1223,
   -1223, -1223, -1223, -1223,   322,   323,   324,     0,     0,   325,
    1160,   326,   643,     0,  1161, -1223,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332,  -577,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,
       0,   307,  -577,     0,  -577,     0,     0,   308,   309,   310,
    -577,  -577,     0,     0,  -577,  -577,  -577,  -577,  -577,  -577,
     311,   312,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,     0,  -577,     0,   313,  -577,  -577,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,   322,   323,   324,     0,     0,   325,
    -577,   326,  1155,     0,  1156,  -577,  -577,     0,  -577,   327,
     328,     0,   329,   330,   331,   332, -1215,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215,     0, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,     0,
       0,   307, -1215,     0, -1215,     0,     0,   308,   309,   310,
   -1215, -1215,     0,     0, -1215, -1215, -1215, -1215, -1215, -1215,
     311,   312, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215,     0, -1215,     0,   313, -1215, -1215,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215,   322,   323,   324,     0,     0,   325,
    2072,   326, -1215,     0,  1156, -1215, -1215,     0, -1215,   327,
     328,     0,   329,   330,   331,   332, -1216,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216,     0, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,     0,
       0,   307, -1216,     0, -1216,     0,     0,   308,   309,   310,
   -1216, -1216,     0,     0, -1216, -1216, -1216, -1216, -1216, -1216,
     311,   312, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216,     0, -1216,     0,   313, -1216, -1216,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216,   322,   323,   324,     0,     0,   325,
    1160,   326,  2073,     0,  1161, -1216, -1216,     0, -1216,   327,
     328,     0,   329,   330,   331,   332, -1210,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1210, -1210, -1210, -1210, -1210,
   -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210,
   -1210, -1210, -1210, -1210, -1210, -1210, -1210,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307, -1210,     0, -1210,     0,     0,   308,   309,   310,
   -1210, -1210,     0,     0, -1210,    32, -1210, -1210, -1210, -1210,
     311,   312,  1125, -1210,   640,   641,   642, -1210, -1210, -1210,
   -1210,     0, -1210,     0,   313, -1210, -1210,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44, -1210, -1210,
   -1210, -1210, -1210, -1210,   322,   323,   324,     0,     0,   325,
    1160,   326,   643,     0,  1161, -1210,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1158,   618,     0, -1158,
   -1158, -1158, -1158,     0, -1158, -1158,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158,     0, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,     0,
       0, -1158, -1158,     0, -1158,     0,     0, -1158, -1158, -1158,
   -1158, -1158,     0,     0, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158,     0, -1158,     0, -1158, -1158, -1158,     0, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158,     0,     0, -1158,
       0, -1158,   619,     0, -1158, -1158, -1158,     0, -1158, -1158,
   -1158,     0, -1158, -1158, -1158, -1158, -1181,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1181,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1181,    32, -1181, -1181, -1181, -1181,
     311,   638,   639,   248,   640,   641,   642, -1181, -1181, -1181,
   -1181,     0, -1181,     0,   313, -1181,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1181, -1181,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1159,   618,     0, -1159,
   -1159, -1159, -1159,     0, -1159, -1159,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159,     0, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,     0,
       0, -1159, -1159,     0, -1159,     0,     0, -1159, -1159, -1159,
   -1159, -1159,     0,     0, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159,     0, -1159,     0, -1159, -1159, -1159,     0, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159,     0,     0, -1159,
       0, -1159,   619,     0, -1159, -1159, -1159,     0, -1159, -1159,
   -1159,     0, -1159, -1159, -1159, -1159, -1220,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220,     0,  1117,  1118,
    1119,   630,  1120,  1121,  1122,  1123,   635,   636,  1124,     0,
       0,   307, -1220,     0, -1220,     0,     0,   308,   309,   310,
   -1220, -1220,     0,     0, -1220,    32, -1220, -1220, -1220, -1220,
     311,   312,  1125, -1220,   640,   641,   642, -1220, -1220, -1220,
   -1220,     0, -1220,     0,   313, -1220, -1220,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44, -1220, -1220,
   -1220, -1220, -1220, -1220,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1220, -1220,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1236,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1236, -1236, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236,     0, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,     0,
       0,   307, -1236,     0, -1236,     0,     0,   308,   309,   310,
   -1236, -1236,     0,     0, -1236, -1236, -1236, -1236, -1236, -1236,
     311,   312, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,
   -1236,     0, -1236,     0,   313, -1236, -1236,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1236, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236,   322,   323,   324,     0,     0,   325,
       0,   326,  1136,     0, -1236, -1236,   744,     0, -1236,   327,
     328,     0,   329,   330,   331,   332, -1171,  1163,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1171,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1171,    32, -1171, -1171, -1171, -1171,
     311,   638,   639,   248,   640,   641,   642, -1171, -1171, -1171,
   -1171,     0, -1171,     0,   313, -1171,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1171, -1171,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1175,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1175,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1175,    32, -1175, -1175, -1175, -1175,
     311,   638,   639,   248,   640,   641,   642, -1175, -1175, -1175,
   -1175,     0, -1175,     0,   313, -1175,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1175, -1175,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1170,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1170,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1170,    32, -1170, -1170, -1170, -1170,
     311,   638,   639,   248,   640,   641,   642, -1170, -1170, -1170,
   -1170,     0, -1170,     0,   313, -1170,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1170, -1170,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1174,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1174,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1174,    32, -1174, -1174, -1174, -1174,
     311,   638,   639,   248,   640,   641,   642, -1174, -1174, -1174,
   -1174,     0, -1174,     0,   313, -1174,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1174, -1174,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1077,  1176,     0, -1077,
   -1077, -1077, -1077,     0, -1077, -1077,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1077, -1077, -1077, -1077, -1077, -1077,
   -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077,
   -1077, -1077, -1077, -1077, -1077, -1077, -1077,     0, -1077, -1077,
   -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077,     0,
       0, -1077, -1077,     0, -1077,     0,     0, -1077, -1077, -1077,
   -1077, -1077,     0,     0, -1077, -1077, -1077, -1077, -1077, -1077,
   -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077,
   -1077,     0, -1077,     0, -1077, -1077, -1077,     0, -1077, -1077,
   -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077, -1077,
   -1077, -1077, -1077, -1077, -1077, -1077, -1077,     0,     0, -1077,
       0, -1077, -1077,     0, -1077, -1077, -1077,     0, -1077, -1077,
   -1077,     0, -1077, -1077, -1077, -1077, -1079,  1177,     0, -1079,
   -1079, -1079, -1079,     0, -1079, -1079,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1079, -1079, -1079, -1079, -1079, -1079,
   -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079,
   -1079, -1079, -1079, -1079, -1079, -1079, -1079,     0, -1079, -1079,
   -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079,     0,
       0, -1079, -1079,     0, -1079,     0,     0, -1079, -1079, -1079,
   -1079, -1079,     0,     0, -1079, -1079, -1079, -1079, -1079, -1079,
   -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079,
   -1079,     0, -1079,     0, -1079, -1079, -1079,     0, -1079, -1079,
   -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079,
   -1079, -1079, -1079, -1079, -1079, -1079, -1079,     0,     0, -1079,
       0, -1079, -1079,     0, -1079, -1079, -1079,     0, -1079, -1079,
   -1079,     0, -1079, -1079, -1079, -1079, -1125,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1125,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1125,    32, -1125, -1125, -1125, -1125,
     311,   638,   639,   248,   640,   641,   642, -1125, -1125, -1125,
   -1125,     0, -1125,     0,   313, -1125,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1125, -1125,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1127,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1127,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1127,    32, -1127, -1127, -1127, -1127,
     311,   638,   639,   248,   640,   641,   642, -1127, -1127, -1127,
   -1127,     0, -1127,     0,   313, -1127,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1127, -1127,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1172,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1172,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1172,    32, -1172, -1172, -1172, -1172,
     311,   638,   639,   248,   640,   641,   642, -1172, -1172, -1172,
   -1172,     0, -1172,     0,   313, -1172,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1172, -1172,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1176,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1176,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1176,    32, -1176, -1176, -1176, -1176,
     311,   638,   639,   248,   640,   641,   642, -1176, -1176, -1176,
   -1176,     0, -1176,     0,   313, -1176,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1176, -1176,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1173,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1173,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1173,    32, -1173, -1173, -1173, -1173,
     311,   638,   639,   248,   640,   641,   642, -1173, -1173, -1173,
   -1173,     0, -1173,     0,   313, -1173,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1173, -1173,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1177,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,     0,
       0,   307,   246,     0, -1177,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1177,    32, -1177, -1177, -1177, -1177,
     311,   638,   639,   248,   640,   641,   642, -1177, -1177, -1177,
   -1177,     0, -1177,     0,   313, -1177,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,   643,     0, -1177, -1177,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332, -1168,   618,     0, -1168,
   -1168, -1168, -1168,     0, -1168, -1168,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168,     0, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,     0,
       0, -1168, -1168,     0, -1168,     0,     0, -1168, -1168, -1168,
   -1168, -1168,     0,     0, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168,     0, -1168,     0, -1168, -1168, -1168,     0, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168,     0,     0, -1168,
       0, -1168,   619,     0, -1168, -1168, -1168,     0, -1168, -1168,
   -1168,     0, -1168, -1168, -1168, -1168, -1169,   618,     0, -1169,
   -1169, -1169, -1169,     0, -1169, -1169,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169,     0, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,     0,
       0, -1169, -1169,     0, -1169,     0,     0, -1169, -1169, -1169,
   -1169, -1169,     0,     0, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169,     0, -1169,     0, -1169, -1169, -1169,     0, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169,     0,     0, -1169,
       0, -1169,   619,     0, -1169, -1169, -1169,     0, -1169, -1169,
   -1169,     0, -1169, -1169, -1169, -1169, -1004,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1004, -1004, -1004, -1004, -1004,
   -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004,
   -1004, -1004, -1004, -1004, -1004, -1004, -1004,     0, -1004, -1004,
   -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004,     0,
       0,   307, -1004,     0, -1004,     0,     0,   308,   309,   310,
   -1004, -1004,     0,     0, -1004, -1004, -1004, -1004, -1004, -1004,
     311,   312, -1004, -1004, -1004, -1004, -1004, -1004, -1004, -1004,
   -1004,     0, -1004,     0,   313, -1004, -1004,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1004, -1004, -1004, -1004,
   -1004, -1004, -1004, -1004,   322,   323,   324,     0,     0,   325,
       0,   326, -1004,     0,  1804,  1805,  1016,     0, -1004,   327,
     328,     0,   329,   330,   331,   332, -1131,   618,     0, -1131,
   -1131, -1131, -1131,     0, -1131, -1131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131,     0, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,     0,
       0, -1131, -1131,     0, -1131,     0,     0, -1131, -1131, -1131,
   -1131, -1131,     0,     0, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131,     0, -1131,     0, -1131, -1131, -1131,     0, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131,     0,     0, -1131,
       0, -1131,   619,     0, -1131, -1131, -1131,     0, -1131, -1131,
   -1131,     0, -1131, -1131, -1131, -1131, -1132,   618,     0, -1132,
   -1132, -1132, -1132,     0, -1132, -1132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1132, -1132, -1132, -1132, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132,     0, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,     0,
       0, -1132, -1132,     0, -1132,     0,     0, -1132, -1132, -1132,
   -1132, -1132,     0,     0, -1132, -1132, -1132, -1132, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,
   -1132,     0, -1132,     0, -1132, -1132, -1132,     0, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132, -1132,
   -1132, -1132, -1132, -1132, -1132, -1132, -1132,     0,     0, -1132,
       0, -1132,   619,     0, -1132, -1132, -1132,     0, -1132, -1132,
   -1132,     0, -1132, -1132, -1132, -1132, -1128,   618,     0, -1128,
   -1128, -1128, -1128,     0, -1128, -1128,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128,     0, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128,     0,
       0, -1128, -1128,     0, -1128,     0,     0, -1128, -1128, -1128,
   -1128, -1128,     0,     0, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128,     0, -1128,     0, -1128, -1128, -1128,     0, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128,     0,     0, -1128,
       0, -1128,   619,     0, -1128, -1128, -1128,     0, -1128, -1128,
   -1128,     0, -1128, -1128, -1128, -1128, -1006,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1006, -1006, -1006, -1006, -1006,
   -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006,
   -1006, -1006, -1006, -1006, -1006, -1006, -1006,     0, -1006, -1006,
   -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006,     0,
       0,   307, -1006,     0, -1006,     0,     0,   308,   309,   310,
   -1006, -1006,     0,     0, -1006, -1006, -1006, -1006, -1006, -1006,
     311,   312, -1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006,
   -1006,     0, -1006,     0,   313, -1006, -1006,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1006, -1006, -1006, -1006,
   -1006, -1006, -1006, -1006,   322,   323,   324,     0,     0,   325,
       0,   326, -1006,     0, -1006,  1985,  1016,     0, -1006,   327,
     328,     0,   329,   330,   331,   332, -1000,  1988,     0, -1000,
   -1000, -1000, -1000,     0, -1000, -1000,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1000, -1000, -1000, -1000, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000,     0, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,     0,
       0, -1000, -1000,     0, -1000,     0,     0, -1000, -1000, -1000,
   -1000, -1000,     0,     0, -1000, -1000, -1000, -1000, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
   -1000,     0, -1000,     0, -1000, -1000, -1000,     0, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000,     0,     0, -1000,
       0, -1000, -1000,     0, -1000, -1000, -1000,     0, -1000, -1000,
   -1000,     0, -1000, -1000, -1000, -1000, -1129,   618,     0, -1129,
   -1129, -1129, -1129,     0, -1129, -1129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129,     0, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,     0,
       0, -1129, -1129,     0, -1129,     0,     0, -1129, -1129, -1129,
   -1129, -1129,     0,     0, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129,     0, -1129,     0, -1129, -1129, -1129,     0, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129,     0,     0, -1129,
       0, -1129,   619,     0, -1129, -1129, -1129,     0, -1129, -1129,
   -1129,     0, -1129, -1129, -1129, -1129, -1130,   618,     0, -1130,
   -1130, -1130, -1130,     0, -1130, -1130,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130,     0, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,     0,
       0, -1130, -1130,     0, -1130,     0,     0, -1130, -1130, -1130,
   -1130, -1130,     0,     0, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130,     0, -1130,     0, -1130, -1130, -1130,     0, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130,     0,     0, -1130,
       0, -1130,   619,     0, -1130, -1130, -1130,     0, -1130, -1130,
   -1130,     0, -1130, -1130, -1130, -1130, -1217,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1217, -1217, -1217, -1217, -1217,
   -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217,
   -1217, -1217, -1217, -1217, -1217, -1217, -1217,     0, -1217, -1217,
   -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217,     0,
       0,   307, -1217,     0, -1217,     0,     0,   308,   309,   310,
   -1217, -1217,     0,     0, -1217, -1217, -1217, -1217, -1217, -1217,
     311,   312, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217,
   -1217,     0, -1217,     0,   313, -1217, -1217,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1217, -1217, -1217, -1217,
   -1217, -1217, -1217, -1217,   322,   323,   324,     0,     0,   325,
       0,   326, -1217,     0, -1217, -1217, -1217,     0, -1217,   327,
     328,     0,   329,   330,   331,   332, -1001,  2064,     0, -1001,
   -1001, -1001, -1001,     0, -1001, -1001,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1001, -1001, -1001, -1001, -1001, -1001,
   -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001,
   -1001, -1001, -1001, -1001, -1001, -1001, -1001,     0, -1001, -1001,
   -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001,     0,
       0, -1001, -1001,     0, -1001,     0,     0, -1001, -1001, -1001,
   -1001, -1001,     0,     0, -1001, -1001, -1001, -1001, -1001, -1001,
   -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001,
   -1001,     0, -1001,     0, -1001, -1001, -1001,     0, -1001, -1001,
   -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001, -1001,
   -1001, -1001, -1001, -1001, -1001, -1001, -1001,     0,     0, -1001,
       0, -1001, -1001,     0, -1001, -1001, -1001,     0, -1001, -1001,
   -1001,     0, -1001, -1001, -1001, -1001,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,     0,     0,
     307,   246,     0,     0,     0,     0,   308,   309,   310,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   311,
     638,   639,   248,   640,   641,   642,     0,     0,     0,     0,
       0,     0,     0,   313,     0,   249,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,   250,   251,   252,
     253,   206,   207,   322,   323,   324,     0,     0,   325,     0,
     326,   643,     0,     0,     0,   254,     0,   644,   327,   328,
       0,   329,   330,   331,   332,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,  1117,  1118,  1119,   630,
    1120,  1121,  1122,  1123,   635,   636,  1124,     0,     0,   307,
     246,     0,     0,     0,     0,   308,   309,   310,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   638,
     639,   248,   640,   641,   642,     0,     0,     0,     0,     0,
       0,     0,   313,     0,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,   323,   324,     0,     0,   325,     0,   326,
     643,     0,     0,     0,   254,     0,   644,   327,   328,     0,
     329,   330,   331,   332,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,   246,
       0,     0,     0,     0,   308,   309,   310,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   311,   638,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,   249,     0,   314,   315,   316,   317,   318,
     319,   320,   321,    43,    44,   250,   251,   252,   253,   206,
     207,   322,   323,   324,     0,     0,   325,     0,   326,   986,
       0,   987,   988,   744,     0,     0,   327,   328,     0,   329,
     330,   331,   332,  1250,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   246,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   311,   638,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,   323,   324,     0,     0,   325,     0,   326,   986,     0,
     987,  -110,   744,     0,     0,   327,   328,     0,   329,   330,
     331,   332,  1257,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,   246,     0,     0,
       0,     0,   308,   309,   310,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   311,   638,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,   249,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,   250,   251,   252,   253,   206,   207,   322,
     323,   324,     0,     0,   325,     0,   326,   986,     0,   987,
     -98,   744,     0,     0,   327,   328,     0,   329,   330,   331,
     332,  1261,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   246,     0,     0,     0,
       0,   308,   309,   310,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   311,   638,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,   323,
     324,     0,     0,   325,     0,   326,   986,     0,   987,  -102,
     744,     0,     0,   327,   328,     0,   329,   330,   331,   332,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,   246,     0,     0,     0,     0,
     308,   309,   310,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   311,   638,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,   249,
       0,   314,   315,   316,   317,   318,   319,   320,   321,    43,
      44,   250,   251,   252,   253,   206,   207,   322,   323,   324,
       0,     0,   325,     0,   326,  1515,     0,   987,   -65,   744,
       0,     0,   327,   328,     0,   329,   330,   331,   332,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,   246,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   311,   638,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,   323,   324,     0,
       0,   325,     0,   326,  1524,     0,   987,  1525,   744,     0,
       0,   327,   328,     0,   329,   330,   331,   332,  1582,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,   246,     0,     0,     0,     0,   308,   309,
     310,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   311,   638,    38,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,   249,     0,   314,
     315,   316,   317,   318,   319,   320,   321,    43,    44,   250,
     251,   252,   253,   206,   207,   322,   323,   324,     0,     0,
     325,     0,   326,   986,     0,   987,   -81,   744,     0,     0,
     327,   328,     0,   329,   330,   331,   332,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,   246,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     311,   638,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,   324,     0,     0,   325,
       0,   326,  1524,     0,   987,  -107,   744,     0,     0,   327,
     328,     0,   329,   330,   331,   332,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   246,     0,     0,     0,     0,   308,   309,   310,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   311,
     638,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,   249,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,   250,   251,   252,
     253,   206,   207,   322,   323,   324,     0,     0,   325,     0,
     326,  1524,     0,   987,   -97,   744,     0,     0,   327,   328,
       0,   329,   330,   331,   332,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     246,     0,     0,     0,     0,   308,   309,   310,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   638,
      38,   248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,   323,   324,     0,     0,   325,     0,   326,
    1524,     0,   987,  -101,   744,     0,     0,   327,   328,     0,
     329,   330,   331,   332,  1765,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,   246,
       0,     0,     0,     0,   308,   309,   310,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   311,   638,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,   249,     0,   314,   315,   316,   317,   318,
     319,   320,   321,    43,    44,   250,   251,   252,   253,   206,
     207,   322,   323,   324,     0,     0,   325,     0,   326,   986,
       0,   987,   -88,   744,     0,     0,   327,   328,     0,   329,
     330,   331,   332,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   246,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   311,   638,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,   323,   324,     0,     0,   325,     0,   326,  1524,     0,
     987,   -78,   744,     0,     0,   327,   328,     0,   329,   330,
     331,   332,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,   246,     0,     0,
       0,     0,   308,   309,   310,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   311,   638,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,   249,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,   250,   251,   252,   253,   206,   207,   322,
     323,   324,     0,     0,   325,     0,   326,  1524,     0,   987,
     -85,   744,     0,     0,   327,   328,     0,   329,   330,   331,
     332,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,     0,     0,
       0,   308,   309,   310,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,   311,   407,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
      40,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,    45,    46,    47,    48,   206,   207,   322,   323,
     324,     0,     0,   325,   302,   326,     1,   303,   106,   304,
       0,   305,   306,   327,   328,     0,   329,   330,   331,   332,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   866,    27,
       0,     0,     0,     0,   308,   309,   310,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,   311,   407,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,    40,     0,   314,   315,   316,   317,   318,
     319,   320,   321,    43,    44,    45,    46,    47,    48,   206,
     207,   322,   323,   324,     0,     0,   325,   302,   326,     1,
     303,   106,   304,     0,   305,   306,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     311,   407,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,    40,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,    45,    46,
      47,    48,     0,     0,   322,   323,   324,     0,     0,   325,
     302,   326,     1,   303,   106,   304,   254,   305,   306,   327,
     328,     0,   329,   330,   331,   332,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     8,     9,    10,   565,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,     0,     0,     0,
     308,   309,   310,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,   311,   407,    38,    39,     0,   302,     0,
       1,   303,   106,   304,     0,   305,   306,   313,     0,    40,
       0,   314,   315,   316,   317,   318,   319,   320,   321,    43,
      44,    45,    46,    47,    48,     2,     0,   322,   323,   889,
       0,     0,   890,   733,   326,     0,     0,     0,     0,     0,
       0,     0,   327,   328,     0,   329,   330,   331,   332,  1117,
    1118,  1119,   630,  1120,  1121,  1122,  1123,   635,   636,  1124,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,   311,   312,  1125,     0,   640,   641,   642,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,    43,    44,     0,
       0,     0,     0,     0,     0,   322,   323,   324,     0,     0,
     325,  -453,   326,   643,     0,  -453,     0,   254,     0,   644,
     327,   328,     0,   329,   330,   331,   332,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1117,  1118,
    1119,   630,  1120,  1121,  1122,  1123,   635,   636,  1124,     0,
       0,   307,     0,     0,     0,     0,     0,   308,   309,   310,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
     311,   312,  1125,     0,   640,   641,   642,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,     0,     0,
       0,     0,     0,     0,   322,   323,   324,     0,     0,   325,
    1160,   326,   643,     0,  1161,     0,   254,     0,   644,   327,
     328,     0,   329,   330,   331,   332,  1838,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1117,  1118,  1119,
     630,  1120,  1121,  1122,  1123,   635,   636,  1124,     0,     0,
     307,     0,     0,     0,     0,     0,   308,   309,   310,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,   311,
     312,  1125,     0,   640,   641,   642,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,     0,     0,     0,
       0,     0,     0,   322,   323,   324,     0,     0,   325,     0,
     326,   643,     0,     0,     0,   254,     0,   644,   327,   328,
       0,   329,   330,   331,   332,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,     0,     0,   307,
       0,     0,     0,     0,     0,   308,   309,   310,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   312,
    1125,     0,   640,   641,   642,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,     0,     0,     0,     0,
       0,     0,   322,   323,   324,     0,     0,   325,     0,   326,
     643,     0,     0,     0,   254,     0,   644,   327,   328,     0,
     329,   330,   331,   332,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1160,   326,     0,
       0,  1161,     0,     0,     0,     0,   327,   328,  1734,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1160,   326,     0,     0,  1729,     0,     0,     0,
    1737,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,  1858,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1160,   326,  1626,
       0,  1161,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1160,   326,  1859,     0,  1161,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1160,   326,     0,
       0,  1729,     0,     0,     0,  1876,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1160,   326,     0,     0,  1729,     0,     0,     0,
    1880,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,  2008,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1160,   326,  1859,
       0,  1161,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1160,   326,  1859,     0,  1161,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,  2062,  2063,  1016,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  2074,   326,  2075,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1160,   326,  2073,
       0,  1161,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,     0,     0,   744,     0,
       0,   327,   328,   745,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,  1155,
       0,  1156,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1266,   326,     0,     0,     0,     0,   744,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1333,   326,     0,
       0,     0,     0,   744,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,  1136,     0,     0,     0,   744,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,  1615,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1160,   326,     0,
       0,  1161,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1616,   326,  1617,     0,     0,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,  1625,
       0,  1156,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1695,   326,     0,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,  1156,     0,     0,     0,     0,   327,   328,  1723,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,  1726,     0,     0,     0,
    1727,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,  1156,     0,     0,     0,     0,   327,   328,  1733,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,  1726,     0,     0,     0,
    1735,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1834,   326,     0,
       0,  1156,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1836,   326,     0,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1837,   326,     0,
       0,  1161,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1840,   326,     0,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1616,   326,  1617,
       0,     0,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,  1860,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,  1857,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1861,   326,  1617,
       0,     0,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,  1726,     0,     0,     0,
    1874,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,  1726,     0,     0,     0,  1878,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  1993,   326,     0,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1835,   326,     0,
       0,  1161,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  2000,   326,     0,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1861,   326,  1617,
       0,     0,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  2078,   326,     0,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,     0,  2107,  1016,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  2110,   326,     0,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  2111,   326,     0,
       0,  1156,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  2139,   326,     0,     0,  1156,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,     0,     0,     0,     0,     0,   327,   328,   549,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,     0,     0,   744,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,     0,     0,     0,     0,     0,   327,   328,   840,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,     0,     0,     0,     0,
       0,   327,   328,   844,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,     0,     0,  1016,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,     0,     0,     0,     0,
       0,   327,   328,  1057,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,     0,     0,     0,     0,  1109,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,  1460,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,   733,   326,     0,     0,     0,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,     0,     0,   744,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,     0,     0,     0,     0,
       0,   327,   328,  1563,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1599,   326,     0,
       0,     0,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,     0,     0,     0,     0,
    1602,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,  1794,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,     0,     0,  1793,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,  1797,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,     0,     0,   744,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,  1801,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,     0,     0,   744,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,     0,   326,     0,     0,     0,     0,   744,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  1847,   326,     0,
       0,     0,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,  1907,     0,   326,     0,     0,     0,     0,  1793,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,  2009,   326,     0,
       0,     0,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   325,  2069,   326,     0,     0,     0,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   325,     0,   326,     0,
       0,     0,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,   324,     0,
       0,   703,     0,   326,     0,     0,     0,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,   324,     0,     0,   706,     0,   326,     0,
       0,     0,     0,     0,     0,     0,   327,   328,     0,   329,
     330,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
    -895,   584,     0,  -895,  -895,  -895,   322,   323,   324,     0,
       0,   729,     0,   326,     0,     0,     0,     0,     0,     0,
       0,   327,   328,     0,   329,   330,   331,   332,  -895,  -895,
    -895,  -895,  -895,  -895,  -895,  -895,  -895,  -895,  -895,  -895,
    -895,  -895,  -895,  -895,  -895,  -895,  -895,  -895,  -895,  -895,
    -895,     0,     0,  -895,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -895,  -895,     0,  -895,     0,
       0,  -895,  -895,     0,  -895,  -895,     0,     0,  -895,  -895,
    -895,  -895,  -895,  -895,     0,  -895,  -895,  -895,  -895,     0,
       0,  -895,  -895,  -895,  -895,     0,  -895,     0,  -895,  -895,
    -895,     0,  -895,  -895,  -895,  -895,  -895,  -895,  -895,     0,
    -895,  -895,  -895,  -895,  -895,  -895,  -895,  -895,  -895,     0,
    -895,     0,     0,  -895,   585,  -895,  -895,     0,   586,  -895,
       0,     0,     0,  -895,  -895,  -189,   907,     0,  -189,  -189,
    -189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,     0,  -189,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -189,  -189,     0,  -189,     0,     0,  -189,  -189,     0,  -189,
    -189,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,     0,
    -189,  -189,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,
       0,  -189,     0,  -189,  -189,  -189,     0,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,     0,  -189,     0,     0,  -189,     0,
    -189,   908,     0,   909,  -189,     0,     0,     0,  -189,  -189,
    -253,   921,     0,     1,   303,   106,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,  -253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   425,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   426,    32,
     427,   428,    35,    36,     0,   407,    38,    39,   429,     0,
       0,   430,   431,   432,   433,     0,   434,     0,   435,   436,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,   322,     0,
      51,     0,     0,   437,     0,   438,   439,  -251,   924,  -253,
       1,   303,   106,   327,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
    -251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   425,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   426,    32,   427,   428,    35,
      36,     0,   407,    38,    39,   429,     0,     0,   430,   431,
     432,   433,     0,   434,     0,   435,   436,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,     0,    51,     0,     0,
     437,     0,   438,   439,  -254,   921,  -251,     1,   303,   106,
     327,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,  -254,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   425,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   426,    32,   427,   428,    35,    36,     0,   407,
      38,    39,   429,     0,     0,   430,   431,   432,   433,     0,
     434,     0,   435,   436,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,   322,     0,    51,     0,     0,   437,     0,   438,
     439,  -252,   924,  -254,     1,   303,   106,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,  -252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   425,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   426,
      32,   427,   428,    35,    36,     0,   407,    38,    39,   429,
       0,     0,   430,   431,   432,   433,     0,   434,     0,   435,
     436,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
       0,    51,     0,     0,   437,     0,   438,   439,     0,   424,
    -252,     1,   303,   106,   327,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,    27,     0,   425,     0,     0,   308,
     309,     0,    28,    29,     0,     0,   426,    32,   427,   428,
      35,    36,     0,   407,    38,    39,   429,     0,     0,   430,
     431,   432,   433,     0,   434,     0,   435,   436,    40,     0,
     314,   315,   316,   317,   318,   319,   320,     0,    43,    44,
      45,    46,    47,    48,   206,   207,   322,     0,    51,     0,
       0,   437,     0,   438,   439,     0,   490,   440,     1,   303,
     106,   327,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   425,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   426,    32,   427,   428,    35,    36,     0,
     407,    38,    39,   429,     0,     0,   430,   431,   432,   433,
       0,   434,     0,   435,   436,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,     0,    51,     0,     0,   437,     0,
     438,   439,     0,   512,   491,     1,   303,   106,   327,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,    27,     0,
     425,     0,     0,   308,   309,     0,    28,    29,     0,     0,
     426,    32,   427,   428,    35,    36,     0,   407,    38,    39,
     429,     0,     0,   430,   431,   432,   433,     0,   434,     0,
     435,   436,    40,     0,   314,   315,   316,   317,   318,   319,
     320,     0,    43,    44,    45,    46,    47,    48,   206,   207,
     322,     0,    51,     0,     0,   437,     0,   438,   439,     0,
     517,   513,     1,   303,   106,   327,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   425,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   426,    32,   427,
     428,    35,    36,     0,   407,    38,    39,   429,     0,     0,
     430,   431,   432,   433,     0,   434,     0,   435,   436,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,     0,    51,
       0,     0,   437,     0,   438,   439,     0,   521,   518,     1,
     303,   106,   327,   328,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,   425,     0,     0,   308,   309,     0,
      28,    29,     0,     0,   426,    32,   427,   428,    35,    36,
       0,   407,    38,    39,   429,     0,     0,   430,   431,   432,
     433,     0,   434,     0,   435,   436,    40,     0,   314,   315,
     316,   317,   318,   319,   320,     0,    43,    44,    45,    46,
      47,    48,   206,   207,   322,     0,    51,     0,     0,   437,
       0,   438,   439,     0,   921,   522,     1,   303,   106,   327,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   425,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   426,    32,   427,   428,    35,    36,     0,   407,    38,
      39,   429,     0,     0,   430,   431,   432,   433,     0,   434,
       0,   435,   436,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,     0,    51,     0,     0,   437,     0,   438,   439,
       0,   924,  -750,     1,   303,   106,   327,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   425,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   426,    32,
     427,   428,    35,    36,     0,   407,    38,    39,   429,     0,
       0,   430,   431,   432,   433,     0,   434,     0,   435,   436,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,   322,     0,
      51,     0,     0,   437,     0,   438,   439,     0,   921,  -751,
       1,   303,   106,   327,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   425,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   426,    32,   427,   428,    35,
      36,     0,   407,    38,    39,   429,     0,     0,   430,   431,
     432,   433,     0,   434,     0,   435,   436,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,     0,    51,     0,     0,
     437,     0,   438,   439,     0,   924,  -747,     1,   303,   106,
     327,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   425,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   426,    32,   427,   428,    35,    36,     0,   407,
      38,    39,   429,     0,     0,   430,   431,   432,   433,     0,
     434,     0,   435,   436,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,   322,     0,    51,     0,     0,   437,     0,   438,
     439,     0,   921,  -748,     1,   303,   106,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   425,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   426,
      32,   427,   428,    35,    36,     0,   407,    38,    39,   429,
       0,     0,   430,   431,   432,   433,     0,   434,     0,   435,
     436,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
       0,    51,     0,     0,   437,     0,   438,   439,     0,   924,
    -753,     1,   303,   106,   327,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,    27,     0,   425,     0,     0,   308,
     309,     0,    28,    29,     0,     0,   426,    32,   427,   428,
      35,    36,     0,   407,    38,    39,   429,     0,     0,   430,
     431,   432,   433,     0,   434,     0,   435,   436,    40,     0,
     314,   315,   316,   317,   318,   319,   320,     0,    43,    44,
      45,    46,    47,    48,   206,   207,   322,     0,    51,     0,
       0,   437,     0,   438,   439,     0,  1039,  -754,     1,   303,
     106,   327,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   425,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   426,    32,   427,   428,    35,    36,     0,
     407,    38,    39,   429,     0,     0,   430,   431,   432,   433,
       0,   434,     0,   435,   436,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,     0,    51,     0,     0,   437,     0,
     438,   439,     0,  1043,  1040,     1,   303,   106,   327,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,    27,     0,
     425,     0,     0,   308,   309,     0,    28,    29,     0,     0,
     426,    32,   427,   428,    35,    36,     0,   407,    38,    39,
     429,     0,     0,   430,   431,   432,   433,     0,   434,     0,
     435,   436,    40,     0,   314,   315,   316,   317,   318,   319,
     320,     0,    43,    44,    45,    46,    47,    48,   206,   207,
     322,     0,    51,     0,     0,   437,     0,   438,   439,     0,
     302,  1044,     1,   303,   106,   327,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   425,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   426,    32,   427,
     428,    35,    36,     0,   407,    38,    39,   429,     0,     0,
     430,   431,   432,   433,     0,   434,     0,   435,   436,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,     0,    51,
       0,     0,   437,     0,   438,   439,     0,   921,  -649,     1,
     303,   106,   327,   328,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,   425,     0,     0,   308,   309,     0,
      28,    29,     0,     0,   426,    32,   427,   428,    35,    36,
       0,   407,    38,    39,   429,     0,     0,   430,   431,   432,
     433,     0,   434,     0,   435,   436,    40,     0,   314,   315,
     316,   317,   318,   319,   320,     0,    43,    44,    45,    46,
      47,    48,   206,   207,   322,     0,    51,     0,     0,   437,
       0,   438,   439,     0,   924,  -730,     1,   303,   106,   327,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   425,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   426,    32,   427,   428,    35,    36,     0,   407,    38,
      39,   429,     0,     0,   430,   431,   432,   433,     0,   434,
       0,   435,   436,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,     0,    51,     0,     0,   437,     0,   438,   439,
       0,   921,  -731,     1,   303,   106,   327,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   425,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   426,    32,
     427,   428,    35,    36,     0,   407,    38,    39,   429,     0,
       0,   430,   431,   432,   433,     0,   434,     0,   435,   436,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,   322,     0,
      51,     0,     0,   437,     0,   438,   439,     0,   924,  -733,
       1,   303,   106,   327,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   425,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   426,    32,   427,   428,    35,
      36,     0,   407,    38,    39,   429,     0,     0,   430,   431,
     432,   433,     0,   434,     0,   435,   436,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,     0,    51,     0,     0,
     437,     0,   438,   439,     0,  1545,  -734,     1,   303,   106,
     327,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   425,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   426,    32,   427,   428,    35,    36,     0,   407,
      38,    39,   429,     0,     0,   430,   431,   432,   433,     0,
     434,     0,   435,   436,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,   322,     0,    51,     0,     0,   437,     0,   438,
     439,     0,   921,  1546,     1,   303,   106,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   425,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   426,
      32,   427,   428,    35,    36,     0,   407,    38,    39,   429,
       0,     0,   430,   431,   432,   433,     0,   434,     0,   435,
     436,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
       0,    51,     0,     0,   437,     0,   438,   439,     0,   924,
    -644,     1,   303,   106,   327,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,    27,     0,   425,     0,     0,   308,
     309,     0,    28,    29,     0,     0,   426,    32,   427,   428,
      35,    36,     0,   407,    38,    39,   429,     0,     0,   430,
     431,   432,   433,     0,   434,     0,   435,   436,    40,     0,
     314,   315,   316,   317,   318,   319,   320,     0,    43,    44,
      45,    46,    47,    48,   206,   207,   322,     0,    51,     0,
       0,   437,     0,   438,   439,     0,   921,  -645,     1,   303,
     106,   327,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   425,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   426,    32,   427,   428,    35,    36,     0,
     407,    38,    39,   429,     0,     0,   430,   431,   432,   433,
       0,   434,     0,   435,   436,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,     0,    51,     0,     0,   437,     0,
     438,   439,     0,   924,  -736,     1,   303,   106,   327,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,    27,     0,
     425,     0,     0,   308,   309,     0,    28,    29,     0,     0,
     426,    32,   427,   428,    35,    36,     0,   407,    38,    39,
     429,     0,     0,   430,   431,   432,   433,     0,   434,     0,
     435,   436,    40,     0,   314,   315,   316,   317,   318,   319,
     320,     0,    43,    44,    45,    46,    47,    48,   206,   207,
     322,     0,    51,     0,     0,   437,     0,   438,   439,     0,
     302,  -737,     1,   303,   106,   327,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   425,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   426,    32,   427,
     428,    35,    36,     0,   407,    38,    39,   429,     0,     0,
     430,   431,   432,   433,     0,   434,     0,   435,   436,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,     0,    51,
       0,     0,   437,     0,   438,   439,     0,   302,  -648,     1,
     303,   106,   327,   328,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,   425,     0,     0,   308,   309,     0,
      28,    29,     0,     0,   426,    32,   427,   428,    35,    36,
       0,   407,    38,    39,   429,     0,     0,   430,   431,   432,
     433,     0,   434,     0,   435,   436,    40,     0,   314,   315,
     316,   317,   318,   319,   320,     0,    43,    44,    45,    46,
      47,    48,   206,   207,   322,     0,    51,     0,     0,   437,
       0,   438,   439,     0,   302,  -646,     1,   303,   106,   327,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   425,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   426,    32,   427,   428,    35,    36,     0,   407,    38,
      39,   429,     0,     0,   430,   431,   432,   433,     0,   434,
       0,   435,   436,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,     0,    51,     0,     0,   437,     0,   438,   439,
       0,   302,  -624,     1,   303,   106,   327,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   425,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   426,    32,
     427,   428,    35,    36,     0,   407,    38,    39,   429,     0,
       0,   430,   431,   432,   433,     0,   434,     0,   435,   436,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,   322,     0,
      51,     0,     0,   437,     0,   438,   439,     0,   921,  -623,
       1,   303,   106,   327,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   425,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   426,    32,   427,   428,    35,
      36,     0,   407,    38,    39,   429,     0,     0,   430,   431,
     432,   433,     0,   434,     0,   435,   436,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,     0,    51,     0,     0,
     437,     0,   438,   439,     0,   924,  -637,     1,   303,   106,
     327,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   425,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   426,    32,   427,   428,    35,    36,     0,   407,
      38,    39,   429,     0,     0,   430,   431,   432,   433,     0,
     434,     0,   435,   436,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,   322,     0,    51,     0,     0,   437,     0,   438,
     439,     0,   302,  -638,     1,   303,   106,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   425,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   426,
      32,   427,   428,    35,    36,     0,   407,    38,    39,   429,
       0,     0,   430,   431,   432,   433,     0,   434,     0,   435,
     436,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
       0,    51,     0,     0,   437,     0,   438,   439,     0,   921,
    -647,     1,   303,   106,   327,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,    27,     0,   425,     0,     0,   308,
     309,     0,    28,    29,     0,     0,   426,    32,   427,   428,
      35,    36,     0,   407,    38,    39,   429,     0,     0,   430,
     431,   432,   433,     0,   434,     0,   435,   436,    40,     0,
     314,   315,   316,   317,   318,   319,   320,     0,    43,    44,
      45,    46,    47,    48,   206,   207,   322,     0,    51,     0,
       0,   437,     0,   438,   439,     0,   924,  -633,     1,   303,
     106,   327,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   425,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   426,    32,   427,   428,    35,    36,     0,
     407,    38,    39,   429,     0,     0,   430,   431,   432,   433,
       0,   434,     0,   435,   436,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,     0,    51,     0,     0,   437,     0,
     438,   439,     0,   921,  -634,     1,   303,   106,   327,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,    27,     0,
     425,     0,     0,   308,   309,     0,    28,    29,     0,     0,
     426,    32,   427,   428,    35,    36,     0,   407,    38,    39,
     429,     0,     0,   430,   431,   432,   433,     0,   434,     0,
     435,   436,    40,     0,   314,   315,   316,   317,   318,   319,
     320,     0,    43,    44,    45,    46,    47,    48,   206,   207,
     322,     0,    51,     0,     0,   437,     0,   438,   439,     0,
     924,  -621,     1,   303,   106,   327,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   425,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   426,    32,   427,
     428,    35,    36,     0,   407,    38,    39,   429,     0,     0,
     430,   431,   432,   433,     0,   434,     0,   435,   436,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,     0,    51,
       0,     0,   437,     0,   438,   439,     0,   921,  -622,     1,
     303,   106,   327,   328,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,   425,     0,     0,   308,   309,     0,
      28,    29,     0,     0,   426,    32,   427,   428,    35,    36,
       0,   407,    38,    39,   429,     0,     0,   430,   431,   432,
     433,     0,   434,     0,   435,   436,    40,     0,   314,   315,
     316,   317,   318,   319,   320,     0,    43,    44,    45,    46,
      47,    48,   206,   207,   322,     0,    51,     0,     0,   437,
       0,   438,   439,     0,   924,  -616,     1,   303,   106,   327,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   425,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   426,    32,   427,   428,    35,    36,     0,   407,    38,
      39,   429,     0,     0,   430,   431,   432,   433,     0,   434,
       0,   435,   436,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,     0,    51,     0,     0,   437,     0,   438,   439,
       0,   921,  -617,     1,   303,   106,   327,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   425,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   426,    32,
     427,   428,    35,    36,     0,   407,    38,    39,   429,     0,
       0,   430,   431,   432,   433,     0,   434,     0,   435,   436,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,   322,     0,
      51,     0,     0,   437,     0,   438,   439,     0,   924,  -635,
       1,   303,   106,   327,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   425,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   426,    32,   427,   428,    35,
      36,     0,   407,    38,    39,   429,     0,     0,   430,   431,
     432,   433,     0,   434,     0,   435,   436,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,     0,    51,     0,     0,
     437,     0,   438,   439,     0,   424,  -636,     1,   303,   106,
     327,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   425,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   426,    32,   427,   428,    35,    36,     0,   407,
      38,    39,   429,     0,     0,   430,   431,   432,   433,     0,
     434,     0,   435,   436,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,   322,     0,    51,     0,     0,   437,     0,   438,
     439,   490,     0,     1,   303,   106,     0,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   425,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   426,    32,
     427,   428,    35,    36,     0,   407,    38,    39,   429,     0,
       0,   430,   431,   432,   433,     0,   434,     0,   435,   436,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,   322,   199,
      51,     1,     0,   437,     0,   438,   439,     0,     0,     0,
       0,     0,     0,   327,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,   565,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   205,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,   206,   207,     0,   199,    51,     1,
       0,   566,  1048,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   567,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     1,     0,    51,     0,     0,   862,
    1048,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     567,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,   565,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,   206,   207,     1,
       0,    51,     0,     0,   566,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   567,     0,   568,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     1,     0,    51,     0,     0,   862,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     567,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   246,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   247,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   249,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,   250,   251,   252,   253,   206,   207,     1,
       0,    51,     0,     0,   862,     0,     0,     0,     0,     0,
       0,  1425,     0,     0,     0,   567,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     1,     0,    51,     0,     0,   862,
       0,     0,     0,     0,     0,     0,  1442,     0,     0,     0,
     567,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   246,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   247,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   249,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,   250,   251,   252,   253,   206,   207,     1,
       0,    51,     0,     0,  1208,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1209,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     1,     0,    51,     0,     0,  1208,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1231,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   246,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   247,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   249,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,   250,   251,   252,   253,   206,   207,     1,
       0,    51,     0,     0,  1208,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1687,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     1,     0,    51,     0,     0,  1208,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1702,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       3,     4,   273,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,   274,    31,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,    42,     0,     0,     1,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
       0,    51,     0,     0,    52,     0,     0,     0,     0,     0,
       0,     0,     0,   275,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,   425,     0,     0,     0,     0,     0,
      28,    29,     0,     0,   426,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     1,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     0,     0,    51,     0,     0,   949,
       0,   438,     0,     0,     0,     0,     0,     0,   950,     2,
     200,   201,   202,   203,   204,     8,     9,    10,   565,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     1,
       0,    43,    44,    45,    46,    47,    48,   206,   207,     0,
       0,    51,     0,     0,   929,     0,     0,     0,     0,     0,
       0,     0,     0,   930,     2,   200,   201,   202,   203,   204,
       8,     9,    10,   565,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,  1510,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     0,     0,    51,     0,     0,    52,
       0,     0,     0,     0,     0,     0,     0,     0,   930,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -66,     0,     0,
       0,     0,     0,     0,     0,   -66,   -66,     0,     0,     0,
     -66,     0,     0,     0,     0,     0,   -66,   -66,   -66,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -66,     0,     0,  1714,     0,     0,     0,     0,     0,
       0,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,
       0,     0,     0,     0,     0,     0,     0,  1511,     0,  1512,
     -66,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,  1718,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -111,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     247,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   249,     0,     0,  1719,     0,
       0,     0,     0,     0,     0,    43,    44,   250,   251,   252,
     253,   206,   207,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -95,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   246,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   247,    38,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,     0,     0,
    1825,     0,     0,     0,     0,     0,     0,    43,    44,   250,
     251,   252,   253,   206,   207,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -96,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   247,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   249,
       0,     0,  1970,     0,     0,     0,     0,     0,     0,    43,
      44,   250,   251,   252,   253,   206,   207,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -80,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   246,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   247,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   249,     0, -1288,   292,     0,     1,     0,     0,     0,
       0,    43,    44,   250,   251,   252,   253,   206,   207,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -87,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,    30,
      31,     0,    32,    33,    34,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,     1,     0,     0,    42,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,     0,     0,    51,     0,     0,    52,     0,     0,    53,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     1,     0,   832,
       0,     0,    43,    44,    45,    46,    47,    48,   206,   207,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1401,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     1,
       0,   832,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1745,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,   165,
       0,     1,     0,   832,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1746,     2,     3,     4,   166,
       6,     7,     8,     9,    10,   167,   168,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    26,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,   165,
       0,     1,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,     0,     0,    51,     0,
       0,    52,     0,     0,   169,     0,     2,     3,     4,   166,
       6,     7,     8,     9,    10,   167,   168,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,   605,
       0,     1,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,     0,     0,    51,     0,
       0,    52,     0,     0,   169,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   606,   607,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   247,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,  -915,
       0,  -915,     0,     0,     0,     0,     0,     0,    43,    44,
     250,   251,   252,   253,   206,   207,     0,     0,    51,     0,
       0,    52,     0,     0,   608,     0,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,  -915,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -915,     0,     0,     0,     0,     0,
       0,     0,  -915,  -915,     0,     0,     0,  -915,     0,     0,
       0,     0,     0,  -915,  -915,  -915,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -915,     0,
       1,     0,     0,     0,     0,     0,     0,     0,  -915,  -915,
    -915,  -915,  -915,  -915,  -915,  -915,     0,     0,  -915,     0,
       0,  -915,     0,     0,  -915,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,    30,    31,     0,    32,    33,    34,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,     0,
   -1289,   284,    42,     1,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,     0,     0,    51,     0,     0,
      52,     0,     0,    53,     0,     0,     0,     0,     2,     3,
       4,   166,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
      33,    34,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   199,     0,     1,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,     0,     0,
      51,     0,     0,    52,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   199,    40,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     0,     0,    51,     0,     0,  1208,
    1674,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   199,    40,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,     0,     0,     0,     0,     0,     0,   208,     0,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   205,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   942,    40,     1,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   206,   207,
       0,     0,     0,     0,     0,     0,   390,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1468,
      40,     1,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     0,     0,
       0,     0,     0,     0,   208,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   205,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   199,    40,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,   206,   207,     0,     0,     0,     0,
       0,     0,   390,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   199,    40,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     0,     0,     0,     0,     0,     0,
    1560,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   165,    40,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,     0,     0,     0,     0,     0,     0,  1897,     0,
       2,     3,     4,   166,     6,     7,     8,     9,    10,   565,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   165,
       0,     1,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
       0,     0,    51,     0,     0,    52,     2,     3,     4,   166,
       6,     7,     8,     9,    10,   565,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   886,     0,     1,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,     0,     0,    51,     0,
       0,    52,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     246,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   247,
      38,   248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,   249,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,   250,   251,   252,   253,
     206,   207,     0,     0,     0,     0,     0,   887,     2,     3,
       4,   166,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,     0,     0,
      51,     0,     0,    52,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     0,     0,    51,     0,     0,    52,
       2,   200,   201,   202,   203,   204,     8,     9,    10,   565,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   206,   207,
       0,     0,    51,     0,     0,    52,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,   206,   207,     0,     0,     0,     0,
       0,   721,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,     0,     0,     0,     0,     0,  1447,     2,   200,
     201,   202,   203,   204,   234,   235,   236,  1532,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1071,     0,     1,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     0,     0,
      51,     0,     0,    52,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,  1072,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,  1077,     0,     1,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,  1078,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,  1083,     0,     1,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,  1084,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,   871,     0,     1,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,  1032,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,  1089,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   504,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,   832,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,   479,   480,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   206,   207,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     0,     0,    51,     0,     0,   862,
    1671,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     567,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   254,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1521,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   247,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     250,   251,   252,   253,   206,   207
};

static const yytype_int16 yycheck[] =
{
       0,    92,    86,   536,   928,   132,   861,   288,   642,   153,
    1218,   928,   720,   471,   861,   345,    86,     5,   938,   345,
     837,  1016,   581,  1101,    83,   828,   998,   475,  1000,   828,
      30,    31,   156,   999,   472,    93,   100,     1,    93,   128,
       5,    41,   837,    83,   128,   998,    84,  1000,    83,    30,
     471,   128,    52,   744,     1,   998,   183,  1000,   128,    59,
     751,    42,   744,   754,    64,    64,    66,   270,   861,   751,
      83,   100,   754,     3,    93,   885,   960,     5,  1609,    83,
      93,   100,    82,    83,    84,     1,    86,   100,   556,    93,
    1621,    91,   795,    93,     1,   186,   187,   722,    28,     5,
     100,   101,   128,   328,   104,    77,   998,    37,  1000,   135,
       3,     3,     5,   113,   536,   121,   116,    59,   586,     5,
     823,   589,   144,   591,   130,   593,   107,   108,   128,     3,
     111,   131,   132,    83,    84,   157,   136,   159,     1,   161,
     140,   141,   142,     3,   144,     5,   134,     3,   148,   959,
     150,     0,    17,   153,   154,   144,   156,   157,   158,   159,
     132,   161,     3,   128,   164,   129,   344,     1,   157,     3,
     159,   113,   161,     3,   174,   174,     1,   268,   186,   187,
     358,   131,     1,   183,   362,   132,   979,   121,   466,   467,
     471,     1,   126,   123,     1,   309,     3,  2095,   198,     1,
     128,   315,     1,     3,   134,     5,   132,     1,     3,     3,
     210,     3,   212,   129,   492,   493,     1,     5,     0,   278,
     220,   221,   129,     1,   288,   131,   290,   265,     1,   288,
     230,   124,   290,   233,    83,   290,   514,   515,   278,   132,
       1,   519,   520,   278,    93,   523,   524,   881,   288,     1,
     124,   100,   101,  2151,   128,     1,   198,   183,   132,   288,
       3,   290,   270,     1,   124,   265,   129,   123,   395,     1,
     270,   290,   132,   387,   274,   389,   270,   290,   278,   144,
    1252,   289,     1,   124,   288,  1251,   290,  1259,   288,   288,
     290,  1263,  1258,   274,   124,   129,  1262,     3,   422,  1252,
       1,    83,     3,    17,   129,   864,  1259,   126,   308,  1252,
    1263,    93,   878,   123,   314,   265,  1259,     3,   100,   101,
    1263,  1852,   129,  1207,   124,   325,   796,   129,   278,   124,
     129,     3,   132,   128,   126,   129,   128,   132,   760,   339,
       3,   126,    28,   128,   129,   133,   327,   760,   126,     5,
     441,   442,   443,   444,   824,   123,   129,   793,   794,     1,
    1252,     3,   121,     3,    17,    28,   134,  1259,   129,   126,
     123,  1263,   221,   130,   126,   798,   128,   129,   121,   122,
       1,   381,   382,   129,   806,   821,   822,   387,   472,   389,
    1193,   129,  1195,   806,  1193,   395,  1195,   129,     3,   128,
       1,   401,   472,   826,   531,   134,     7,     8,     9,     1,
     129,    52,   123,   557,   414,  1106,   697,     1,   124,   419,
     547,   421,   422,    28,  1106,   425,   426,   885,   129,   278,
     144,   431,   123,    73,   434,   435,   436,   437,   438,   288,
    1006,   290,     3,   134,   130,   387,   537,   389,    90,   540,
     780,   781,   782,   567,   780,   781,   782,   878,   130,    92,
     123,   664,   665,   666,   667,    17,   466,   467,   468,   395,
     126,   471,   472,   651,  1682,   475,   654,   566,   478,     1,
     810,   811,   812,   483,   810,   811,   812,   487,   488,   566,
     131,   144,   492,   493,  1053,  1866,   278,   935,   946,  1577,
     948,   959,   123,   124,   504,  1064,   288,   128,   290,     5,
     510,   511,  1432,   627,   514,   515,     1,   938,     1,   519,
     520,     3,   123,   523,   524,   130,   127,   527,   528,   529,
     131,   531,   124,   134,   534,   123,   128,   136,   959,   561,
    1424,   563,   126,  1538,   128,   545,   546,   547,  1006,   774,
       3,   551,  1472,   186,   187,  1475,   556,   557,     3,   120,
     121,   561,     3,   563,   564,  1420,   566,   567,   568,   130,
     419,   571,   561,  1420,   563,    28,   801,   527,   528,   529,
     221,   581,     3,  1208,   809,  1006,   586,  1404,  1405,   589,
       3,   591,   144,   593,  1016,   545,   546,   878,     5,   126,
     600,  1226,  1070,  1487,   829,   531,   128,  1531,  1233,  1404,
    1405,     3,  1584,     5,  1531,     5,     1,  1583,     3,     3,
    1088,   547,   471,     5,     3,   567,     3,  1420,   124,   720,
       3,  1584,   632,   697,   634,   268,    28,   270,   697,   124,
     129,  1584,   642,   128,   426,   128,   797,  2018,   130,  2020,
    1505,  1498,     3,  1500,     3,   581,   289,   697,   600,   998,
     999,  1000,   511,   128,   664,   665,   666,   667,   697,   134,
     664,   665,   666,   667,   825,     3,   121,   130,   959,   123,
    1888,   126,   682,   683,   692,   693,   121,     3,     3,   130,
     134,   691,  1584,    11,    73,   130,    73,   697,   679,   680,
     130,  1696,   132,   703,     7,     8,     9,   120,   121,   130,
     123,   711,    28,  2084,    65,  2086,   123,  2088,   718,   719,
     720,   721,   722,   723,     3,  1006,     7,     8,     9,   729,
    1152,   129,   732,   123,  1156,   120,   121,  1159,   130,  1161,
     124,   741,   124,   128,   725,   726,   727,   120,   121,    83,
     129,   350,   129,   556,   127,  2126,  2127,   757,  2129,     1,
     130,   761,   132,  1041,  1042,    69,    70,  1045,  1046,   120,
     121,   120,   121,   862,  2145,  1466,     1,   127,   127,   130,
     120,   419,   132,   586,  1466,   862,   589,     1,   591,   799,
     593,  2162,   120,   121,     1,  1767,   437,  1681,  1793,   130,
    1766,   132,  1686,   803,   122,   120,   121,   807,   441,  1804,
     128,   444,   666,   667,  1767,   130,   930,   827,     1,   795,
     911,   912,   421,   914,  1767,   129,   917,   918,   131,   973,
       1,   134,   832,   833,   834,  1755,  1756,   837,   838,   839,
     130,   123,   123,   967,   968,   124,   935,   823,   697,   183,
     131,   935,   134,   134,   703,   969,    12,    13,   935,  1418,
     860,   861,   862,   796,     3,   935,   866,  1751,   868,   869,
       7,     8,     9,   511,   127,  1767,   876,   877,   878,   132,
     729,   881,   124,   732,     3,   885,   128,   887,   888,    28,
     890,   824,   892,  1037,  1038,     3,   300,   129,   989,   124,
       7,     8,     9,   128,   537,   309,  1109,   540,     3,  1112,
     124,   315,  1251,  1252,   128,   697,   123,   124,  1248,  1258,
    1259,   128,  1248,  1262,  1263,   566,  1053,   568,   566,   929,
       3,   931,   126,    28,   123,   935,   130,  1792,   938,     0,
     123,   124,    37,   943,   278,   128,   946,  1150,   948,   949,
     972,     5,  1066,   124,   288,    28,   134,   128,   958,   959,
     960,  1164,  1165,  1166,  1167,   121,   122,   967,   968,   122,
     970,   122,   972,   973,     3,   128,  1065,   128,   978,   979,
     980,   981,    11,   972,   123,   834,   123,   798,  1065,  1984,
     729,  1550,   122,   732,   131,    79,  1704,   134,   128,   300,
     127,   120,   121,  1117,   123,  1538,  1006,  1641,   309,  1467,
     122,  1432,   120,   121,   315,   826,   128,     7,     8,     9,
     869,  1905,   130,   126,   131,  1047,   110,   111,   123,   878,
    1255,   664,   665,   666,   667,   797,   885,  1037,  1038,   137,
     138,  1041,  1042,   892,  1968,  1045,  1046,  1047,   132,  1049,
    1675,  1472,  1052,  1053,  1475,     7,     8,     9,  1047,   692,
     693,   694,  1062,   825,  1064,  1065,  1066,  2062,   793,   794,
    1070,   121,     3,  1073,     5,   128,  1076,   122,   128,  1079,
     128,     3,  1082,   128,   134,  1085,   799,     3,  1088,   128,
    1090,   120,   121,   122,   943,  1209,   821,   822,   127,   128,
      31,   130,  1052,   741,  1104,     3,    28,   128,  2103,  1109,
     959,     3,  1112,     5,   827,  1109,  1538,  1231,  1112,  1208,
     129,  1121,    44,  1123,  1066,    12,    13,  1053,    14,    15,
      28,  1208,  1132,  1980,   120,  1982,  1062,   471,  1064,   129,
       3,   131,     5,   130,     6,  1145,     8,     9,   129,    65,
    1150,  1151,    74,    75,   140,   141,  1150,     7,     8,     9,
    1141,  1183,   124,   122,  1164,  1165,  1166,  1167,    31,   128,
    1164,  1165,  1166,  1167,   123,   127,    74,    75,   127,   131,
     124,    79,  1182,  1183,  1184,   134,  1186,   123,    86,  1748,
     789,   790,   129,   792,  1183,   122,  1196,   531,  1198,  1907,
     534,   128,   124,  1203,   120,   121,   128,  1207,  1208,    10,
      11,    73,   110,   111,   121,  1493,  1494,   120,   817,   818,
     819,   820,    84,   130,   862,   132,  1226,   123,   120,   121,
     123,   869,   130,  1233,   121,   122,  1870,   140,   141,   877,
     122,     1,  1242,     3,  1583,  1584,   128,   109,   124,   890,
     888,    77,   128,  1812,  1196,  1109,   132,   119,  1112,   121,
     124,   860,   861,     1,   128,   123,     1,  1070,  1249,  1547,
    1548,  1804,   134,  1076,   122,   137,   138,   139,     3,  1082,
     128,   131,   527,   528,   529,  1088,   783,   784,   929,   122,
       3,   127,    69,    70,   698,   128,  1150,     3,    11,  1721,
     545,   546,   943,    28,  1726,   137,   138,  1729,   949,   122,
    1164,  1165,  1166,  1167,    91,   128,   813,   814,    95,    44,
      97,   123,    28,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,  1755,  1756,    74,    75,    44,    74,
      75,    79,   124,   130,    79,   132,   128,  1196,    86,    74,
      75,    86,   129,   122,  1203,   123,   989,   691,   122,   128,
     123,   960,  1476,   697,   128,    74,    75,   123,    74,    75,
      79,  1793,   110,   111,   124,   110,   111,    86,   128,   124,
     124,   124,  1804,   128,   128,   128,  1589,  1590,   126,   127,
     128,   126,   127,   128,   123,  1395,  1396,   698,  1601,  1399,
    1400,   110,   111,   123,  1404,  1405,   123,   120,   121,   122,
       1,  1052,   783,   784,  1052,   128,  1416,   130,   124,  1400,
    1420,  1421,   124,  1550,  1424,   124,   128,  1766,  1767,   128,
    1430,   387,  1432,   389,   123,  1435,   124,   121,   122,  1439,
     128,   136,   813,   814,  1444,  1445,  1446,   131,    88,    89,
      90,  1984,   136,   137,   138,   130,   140,   141,   142,   143,
     144,   130,   124,   132,   154,  2099,   128,  1467,   158,  1469,
       3,   130,  1472,   124,     0,  1475,  1109,   128,  1478,  1112,
     126,   132,   128,    74,    75,    74,    75,  1487,    79,   126,
      79,   128,    79,  1493,  1494,    86,  1446,    86,  1498,  1499,
    1500,  1501,   143,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,     1,   126,     3,   128,  1150,   142,   110,
     111,   110,   111,   110,   111,   130,   130,   132,   132,  2062,
      16,  1164,  1165,  1166,  1167,   126,   124,   128,   127,   126,
     136,    74,    75,   130,   878,   142,    79,  1547,  1548,   143,
    1550,     3,    16,    86,  1187,   124,  1189,    83,  1558,   128,
      10,    11,  1984,   132,     1,  1203,     3,    93,  1206,  1569,
       1,  1685,     3,  1687,   100,   101,    28,   110,   111,   136,
       1,     1,     3,     3,   785,   786,   124,  1701,  1702,  1589,
    1590,   126,   123,   128,  1683,  1589,  1590,   130,   130,  1599,
     132,  1601,  1602,   130,   938,  1605,  1683,  1601,  1207,  1609,
     130,   567,   127,  1613,   815,   816,  1616,   126,     1,   128,
    1469,   124,    74,    75,  1550,   959,   130,    79,   132,    14,
      15,  1612,  1558,  1512,    86,  1514,   130,  1840,   785,   786,
    2062,  1641,  1512,   124,  1514,   909,   910,  1628,  1648,  1874,
    1875,  1876,  1877,  1878,  1879,  1880,  1881,   124,   110,   111,
     530,   128,   909,   910,   126,   132,  1757,   128,   815,   816,
     126,   627,  1006,   545,   546,   664,   665,   121,   130,   664,
     665,  1681,   121,  1683,   127,  1812,  1686,   100,   101,   838,
     839,    74,    75,   121,   128,   221,    79,  1975,  1976,   135,
    1978,  1979,   135,    86,  1704,   130,  1706,  1707,   135,   128,
    1710,  1989,  1990,  1991,  1992,   130,   130,   134,   128,     3,
    1569,   128,   128,   126,   129,   123,   130,   110,   111,   123,
     132,   123,   123,   126,   130,  1589,  1590,   126,     3,   123,
     123,   124,  1742,  1968,    28,   128,    11,  1601,   126,   126,
     126,  1751,   278,    37,   126,  1755,  1756,   121,  1758,   124,
     129,  1783,   288,  1785,   290,   135,   121,   135,   135,   135,
    1770,   129,   135,  2103,   135,   134,   130,  2103,   130,  1417,
    2058,  2059,   126,  1783,   121,  1785,   128,  1809,  1788,  1811,
      74,    75,  1906,   350,  1783,    79,  1785,   129,   129,   325,
     124,  1915,    86,   124,   124,  1446,  2009,   135,  2011,  1809,
     135,  1811,  1812,   135,   124,   123,   132,   124,   124,   132,
    1809,  1420,  1811,   132,   123,  1424,   110,   111,  1469,   123,
     123,    56,   123,   123,  1834,  1835,  1836,  1837,   126,   123,
    1840,   711,   121,   126,  1844,  1845,  1840,  1847,   126,  1849,
    1184,   121,  1186,   126,   121,   120,   121,   122,  1972,  1973,
     124,  1861,   127,   128,   421,   130,    74,    75,   124,   123,
    1870,    79,   134,  1873,   744,  2078,     3,   121,    86,   124,
     128,   751,   124,  1864,   754,  1866,  1812,   124,  1487,  1522,
       3,   134,   128,   419,   124,   141,   128,   124,   144,   132,
     129,    28,   110,   111,   132,  1905,  1505,  1907,   132,   132,
      37,   157,   124,   159,     7,   161,   124,    10,    11,    12,
      13,    14,    15,    16,    17,   124,   124,   127,  1569,   126,
     124,  1569,   124,   129,   124,   124,    56,   124,   123,  1788,
     135,   123,   135,   123,   135,   471,   132,    74,    75,   132,
     121,   132,    79,   132,   132,  1977,  1589,  1590,   132,    86,
     124,    74,    75,   124,   124,   124,    79,   124,  1601,     3,
     124,   126,   135,    86,   930,  1975,  1976,  1977,  1978,  1979,
    1980,   134,  1982,   110,   111,   511,  1840,   135,  1977,  1989,
    1990,  1991,  1992,   120,    28,   135,   123,   110,   111,   135,
    2000,  2092,  2093,    37,   134,    11,   130,   134,   127,  2009,
     123,  2011,  2012,   969,   130,  2009,   126,  2011,    37,   127,
     132,  2021,  2022,   132,   127,    44,    45,   123,   121,   122,
     130,     0,   126,   124,   124,   124,   135,  2018,   131,  2020,
      74,    75,    64,   135,   124,    79,    64,   140,   141,   142,
     143,   144,    86,   135,   135,    74,    75,   135,  2058,  2059,
      79,   135,   135,   135,   124,  2065,  2066,    86,   124,  2069,
     124,  2071,    41,   124,  2074,   124,   110,   111,  2078,   126,
     135,   124,  1681,   135,  2078,   135,   126,  1686,   126,   123,
      59,   110,   111,  2093,   135,  2095,   135,    66,  1432,  2099,
     134,   120,  2083,  2084,   130,  2086,   126,  2088,   124,   126,
    1066,  2111,   126,   126,    83,   126,   126,    86,   126,   126,
    2134,   126,   126,    92,    93,   124,   126,   478,   998,   999,
    1000,   100,   101,     3,  2134,  2135,  2117,   126,  1472,  2139,
     478,  1475,   478,   478,   113,  2126,  2127,   116,  2129,   478,
    1788,  2151,  1751,  1501,   978,  2009,   860,  2011,    28,   128,
     288,  1117,   288,   915,  2145,   970,   426,   136,   806,  1467,
     436,   697,   141,   142,   723,   144,   314,   703,  1793,   265,
    2083,  2162,   100,    93,    93,   154,   270,   156,   157,   158,
     159,    93,   161,  1792,   720,   101,  1742,    -1,    -1,    -1,
      -1,    -1,    -1,   729,    74,    75,   732,  1840,    -1,    79,
      -1,    -1,    -1,    -1,    -1,   741,    86,   186,   187,    -1,
     466,   467,    74,    75,  2078,    -1,    -1,    79,    -1,   198,
      -1,    -1,   789,   790,    86,   792,  1106,    -1,    -1,    -1,
     110,   111,    -1,   212,    -1,    -1,   492,   493,    -1,    -1,
      -1,    -1,   221,  1209,    -1,    -1,    -1,    -1,   110,   111,
     817,   818,   819,   820,   141,    -1,    -1,   144,   514,   515,
      -1,    -1,   124,   519,   520,  1231,    -1,   523,   524,    -1,
     157,    -1,   159,    -1,   161,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,   265,    -1,    -1,   268,
     269,   270,    -1,   860,   861,    -1,  1905,    -1,   834,   278,
      -1,    -1,    -1,    -1,    -1,   561,    28,   563,    -1,   288,
     289,   290,    -1,  1727,  1728,    37,  1730,  1731,    -1,    -1,
      -1,  1735,  1736,  1737,  1738,    -1,    -1,    -1,    -1,   308,
      -1,    -1,    -1,   869,    -1,   314,    -1,    -1,    -1,    44,
      45,    -1,   878,    -1,    -1,    -1,   325,    -1,    -1,   885,
      -1,    -1,    74,    75,   890,    -1,   892,    79,    -1,    -1,
      -1,    -1,     3,    -1,    86,    -1,  2009,    -1,  2011,    74,
      75,  1251,  1252,    -1,    79,    -1,    -1,    -1,  1258,  1259,
      -1,    86,  1262,  1263,    -1,    74,    75,    28,   110,   111,
      79,    -1,    -1,   960,    -1,    -1,    37,    86,   120,    -1,
      -1,   123,   124,   382,    -1,   110,   111,   943,   387,    -1,
     389,  1755,  1756,    -1,     3,    -1,  1727,  1728,   123,  1730,
    1731,   110,   111,   959,  1735,  1736,  1737,  1738,    -1,    -1,
      -1,    -1,    -1,    74,    75,  2078,    -1,    -1,    79,    28,
     419,   130,   421,   422,    -1,    86,   425,   426,    37,    38,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,    -1,   438,
    1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,    -1,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,   268,   269,   120,
      -1,    -1,   123,    -1,    -1,    74,    75,   466,   467,    -1,
      79,   132,   471,   472,    -1,    -1,    -1,    86,    -1,   478,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    44,    45,   488,
    1476,    -1,    -1,   492,   493,    -1,     1,    -1,     3,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,   511,    -1,   123,   514,   515,    74,    75,    -1,
     519,   520,    79,    28,   523,   524,    -1,    -1,    -1,    86,
      -1,   530,    37,    38,  1968,    -1,    -1,    -1,   537,    -1,
      -1,   540,    -1,  1874,  1875,  1876,  1877,  1878,  1879,  1880,
    1881,    -1,    -1,   110,   111,    -1,    -1,   556,    -1,   466,
     467,    -1,   561,   120,   563,    -1,  1466,   566,   567,    74,
      75,   478,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    -1,    -1,    -1,   492,   493,   586,    -1,    -1,
     589,    -1,   591,    -1,   593,    -1,    -1,    44,    45,    74,
      75,   600,    -1,    -1,    79,   110,   111,   514,   515,     0,
      -1,    86,   519,   520,    -1,   120,   523,   524,   123,    -1,
    1207,   126,    -1,   128,   129,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,   909,   910,   110,   111,  1968,    -1,    86,
      -1,    -1,    -1,    -1,    -1,   120,    -1,  1203,   123,    -1,
      -1,    -1,    -1,    -1,   561,    -1,   563,    -1,    -1,   134,
      -1,    -1,   142,   110,   111,   664,   665,   666,   667,    -1,
      -1,    -1,    -1,    -1,   154,    -1,   123,    -1,   158,    -1,
      -1,    -1,    -1,  1583,  1584,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    83,   692,   693,   694,   972,    -1,   697,  1685,
      -1,  1687,    93,    -1,   703,    -1,     3,    -1,    -1,   100,
     101,    -1,   711,    -1,    -1,  1701,  1702,    -1,    -1,   718,
     719,   720,    -1,   722,   723,    -1,   537,    -1,    -1,   540,
     729,    28,    -1,   732,    -1,    -1,    74,    75,    74,    75,
      37,    79,   741,    79,    -1,   744,    -1,    -1,    86,    -1,
      86,   142,   751,   466,   467,   754,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,    -1,  1041,  1042,   158,    -1,  1045,
    1046,  1047,   110,   111,   110,   111,    -1,    74,    75,   492,
     493,    -1,    79,    -1,    -1,   265,   124,    -1,   124,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   514,   515,    -1,    -1,    -1,   519,   520,    -1,    -1,
     523,   524,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   268,   269,   123,    -1,   308,    -1,
      -1,    -1,    -1,  1420,   314,   834,    -1,  1424,   837,   838,
     839,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   664,   665,   666,   667,    -1,    -1,    -1,
      -1,   860,   861,   862,    -1,    -1,  1766,  1767,    74,    75,
     869,     0,    -1,    79,    -1,    -1,    -1,    -1,   877,   878,
      86,    -1,    -1,   694,    -1,    -1,   885,   278,    -1,   888,
      -1,   890,    -1,   892,    -1,    -1,    -1,   288,    -1,   290,
    1487,    -1,    -1,    -1,   110,   111,  1182,  1183,    -1,    -1,
      -1,    -1,    -1,  1469,   120,    -1,    -1,   123,  1505,    -1,
    1906,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,  1915,
      -1,    -1,    -1,    -1,    -1,    -1,   935,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   943,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    83,    84,   436,    -1,    -1,    -1,
     959,   960,    91,    -1,    93,    -1,    -1,    -1,   967,   968,
      -1,   100,   101,   972,    -1,    -1,    -1,    -1,    -1,   978,
      -1,    -1,    -1,    -1,    -1,    -1,  1972,  1973,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   998,
     999,  1000,   131,   132,   133,   134,   135,  1006,   488,    -1,
      -1,    -1,   141,  1569,    -1,   144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,
     159,    -1,   161,    -1,   425,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1041,  1042,    -1,   436,  1045,  1046,  1047,    -1,
      -1,    -1,    -1,    -1,   183,   184,   185,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   972,  1065,  1066,    -1,    -1,
      -1,  1070,    -1,    -1,    -1,    -1,    -1,  1076,    -1,    -1,
      -1,    -1,    -1,  1082,    -1,    -1,    -1,    -1,    -1,  1088,
      -1,   220,   221,   537,  1681,    -1,   540,   488,    -1,  1686,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1106,    -1,    -1,
    1109,    -1,    -1,  1112,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1041,  1042,   265,    -1,  1045,  1046,
    1047,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1704,   278,
      -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,   290,    -1,    -1,  1751,  1164,  1165,  1166,  1167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1182,  1183,    -1,    -1,    -1,  1187,    -1,
    1189,    -1,    -1,    -1,    -1,    -1,    -1,  1196,    -1,    -1,
      -1,    -1,    -1,     0,  1203,  1792,    -1,  1206,  1207,  1208,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1493,  1494,    -1,
     664,   665,   666,   667,    -1,    -1,    -1,  1226,    -1,    -1,
       0,    -1,  1788,    -1,  1233,    -1,    -1,    -1,   718,   719,
      -1,    -1,   722,   723,    -1,    -1,    -1,    -1,    -1,    -1,
     694,    -1,  1251,  1252,    -1,    -1,    -1,    -1,    -1,  1258,
    1259,    -1,    -1,  1262,  1263,    -1,   395,   396,   397,    -1,
      -1,  1547,  1548,    -1,    -1,  1182,  1183,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,
     419,    -1,    -1,    -1,    -1,    -1,    93,   426,  1109,    -1,
      -1,  1112,    -1,   100,   101,    -1,   697,    -1,   437,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,  1905,    -1,
      -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,  1041,  1042,
     100,   101,  1045,  1046,    -1,    -1,    -1,   466,   467,  1150,
      -1,    -1,   471,    -1,    -1,   142,   475,    -1,    -1,   478,
      -1,  1907,    -1,  1164,  1165,  1166,  1167,   154,   487,    -1,
      -1,   158,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   142,    -1,    -1,    -1,  1187,    -1,  1189,    -1,
      -1,    -1,   511,    -1,   154,   514,   515,    -1,   158,    -1,
     519,   520,    -1,    -1,   523,   524,    -1,   877,   527,   528,
     529,    -1,    -1,    -1,    -1,  1404,  1405,    -1,   888,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   545,   546,    -1,    -1,
      -1,  1420,    -1,    -1,    -1,  1424,    -1,    -1,    -1,    -1,
      -1,    -1,   561,    -1,   563,    -1,    -1,   566,    -1,   568,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   583,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1466,    -1,    -1,
    1469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   877,    -1,  1487,    -1,
      -1,   288,    -1,   290,  1493,  1494,    -1,   888,    -1,  1498,
    1499,  1500,  1501,    -1,    -1,    -1,    -1,  1783,   278,  1785,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,
     290,    -1,    -1,     1,    -1,     3,  1006,    -1,    -1,    -1,
      -1,    -1,    -1,  1809,    -1,  1811,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1547,  1548,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,   691,    -1,    -1,    -1,    -1,    -1,   697,    -1,
    1569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1583,  1584,  1493,  1494,    -1,   718,
    1589,  1590,    -1,   722,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,  1602,    -1,    -1,  1605,    -1,    86,    -1,
      -1,    -1,   741,    -1,  1613,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,   436,
    1547,  1548,   120,    -1,    -1,   123,    -1,    -1,   126,  1648,
     128,   129,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1109,   436,    -1,  1112,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1681,    -1,  1683,    -1,    -1,  1686,    -1,    -1,
      -1,   488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1975,
    1976,  1977,  1978,  1979,    -1,  1704,  1150,    -1,    -1,    -1,
      -1,    -1,    -1,  1989,  1990,  1991,  1992,    -1,   488,    -1,
    1164,  1165,  1166,  1167,    -1,    -1,  1206,    -1,    -1,    -1,
      -1,    -1,    -1,   862,    -1,    -1,    -1,    -1,    -1,    -1,
     869,    -1,    -1,  1187,    -1,  1189,  1226,   876,   877,   878,
      -1,    -1,  1751,  1233,    -1,    -1,   885,    -1,    -1,   888,
      -1,   890,    -1,    -1,    -1,    -1,    -1,  1766,  1767,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1589,  1590,
    1493,  1494,  2058,  2059,  1783,    -1,  1785,    -1,    -1,  1788,
      -1,  1602,    -1,    -1,  1605,    -1,    -1,    -1,    -1,    -1,
     929,    -1,  1613,    -1,    -1,    -1,    -1,    -1,    -1,   938,
    1809,    -1,  1811,   112,   943,    -1,    -1,    -1,    -1,    -1,
     949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     959,    -1,    -1,    -1,  1547,  1548,    -1,   136,    -1,    -1,
      -1,    -1,    -1,   972,    -1,  1844,  1845,   141,    -1,    -1,
     144,    -1,    -1,   982,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   157,    -1,   159,    -1,   161,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1783,  1006,  1785,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   198,
     697,    -1,  1809,    -1,  1811,    -1,  1905,    -1,  1907,    -1,
      -1,    -1,  1041,  1042,    -1,    -1,  1045,  1046,  1047,    -1,
      -1,    -1,    -1,  1052,  1053,    -1,    -1,   697,    -1,    -1,
      -1,    -1,    -1,    -1,  1063,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1975,  1976,  1977,  1978,
    1979,  1980,    -1,  1982,    -1,    -1,    -1,    -1,    -1,    -1,
    1989,  1990,  1991,  1992,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   300,    -1,    -1,    -1,   304,   305,   306,    -1,    -1,
     309,    -1,    -1,    -1,    -1,    -1,   315,    -1,    -1,    -1,
      -1,    -1,   321,    -1,    -1,    -1,    -1,    -1,    -1,   328,
      -1,    -1,    -1,  1844,  1845,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   345,    -1,    -1,    -1,
      -1,   350,    -1,  1182,  1183,    -1,    -1,    -1,    -1,  2058,
    2059,    -1,    -1,    -1,     0,    -1,    -1,    -1,  1975,  1976,
    1977,  1978,  1979,    -1,  1203,    -1,    -1,  1206,    -1,  1208,
     877,    -1,  1989,  1990,  1991,  1992,    -1,    -1,   387,    -1,
     389,   888,    -1,    -1,    -1,    -1,    -1,  1226,    -1,    -1,
      -1,    -1,    -1,    -1,  1233,    -1,     1,   877,     3,     4,
       5,    -1,    -1,    -1,    -1,    -1,    52,    -1,   888,    -1,
      -1,    -1,   421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1589,  1590,    83,    84,    -1,
      -1,  2058,  2059,    -1,    -1,    91,    -1,    93,  1602,    -1,
      -1,  1605,    -1,    -1,   100,   101,    -1,    -1,    -1,  1613,
      65,    -1,   466,   467,    -1,    -1,    71,    72,    -1,    -1,
      -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,    -1,    -1,
      85,    -1,    -1,    -1,    -1,   131,   132,    -1,   492,   493,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,
     514,   515,    -1,   118,    -1,   519,   520,    -1,   123,   523,
     524,   530,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
      -1,    -1,    -1,    -1,   328,    -1,    -1,   183,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   345,  1975,  1976,    -1,  1978,  1979,   561,   567,   563,
      -1,    -1,    -1,    -1,    -1,    -1,  1989,  1990,  1991,  1992,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1417,    -1,
      -1,    -1,    -1,    -1,   230,    -1,    -1,   233,    -1,    -1,
     599,    -1,    -1,  1432,    -1,    -1,    -1,    -1,    -1,    -1,
    1439,    -1,    -1,    -1,    -1,    -1,    -1,  1446,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   627,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1467,    -1,
    1469,    -1,   278,    -1,    -1,  2058,  2059,    -1,    -1,    -1,
      -1,    -1,   288,    -1,   290,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1493,  1494,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   698,
    1844,  1845,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1547,  1548,
      -1,  1550,    -1,    -1,    -1,   724,    -1,    -1,    -1,   728,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1569,    -1,    -1,    -1,    -1,   744,    -1,    -1,    -1,    -1,
      -1,    -1,   751,    -1,    -1,   754,    -1,    -1,    -1,   395,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   774,    -1,    -1,    -1,    -1,
      -1,   780,   781,   782,   783,   784,   785,   786,    -1,    -1,
     789,   790,    -1,   792,   793,   794,   795,   796,   797,   798,
     799,   437,   801,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     809,   810,   811,   812,   813,   814,   815,   816,   817,   818,
     819,   820,   821,   822,   823,   824,   825,   826,   827,    -1,
     829,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1675,    -1,    -1,    -1,
     345,    -1,    -1,   637,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   860,   861,    -1,    -1,    -1,    -1,    -1,   300,    -1,
      -1,    -1,   304,   305,   306,    -1,    -1,   309,    -1,    -1,
      -1,    -1,    -1,   315,    -1,    -1,    -1,    -1,    -1,   321,
      -1,   527,   528,   529,    -1,   531,   328,    -1,   534,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   545,
     546,   547,    -1,   345,    -1,    -1,    -1,    -1,   350,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   928,
     566,   930,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1783,   387,  1785,   389,    -1,  1788,
      -1,   960,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     969,    -1,    -1,    -1,    -1,    -1,   760,    -1,   972,    -1,
    1809,    -1,  1811,    -1,    -1,    -1,    -1,    -1,    -1,   421,
     774,    -1,  1821,    -1,    -1,    -1,    -1,    -1,    -1,   998,
      -1,  1000,    -1,    -1,    -1,    -1,    -1,   112,   270,   793,
     794,   795,   796,   797,    -1,    -1,   800,   801,    -1,    -1,
      -1,    -1,   806,    -1,    -1,   809,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   821,   822,   823,
     824,   825,    -1,    -1,   828,   829,    -1,  1041,  1042,    -1,
      -1,  1045,  1046,  1047,    -1,   691,    -1,    -1,    -1,    -1,
      -1,   697,    -1,    -1,    -1,    -1,    -1,  1066,    -1,     1,
      -1,    -1,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1106,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,   567,    -1,    -1,    -1,    71,
      72,    73,   637,    -1,  1143,  1144,  1975,  1976,  1977,  1978,
    1979,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1989,  1990,  1991,  1992,    -1,   270,    98,   599,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,   441,
      -1,    -1,    -1,    -1,    -1,    -1,   118,   119,  1182,  1183,
      -1,    -1,    -1,   125,   126,   627,   128,   129,   130,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,  1207,    -1,
    1209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,    -1,  2058,
    2059,    -1,  1231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1248,
      -1,    -1,    -1,  1252,   890,    -1,  1255,    -1,    -1,    -1,
    1259,    -1,    -1,    -1,  1263,   760,   698,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   724,   929,    -1,    -1,   728,    -1,   793,   794,
     795,   796,   797,    -1,    -1,   800,    -1,    -1,    -1,    -1,
      -1,   806,   744,   949,    -1,    -1,    -1,    -1,    -1,   751,
      -1,    -1,   754,    -1,    -1,    -1,   821,   822,   823,   824,
     825,    -1,    -1,   828,    -1,    -1,    -1,    -1,    -1,    -1,
    1124,    -1,   774,    -1,    -1,    -1,    -1,    -1,   780,   781,
     782,   783,   784,   785,   786,    -1,    -1,   789,   790,    -1,
     792,   793,   794,   795,   796,   797,   798,   799,  1152,   801,
     632,    -1,    -1,    -1,    -1,  1159,    -1,   809,   810,   811,
     812,   813,   814,   815,   816,   817,   818,   819,   820,   821,
     822,   823,   824,   825,   826,   827,    -1,   829,    -1,    -1,
      -1,    -1,   664,   665,   666,   667,    -1,    -1,    -1,  1193,
      -1,  1195,    -1,    -1,    -1,    -1,  1052,  1053,    -1,    -1,
      -1,  1420,    -1,    -1,    -1,  1424,    -1,    -1,   860,   861,
      -1,   536,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1466,    -1,    -1,
      -1,  1255,    -1,    -1,    -1,    -1,    -1,  1476,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1487,    -1,
      -1,    -1,    -1,    -1,   599,    -1,   928,    -1,   930,  1493,
    1494,    -1,    -1,    -1,    -1,    -1,  1505,   112,  1507,    -1,
      -1,    -1,    -1,  1512,    -1,  1514,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   632,   960,    -1,
      -1,    -1,  1531,    -1,    -1,    -1,    -1,   969,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1184,    -1,
    1186,    -1,    -1,  1547,  1548,    -1,    -1,    -1,    -1,   664,
     665,   666,   667,    -1,    -1,    -1,   998,    -1,  1000,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1584,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   724,
      -1,    -1,    -1,   728,    -1,    -1,    -1,    -1,    -1,  1124,
      -1,    -1,    -1,    -1,  1066,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   760,    -1,  1152,    -1,    -1,
      -1,    -1,    -1,    -1,  1159,    -1,    -1,    -1,    -1,   774,
      -1,    -1,    -1,    -1,  1106,    -1,    -1,    -1,    -1,   941,
      -1,    -1,  1681,    -1,    -1,  1117,  1685,  1686,  1687,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   801,  1696,  1193,    -1,
    1195,   806,  1701,  1702,   809,    -1,    -1,    -1,    -1,  1708,
      -1,  1143,  1144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   328,   829,    -1,    -1,    -1,  1727,  1728,
      -1,  1730,  1731,    -1,    -1,    -1,  1735,  1736,  1737,  1738,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1751,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1767,    -1,
      -1,    -1,    -1,    -1,    -1,  1207,    -1,  1209,    -1,    -1,
      -1,    -1,   387,    -1,   389,    -1,    -1,    -1,    -1,  1783,
      -1,  1785,    -1,  1792,    -1,    -1,    -1,    -1,    -1,  1231,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1446,    -1,    -1,    -1,    -1,  1809,  1248,  1811,    -1,    -1,
    1252,    -1,    -1,  1255,    -1,    -1,    -1,  1259,    -1,    -1,
      -1,  1263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1109,    -1,    -1,
    1112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1121,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1871,  1872,    -1,  1874,  1875,  1876,  1877,  1878,
    1879,  1880,  1881,    -1,    -1,    -1,    -1,    -1,  1150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1164,  1165,  1166,  1167,  1905,  1906,    -1,    -1,
      -1,  1016,    -1,    -1,  1550,    -1,  1915,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1721,    -1,    -1,
      -1,    -1,  1726,  1727,  1728,  1729,  1730,  1731,    -1,    -1,
      -1,  1735,  1736,  1737,  1738,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,    -1,    -1,    -1,    -1,  1968,
      -1,    -1,    -1,  1972,  1973,    -1,    -1,    -1,    -1,    -1,
      -1,  1975,  1976,  1977,  1978,  1979,    -1,    -1,  1420,    -1,
      -1,    -1,  1424,    -1,   599,  1989,  1990,  1991,  1992,    -1,
      -1,    -1,    -1,    -1,  1109,    -1,    -1,  1112,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1121,    -1,    -1,    -1,
      -1,    -1,   627,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1466,    -1,    -1,    -1,  1143,  1144,
      -1,    -1,    -1,    -1,  1476,  1150,    -1,  1152,    -1,    -1,
      -1,  1156,    -1,    -1,  1159,  1487,  1161,    -1,    -1,  1164,
    1165,  1166,  1167,    -1,  2058,  2059,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1505,    -1,  1507,    -1,    -1,    -1,    -1,
    1512,    -1,  1514,    -1,    -1,    -1,  2085,    -1,    -1,    -1,
    1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,    -1,  1531,
      -1,    -1,    -1,    -1,  2103,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   724,
      -1,    -1,    -1,   728,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   744,
      -1,    -1,    -1,    -1,    -1,    -1,   751,    -1,    -1,   754,
    1255,    -1,  1584,    -1,    -1,  2154,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   774,
      -1,    -1,    -1,    -1,    -1,    -1,  1812,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   801,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   809,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   829,    -1,  1721,    -1,    -1,    -1,
      -1,  1726,  1727,  1728,  1729,  1730,  1731,    -1,    -1,    -1,
    1735,  1736,  1737,  1738,    -1,    -1,    -1,    -1,    -1,  1681,
      -1,    -1,    -1,  1685,  1686,  1687,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   141,  1696,    -1,   144,    -1,    -1,  1701,
    1702,    -1,    -1,    -1,    -1,    -1,  1708,    -1,    -1,   157,
      -1,   159,    -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1727,  1728,    -1,  1730,  1731,
      -1,    -1,    -1,  1735,  1736,  1737,  1738,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1751,
      -1,    -1,    -1,   928,    -1,   930,    -1,  1589,  1590,    -1,
      -1,    -1,    -1,    -1,    -1,  1767,    -1,  1599,    -1,  1601,
    1602,    -1,     1,  1605,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1613,    -1,    -1,  1616,    -1,    -1,    -1,    -1,    -1,
    1792,    -1,    -1,    -1,   969,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,   270,   998,    -1,  1000,    -1,    -1,    -1,    -1,
      -1,    -1,  1507,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,  1538,    -1,    -1,    -1,    -1,    -1,  1871,
    1872,   100,  1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,  1066,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    -1,  1905,  1906,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1915,  1589,  1590,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1599,    -1,  1601,  1602,    -1,    -1,
    1605,  1106,    -1,    -1,    -1,    -1,    -1,    -1,  1613,    -1,
      -1,  1616,  1117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1968,    -1,  1143,  1144,
    1972,  1973,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1834,  1835,  1836,  1837,    -1,    -1,  1840,    -1,
      -1,    -1,  1844,  1845,    -1,  1847,    -1,  1849,   466,   467,
      -1,  1696,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1861,
      -1,    -1,    -1,  1708,  1209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   492,   493,  1721,    -1,    -1,    -1,
      -1,  1726,    -1,    -1,  1729,    -1,  1231,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   514,   515,    -1,    -1,
      -1,   519,   520,    -1,    -1,   523,   524,  1252,    -1,    -1,
    1255,    -1,   530,  2085,  1259,    -1,    -1,    -1,  1263,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   561,    -1,   563,    -1,    -1,  1793,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1804,
      -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2154,    -1,    -1,    -1,    -1,    -1,    -1,  1834,
    1835,  1836,  1837,    -1,    -1,  1840,    -1,    -1,  2000,  1844,
    1845,    -1,  1847,    -1,  1849,   128,    -1,  2009,    -1,  2011,
      -1,    -1,    -1,   136,   632,    -1,  1861,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1871,  1872,    -1,    -1,
      -1,    -1,    -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   664,   665,   666,   667,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2065,  2066,    -1,    -1,  2069,    -1,  2071,
      -1,    -1,  2074,    -1,    -1,    -1,  2078,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,  2111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1466,    -1,    -1,    -1,    -1,   744,    -1,    -1,    -1,
      -1,  1476,    -1,   751,    -1,    -1,   754,  2139,    -1,  1984,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,  2000,    -1,    -1,    -1,    -1,
      84,    85,  1507,    -1,  2009,    -1,  2011,  1512,    -1,  1514,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,  1531,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,    -1,    -1,    -1,    -1,   133,
     134,   135,   136,   137,   138,   139,    -1,  2062,    -1,    -1,
    2065,  2066,    -1,    -1,  2069,    -1,  2071,    -1,    -1,  2074,
      -1,    -1,    -1,  2078,    -1,    -1,    -1,    -1,    -1,  1584,
    2085,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2103,   382,
      -1,    -1,    -1,    -1,    -1,    -1,  2111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   909,   910,    -1,  2139,    -1,    -1,    -1,   421,   422,
      -1,    -1,    -1,   426,    52,    -1,    -1,    -1,    -1,  2154,
      -1,    -1,   435,    -1,    -1,   438,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    -1,    -1,    -1,
    1685,    -1,  1687,    91,    -1,    -1,    -1,    -1,    -1,   472,
      -1,  1696,    -1,    -1,   972,   478,  1701,  1702,    -1,    -1,
      -1,    -1,    -1,  1708,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     998,    -1,  1000,   131,   132,    -1,     0,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1767,  1041,  1042,    -1,    -1,  1045,  1046,  1047,
      -1,    -1,    -1,   556,    -1,   183,    -1,    51,    -1,    -1,
      -1,    -1,    -1,   566,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   586,    -1,    -1,   589,    -1,   591,    83,
     593,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
      -1,    -1,   230,    -1,    -1,   233,   100,   101,  1106,    -1,
      -1,  1109,    -1,    -1,  1112,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1121,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1871,  1872,   142,    -1,
     278,    -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     154,    -1,    -1,    -1,   158,    -1,  1164,  1165,  1166,  1167,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1906,    -1,    -1,  1182,  1183,    -1,    -1,    -1,    -1,
    1915,    -1,   186,   187,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1972,  1973,    -1,
      -1,    -1,    -1,    -1,  1252,    -1,    -1,    -1,    -1,    -1,
      -1,  1259,    -1,    -1,    -1,  1263,    -1,   395,    -1,    -1,
      -1,   265,    -1,    -1,   268,   269,   270,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   437,
      -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,
     314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   325,    -1,    -1,   837,   838,   839,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   475,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   860,   861,   862,
    2085,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2103,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   527,
     528,   529,    -1,   531,    -1,    -1,   534,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   419,    -1,    -1,    -1,  2154,
      -1,   425,   935,    -1,    -1,    -1,    -1,    -1,   566,    -1,
      -1,    -1,   436,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   960,    -1,    -1,
      -1,    -1,    -1,    -1,   967,   968,    -1,    -1,  1466,    -1,
      -1,    -1,    -1,    -1,    -1,   978,    -1,   471,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   488,  1493,  1494,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1512,    -1,  1514,   511,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,   530,    -1,    -1,    -1,
      -1,    -1,    -1,   537,    -1,    -1,   540,    -1,    -1,  1547,
    1548,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1065,   691,    -1,    -1,    -1,  1070,    -1,    -1,
      -1,    -1,    -1,  1076,    -1,    -1,    -1,    -1,    -1,  1082,
      -1,    -1,    -1,    -1,    -1,  1088,  1584,    -1,    -1,    65,
      -1,  1589,  1590,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,  1599,    -1,  1601,  1602,    -1,    -1,  1605,    84,    85,
      -1,    -1,    -1,    -1,    -1,  1613,    -1,    -1,  1616,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,   119,   120,   639,    -1,   123,   124,   125,
      -1,    -1,   128,    -1,    -1,    -1,   132,   133,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,   198,
     664,   665,   666,   667,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   692,   693,
     694,    -1,    -1,   697,  1207,  1208,    -1,    -1,    -1,   703,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   711,    -1,    -1,
      -1,    -1,    -1,    -1,   718,   719,   720,    -1,   722,   723,
      -1,    -1,    -1,    -1,    -1,   729,    -1,    -1,   732,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   741,    -1,    -1,
     744,    -1,    -1,    -1,    -1,    -1,    -1,   751,    -1,    -1,
     754,    -1,   890,    -1,    -1,    -1,    -1,    -1,    -1,  1767,
      -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     309,    -1,    -1,    -1,    -1,  1783,   315,  1785,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   929,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
      -1,  1809,    -1,  1811,    -1,    -1,    -1,    -1,   946,    -1,
     948,   949,    -1,    -1,    -1,    -1,    -1,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1834,  1835,  1836,  1837,
     834,    -1,  1840,    -1,    -1,    -1,  1844,  1845,    -1,  1847,
      -1,  1849,    -1,    -1,    -1,    51,    52,    -1,   387,    -1,
     389,    -1,    -1,  1861,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   869,    -1,    -1,   183,    -1,
      -1,    -1,    -1,   877,   878,    -1,    -1,    83,    84,    -1,
      -1,   885,    88,    -1,   888,   889,   890,    93,   892,    -1,
      -1,  1404,  1405,    -1,   100,   101,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   221,  1420,    -1,    -1,
      -1,  1424,   118,    -1,  1052,  1053,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   943,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   959,    -1,    -1,    -1,    -1,
      -1,    -1,   270,    -1,    -1,    -1,    -1,  1975,  1976,  1977,
    1978,  1979,    -1,   288,  1487,    -1,   182,    -1,    -1,    -1,
      -1,  1989,  1990,  1991,  1992,  1498,  1499,  1500,  1501,   195,
      -1,   530,  2000,    -1,   998,   999,  1000,    -1,    -1,    -1,
      -1,  2009,  1006,  2011,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   221,    -1,   325,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1184,    -1,  1186,    -1,
    2058,  2059,    -1,    -1,    -1,    -1,    -1,  2065,  2066,   265,
      -1,  2069,    -1,  2071,    -1,    -1,  2074,    -1,    -1,    -1,
    2078,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,   288,    -1,   290,    -1,   401,    -1,   627,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1106,  2111,    -1,  1109,    -1,    -1,  1112,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   437,
      -1,  2139,    -1,    -1,    -1,  1648,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,   698,
    1164,  1165,  1166,  1167,    -1,    -1,    -1,    -1,  1681,    -1,
    1683,    -1,    -1,  1686,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1187,    -1,  1189,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1203,
      -1,    -1,  1206,    -1,    -1,   744,    -1,    -1,    -1,    -1,
      -1,    -1,   751,   419,    -1,   754,   531,    -1,    -1,   534,
      -1,    -1,  1226,    -1,    -1,    -1,    -1,    -1,    -1,  1233,
      -1,   437,   547,    -1,    -1,    -1,    -1,    -1,  1751,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1251,  1252,    -1,
      -1,    -1,    -1,   568,  1258,  1259,    -1,    -1,  1262,  1263,
      -1,    -1,    -1,    -1,    -1,   471,   581,    -1,   474,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   511,    -1,    -1,  1446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,   637,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   545,
     546,    -1,    -1,    -1,    -1,   653,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   664,   665,   666,   667,
     566,    -1,   568,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   579,    -1,    -1,   691,    -1,    -1,    -1,
      -1,    -1,   697,    -1,    -1,    -1,    -1,    -1,    -1,   928,
      -1,   930,  1905,    -1,    -1,   703,    -1,    -1,   706,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,  1550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   729,    -1,    -1,    -1,    -1,    -1,   735,    -1,    -1,
     969,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   762,    -1,    -1,    -1,    -1,   998,
      -1,  1000,  1466,    -1,    92,  1469,    -1,  1980,    -1,  1982,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,
      -1,   697,   800,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     808,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   718,    -1,    -1,    -1,   722,    -1,    -1,    -1,
     828,    -1,    -1,    -1,    -1,    -1,    -1,  1066,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   741,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,    -1,    -1,   878,    -1,  1569,    -1,  1106,    -1,    -1,
     885,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1117,  1583,
    1584,    -1,   890,    -1,    -1,  1589,  1590,    -1,    -1,    -1,
      -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,  1602,    -1,
      -1,  1605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1613,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   938,    -1,    -1,    -1,    -1,   943,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,
     268,   269,   270,    -1,   959,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   862,   863,    -1,    -1,
      -1,   289,    -1,   869,    -1,    -1,    -1,    -1,    -1,    -1,
    1209,   877,   878,    -1,  1812,    -1,    -1,    -1,    -1,   885,
     308,    -1,   888,   889,   890,    -1,   314,    -1,    -1,    -1,
      -1,  1006,  1231,    -1,    -1,    -1,    -1,   325,    -1,    -1,
    1704,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1252,    -1,    -1,    -1,    -1,    -1,    -1,
    1259,    -1,    -1,   929,  1263,    -1,    -1,    -1,    -1,    -1,
      -1,   937,    -1,    -1,    -1,    -1,    -1,   943,  1053,    -1,
      -1,    -1,    -1,   949,    -1,    -1,    -1,  1062,    -1,  1064,
      -1,    -1,    -1,   959,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1766,  1767,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1788,    -1,    -1,    -1,    -1,    -1,
      -1,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1006,  1109,    -1,    -1,  1112,  1113,  1114,    -1,  1116,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1132,    -1,    -1,    -1,    -1,    -1,
      -1,  1139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1844,  1845,  1150,   471,    -1,    -1,  1052,    -1,    -1,  1157,
      -1,    -1,    -1,    -1,  1162,  1061,  1164,  1165,  1166,  1167,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1184,
      -1,  1186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   511,    -1,  1193,    -1,  1195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,  1907,    -1,    -1,    -1,    -1,    -1,   537,
      -1,    -1,   540,    -1,    -1,    -1,    -1,    -1,    -1,  1227,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1466,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1476,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1273,    -1,    -1,    -1,    -1,
     632,    -1,    -1,  1512,    -1,  1514,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1531,    -1,    -1,    -1,    -1,  1203,    -1,    -1,
    1206,    -1,  1208,    -1,   666,   667,    -1,    -1,    -1,    -1,
    1216,    -1,    -1,    -1,    -1,    -1,    -1,  1325,    -1,    -1,
    1226,    -1,    -1,    -1,    -1,    -1,    -1,  1233,    -1,    -1,
    1338,    -1,    -1,    -1,    -1,    -1,   664,   665,   666,   667,
      -1,    -1,    -1,    -1,    -1,  1584,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   692,   693,   694,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,
      -1,  1389,    -1,   711,    -1,    -1,    -1,    -1,    -1,    -1,
     718,   719,   720,    -1,   722,   723,    -1,    -1,    -1,    -1,
      -1,   729,    -1,    -1,   732,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   741,    -1,    -1,   744,  1432,    -1,    -1,
      -1,    -1,    -1,   751,  1439,    -1,   754,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1685,    -1,  1687,    -1,
      -1,    -1,  1467,    -1,  1469,    -1,    -1,  1472,    -1,    -1,
    1475,    -1,  1701,  1702,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1727,  1728,
      -1,  1730,  1731,    -1,    -1,    -1,  1735,  1736,  1737,  1738,
      -1,    -1,    -1,    -1,    -1,    -1,   834,    -1,    -1,    -1,
      -1,  1417,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    92,    -1,  1431,    -1,    -1,  1767,    -1,
      -1,    -1,  1438,    -1,    -1,  1550,    -1,    -1,    -1,    -1,
    1446,   869,    -1,  1558,    -1,    -1,    -1,    -1,   325,    -1,
     878,    -1,    -1,    -1,  1569,    -1,    -1,   885,    -1,    -1,
      -1,  1467,   890,  1469,   892,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1589,  1590,    -1,    -1,    -1,    -1,  1595,    -1,  1597,
      -1,    -1,  1600,  1601,    -1,    -1,    -1,    -1,  1606,  1607,
      -1,  1609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1619,    -1,  1621,    -1,   943,    -1,   186,   187,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   959,    -1,    -1,    -1,  1874,  1875,  1876,  1877,  1878,
    1879,  1880,  1881,  1549,    -1,  1653,    -1,    -1,    -1,  1657,
      -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     437,    -1,    -1,  1569,    -1,    -1,    -1,  1906,    -1,    -1,
     998,   999,  1000,    -1,    -1,    -1,  1915,    -1,  1006,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,   268,
     269,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1968,
      -1,    -1,    -1,  1972,  1973,    -1,    -1,    -1,    -1,   308,
    1755,  1756,    -1,  1758,    -1,   314,    -1,  1109,    -1,    -1,
    1112,    -1,    -1,    -1,    -1,    -1,   325,    -1,    -1,  1121,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1675,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1106,    -1,
      -1,  1109,    -1,    -1,  1112,    -1,    -1,    -1,  1150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1812,    -1,    -1,
      -1,    -1,  1164,  1165,  1166,  1167,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1822,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1840,  1841,    -1,    -1,  1164,  1165,  1166,  1167,
    1848,  1747,    -1,    -1,  1852,    -1,  1854,    -1,    -1,    -1,
     419,    -1,    -1,    -1,    -1,  1863,    -1,    -1,    -1,  1187,
     637,  1189,    -1,  1769,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1203,   653,    -1,  1206,    -1,
     657,    -1,  1788,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1226,  1907,
      -1,    -1,   471,    -1,    -1,  1233,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1251,  1252,    -1,   703,    -1,    -1,   706,
    1258,  1259,    -1,    -1,  1262,  1263,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   720,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   729,    -1,    -1,    -1,    -1,    -1,   735,   736,
      -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,
      -1,   540,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,
      -1,  1887,    -1,    59,    -1,   762,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2001,  2002,    -1,  2004,    -1,  2006,    -1,
      -1,  2009,  2010,  2011,    -1,    -1,    82,    83,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   800,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   808,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   828,    -1,    -1,    -1,   131,   132,    -1,    -1,  2067,
      -1,    -1,  2070,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2078,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   164,    -1,
      -1,    -1,    -1,    -1,    -1,   664,   665,   666,   667,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2114,   183,    -1,    -1,
      -1,    -1,    -1,   890,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   692,   693,   694,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,  1466,    -1,
      -1,  1469,   711,    -1,   220,   221,    -1,    -1,    -1,   718,
     719,   720,    -1,   722,   723,    -1,    -1,    -1,    -1,    -1,
     729,    -1,    -1,   732,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   741,    -1,    -1,   744,    -1,    -1,    -1,    -1,
      -1,    -1,   751,    -1,    -1,   754,    -1,    -1,    -1,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1589,  1590,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1599,    -1,  1601,
    1602,  1569,    -1,  1605,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1613,    -1,    -1,  1616,  1583,  1584,    -1,    -1,    -1,
      -1,  1589,  1590,    -1,    -1,   834,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1602,    -1,    -1,  1605,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1613,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     869,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   878,
      -1,    -1,    -1,    -1,    -1,    -1,   885,    -1,    -1,   395,
      -1,   890,    -1,   892,    -1,   401,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1113,  1114,    -1,  1116,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,    -1,
    1127,    -1,    -1,    -1,    -1,  1132,    -1,    -1,    -1,    -1,
      -1,   437,  1139,  1140,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   943,    -1,  1704,    -1,    -1,    -1,
    1157,  1158,    -1,    -1,    -1,  1162,    -1,    -1,    -1,    -1,
     959,    -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    -1,    -1,    -1,    -1,  1193,    -1,  1195,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   998,
     999,  1000,    -1,    -1,    -1,    -1,    -1,  1006,  1766,  1767,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1227,   527,   528,   529,    -1,   531,    -1,    -1,   534,    -1,
    1788,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   545,
     546,   547,  1834,  1835,  1836,  1837,    -1,    -1,  1840,    -1,
      -1,    -1,  1844,  1845,    -1,  1847,    -1,  1849,   564,    -1,
     566,    -1,   568,    -1,    -1,    -1,  1273,  1274,    -1,  1861,
      -1,    -1,    -1,    -1,    -1,   581,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1844,  1845,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1106,    -1,    -1,
    1109,    -1,    -1,  1112,    -1,    -1,    -1,    -1,  1325,    -1,
    1327,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1338,  1339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1907,
      -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1164,  1165,  1166,  1167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   683,    -1,    -1,
      -1,    -1,  1389,    -1,  1391,   691,    -1,    -1,  1187,    -1,
    1189,   697,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1203,    -1,    -1,  1206,  2000,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2009,    -1,  2011,
      -1,    -1,    -1,    83,    84,    -1,    -1,  1226,    -1,    -1,
      -1,    -1,    -1,    -1,  1233,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1251,  1252,    -1,    -1,    -1,    -1,    -1,  1258,
    1259,    -1,    -1,  1262,  1263,    -1,     3,    -1,    -1,    -1,
      -1,   131,   132,  2065,  2066,    -1,    -1,  2069,    -1,  2071,
      -1,    -1,  2074,    -1,    -1,    -1,  2078,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,  2111,
      -1,    -1,    -1,   183,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,  2139,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   221,    -1,   100,    -1,    -1,    -1,    -1,  1575,    -1,
     876,    -1,   878,   110,   111,   112,   113,   114,   115,   885,
      -1,    -1,    -1,   120,   890,    -1,   123,    -1,  1595,  1596,
    1597,  1598,    -1,  1600,  1601,    -1,    -1,   134,    -1,  1606,
    1607,    -1,  1609,    -1,  1611,   265,    -1,    -1,    -1,    -1,
      -1,    -1,  1619,  1620,  1621,    -1,    -1,    -1,   278,    -1,
      -1,    -1,    -1,   929,    -1,    -1,    -1,    -1,   288,    -1,
      -1,    -1,   938,    -1,    -1,    -1,    -1,   943,    -1,    -1,
      -1,     3,    -1,   949,    -1,    -1,  1653,    -1,  1655,    -1,
    1657,    -1,  1659,   959,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,  1466,    -1,    -1,
    1469,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1006,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,   100,    -1,
      -1,   401,    -1,    -1,    -1,    -1,  1052,  1053,   110,   111,
     112,   113,   114,   115,    -1,    -1,  1062,    -1,  1064,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1569,    -1,    -1,    -1,    -1,    -1,    -1,   437,    -1,    -1,
      -1,    -1,    -1,    -1,  1583,  1584,    -1,    -1,    -1,    -1,
    1589,  1590,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1602,    -1,    -1,  1605,    -1,    -1,    -1,
      -1,   471,    -1,    -1,  1613,  1822,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1841,    -1,    -1,    -1,    -1,  1846,
      -1,  1848,  1849,    -1,  1851,  1852,    -1,  1854,    -1,  1856,
      -1,    -1,    -1,    -1,    -1,  1862,  1863,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   527,   528,   529,
      -1,   531,    -1,    -1,   534,    -1,    -1,    -1,  1184,    -1,
    1186,    -1,    -1,    -1,    -1,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1907,    -1,    -1,    -1,    -1,  1704,   566,   142,   568,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,   581,    -1,   158,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   186,   187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1766,  1767,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,  1788,
      -1,    -1,    -1,    -1,  2001,  2002,    -1,  2004,  2005,  2006,
      -1,    -1,    -1,  2010,  2011,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     265,   691,    -1,   268,   269,   270,    -1,   697,    -1,    28,
      -1,    -1,    -1,    -1,    -1,  1844,  1845,    -1,    37,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
    2067,  2068,    -1,  2070,  2071,    -1,    -1,    -1,  2075,    -1,
      -1,    -1,    -1,   308,    -1,    -1,    65,    -1,    -1,   314,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2114,  1907,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,  1432,    -1,    -1,   118,
     119,   120,    -1,  1439,   123,   124,   125,    -1,    -1,    -1,
    1446,    -1,    -1,    -1,   133,   134,    -1,   136,   137,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1467,    -1,  1469,    -1,    -1,  1472,    -1,    -1,  1475,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   419,    -1,    -1,    -1,    -1,    -1,
     425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   436,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   878,    -1,
      -1,    -1,    -1,    -1,    -1,   885,    -1,    -1,    -1,    -1,
     890,    -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1550,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1558,   488,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1569,    -1,    -1,    -1,    -1,    -1,   929,
      -1,    -1,    -1,    -1,    -1,    -1,   511,     1,   938,     3,
       4,     5,     6,   943,     8,     9,    -1,    -1,    -1,   949,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,    -1,   959,
      -1,    -1,   537,    -1,    28,   540,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,  1006,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,  1052,  1053,   118,   119,   120,    -1,    -1,   123,
     124,   125,  1062,    92,  1064,    -1,    -1,    -1,    -1,   133,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   664,
     665,   666,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1755,
    1756,    -1,  1758,   142,    -1,    -1,    -1,   692,   693,   694,
      -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,    -1,   158,
      -1,    -1,    -1,    -1,    -1,    -1,   711,    -1,    -1,    -1,
      -1,    -1,    -1,   718,   719,    -1,    -1,   722,   723,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1812,    -1,    -1,   744,
      -1,    -1,    -1,    -1,    -1,    -1,   751,    -1,    -1,   754,
      -1,    -1,    -1,    -1,  1184,    -1,  1186,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,   268,
     269,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   834,
     289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,   308,
      -1,    -1,    -1,    -1,    -1,   314,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   869,    28,    -1,    -1,    -1,    -1,
      92,    -1,   877,   878,    -1,    -1,    -1,    -1,    -1,    -1,
     885,    -1,    -1,   888,    -1,    -1,    -1,   892,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,
     142,    84,    85,    86,    -1,    88,    89,    90,    -1,    -1,
      -1,    -1,   154,    -1,    -1,    98,   158,    -1,   943,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,    -1,   959,   118,   119,   120,    -1,    -1,
     123,    -1,   125,   126,   186,   187,   425,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,   139,   436,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   998,   999,  1000,    -1,    -1,    -1,    -1,
      -1,  1006,  1432,    -1,    -1,    -1,    -1,    -1,    -1,  1439,
      -1,    -1,    -1,    -1,    -1,    -1,  1446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   488,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1467,    -1,  1469,
      -1,    -1,  1472,   265,    -1,  1475,   268,   269,   270,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
      -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,
      -1,   540,    -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,
      -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1106,    -1,    -1,  1109,    -1,    -1,  1112,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1558,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1569,
      -1,    -1,    -1,    -1,    -1,  1150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1164,
    1165,  1166,  1167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1187,    -1,  1189,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1206,    -1,   425,    -1,   664,   665,   666,   667,    -1,
      -1,    -1,    -1,    -1,   436,    -1,    -1,    -1,    -1,    -1,
      -1,  1226,    -1,    -1,    -1,    -1,    -1,    -1,  1233,    -1,
      -1,    -1,    -1,   692,   693,   694,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1251,  1252,    -1,    -1,
      -1,    -1,   711,  1258,  1259,    -1,    -1,  1262,  1263,   718,
     719,    -1,    -1,   722,   723,    -1,   488,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   744,    -1,    -1,    -1,    -1,
      -1,    -1,   751,    -1,    -1,   754,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,   530,     8,
       9,    -1,    -1,    -1,    -1,   537,    -1,    -1,   540,    -1,
      -1,    -1,    -1,    -1,    -1,  1755,  1756,    -1,  1758,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,  1812,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   877,   118,
     119,   120,    -1,    -1,   123,   124,   125,    -1,    -1,   888,
      -1,    -1,    -1,    -1,   133,   134,    -1,   136,   137,   138,
     139,    -1,   664,   665,   666,   667,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1466,    -1,    -1,  1469,    -1,    -1,    -1,    -1,    -1,
     692,   693,   694,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   711,
      -1,    -1,    -1,    -1,    -1,    -1,   718,   719,    -1,    -1,
     722,   723,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   744,    -1,    -1,    -1,    -1,    -1,    -1,   751,
      -1,    -1,   754,    -1,    -1,    -1,    -1,    -1,    -1,   998,
     999,  1000,    -1,    -1,    -1,    -1,    -1,  1006,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1569,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1583,  1584,
      -1,    -1,    -1,    -1,  1589,  1590,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1602,    -1,    -1,
    1605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1613,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    -1,    -1,  1106,    -1,    -1,
    1109,    -1,    -1,  1112,    -1,   877,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   888,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      85,    -1,    -1,    -1,    -1,  1164,  1165,  1166,  1167,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,  1187,    -1,
    1189,    -1,    -1,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,    -1,    -1,   131,  1206,   133,   134,
      -1,   136,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,  1766,  1767,    -1,    -1,    -1,    -1,  1226,    -1,    -1,
      -1,    -1,    -1,    -1,  1233,    -1,   998,   999,  1000,    -1,
      -1,    -1,    -1,  1788,  1006,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1251,  1252,    -1,    -1,    -1,    -1,    -1,  1258,
    1259,    -1,    -1,  1262,  1263,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1844,
    1845,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    -1,    -1,  1106,    -1,    -1,  1109,    -1,    -1,
    1112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,  1150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,
      -1,    -1,  1164,  1165,  1166,  1167,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,  1187,    -1,  1189,    -1,    -1,
     118,   119,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,    -1,    -1,   131,  1206,   133,   134,    -1,   136,   137,
     138,   139,   140,   141,   142,   143,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1226,    -1,    -1,  1466,    -1,    -1,
      -1,  1233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1251,
    1252,    -1,    -1,    -1,    -1,    -1,  1258,  1259,    -1,    -1,
    1262,  1263,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,    -1,    -1,    -1,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,  1583,  1584,    79,    -1,    -1,    -1,
    1589,  1590,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1602,    -1,    -1,  1605,   100,    -1,    -1,
      -1,    -1,    -1,    -1,  1613,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,   121,   122,
     123,    -1,    -1,   126,   127,   128,   129,    -1,   131,    -1,
      -1,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
     143,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1466,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,  1766,  1767,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,   123,   124,   125,   126,    -1,   128,   129,   130,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,  1583,  1584,    -1,    -1,    -1,    -1,  1589,  1590,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1602,    -1,    -1,  1605,    -1,  1844,  1845,    -1,    -1,     0,
       1,  1613,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1766,  1767,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,  1844,  1845,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,   129,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,
      -1,   136,   137,   138,   139,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,   123,    -1,   125,
     126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,    -1,
     136,   137,   138,   139,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,   123,    -1,   125,   126,    -1,
     128,   129,   130,    -1,    -1,   133,   134,    -1,   136,   137,
     138,   139,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,   123,    -1,   125,   126,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,   137,   138,
     139,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,   123,    -1,   125,   126,    -1,   128,   129,
     130,    -1,    -1,   133,   134,    -1,   136,   137,   138,   139,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
      -1,    -1,   123,    -1,   125,   126,    -1,   128,   129,   130,
      -1,    -1,   133,   134,    -1,   136,   137,   138,   139,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,   123,    -1,   125,   126,    -1,   128,   129,   130,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
     123,    -1,   125,   126,    -1,   128,   129,   130,    -1,    -1,
     133,   134,    -1,   136,   137,   138,   139,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,   137,   138,   139,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,   128,   129,   130,    -1,    -1,   133,   134,
      -1,   136,   137,   138,   139,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,    -1,    -1,   123,    -1,   125,
     126,    -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,
     136,   137,   138,   139,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,    -1,    -1,   123,    -1,   125,   126,    -1,
     128,   129,   130,    -1,    -1,   133,   134,    -1,   136,   137,
     138,   139,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,    -1,    -1,   123,    -1,   125,   126,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,   137,   138,
     139,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,    -1,    -1,   123,     1,   125,     3,     4,     5,     6,
      -1,     8,     9,   133,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,    -1,    -1,   123,     1,   125,     3,
       4,     5,     6,    -1,     8,     9,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
       1,   125,     3,     4,     5,     6,   130,     8,     9,   133,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    86,    87,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    28,    -1,   118,   119,   120,
      -1,    -1,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,    -1,   136,   137,   138,   139,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    -1,    88,    89,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,   124,   125,   126,    -1,   128,    -1,   130,    -1,   132,
     133,   134,    -1,   136,   137,   138,   139,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    -1,    88,    89,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
     124,   125,   126,    -1,   128,    -1,   130,    -1,   132,   133,
     134,    -1,   136,   137,   138,   139,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    -1,    88,    89,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,
      -1,   136,   137,   138,   139,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    -1,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,
     126,    -1,    -1,    -1,   130,    -1,   132,   133,   134,    -1,
     136,   137,   138,   139,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
     132,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,   126,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,    -1,    -1,    -1,   132,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
     132,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,   126,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,   128,   129,   130,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,   126,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,   126,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,   126,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,   128,    -1,    -1,    -1,
     132,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,   128,    -1,    -1,    -1,
     132,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,   126,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,   128,    -1,    -1,    -1,
     132,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,   128,    -1,    -1,    -1,   132,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,   129,   130,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,   135,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,   132,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,   135,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
     132,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,    -1,   130,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,   124,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
       0,     1,    -1,     3,     4,     5,   118,   119,   120,    -1,
      -1,   123,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,   134,    -1,   136,   137,   138,   139,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,    -1,   123,   124,   125,   126,    -1,   128,   129,
      -1,    -1,    -1,   133,   134,     0,     1,    -1,     3,     4,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,   128,   129,    -1,    -1,    -1,   133,   134,
       0,     1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,    -1,   123,    -1,   125,   126,     0,     1,   129,
       3,     4,     5,   133,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,    -1,
     123,    -1,   125,   126,     0,     1,   129,     3,     4,     5,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,   125,
     126,     0,     1,   129,     3,     4,     5,   133,   134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,    -1,   123,    -1,   125,   126,    -1,     1,
     129,     3,     4,     5,   133,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
      -1,   123,    -1,   125,   126,    -1,     1,   129,     3,     4,
       5,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,     1,   129,     3,     4,     5,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,    -1,   123,    -1,   125,   126,    -1,
       1,   129,     3,     4,     5,   133,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,    -1,   123,    -1,   125,   126,    -1,     1,   129,     3,
       4,     5,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,     1,   129,     3,     4,     5,   133,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,    -1,   123,    -1,   125,   126,
      -1,     1,   129,     3,     4,     5,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,    -1,   123,    -1,   125,   126,    -1,     1,   129,
       3,     4,     5,   133,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,    -1,
     123,    -1,   125,   126,    -1,     1,   129,     3,     4,     5,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,   125,
     126,    -1,     1,   129,     3,     4,     5,   133,   134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,    -1,   123,    -1,   125,   126,    -1,     1,
     129,     3,     4,     5,   133,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
      -1,   123,    -1,   125,   126,    -1,     1,   129,     3,     4,
       5,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,     1,   129,     3,     4,     5,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,    -1,   123,    -1,   125,   126,    -1,
       1,   129,     3,     4,     5,   133,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,    -1,   123,    -1,   125,   126,    -1,     1,   129,     3,
       4,     5,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,     1,   129,     3,     4,     5,   133,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,    -1,   123,    -1,   125,   126,
      -1,     1,   129,     3,     4,     5,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,    -1,   123,    -1,   125,   126,    -1,     1,   129,
       3,     4,     5,   133,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,    -1,
     123,    -1,   125,   126,    -1,     1,   129,     3,     4,     5,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,   125,
     126,    -1,     1,   129,     3,     4,     5,   133,   134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,    -1,   123,    -1,   125,   126,    -1,     1,
     129,     3,     4,     5,   133,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
      -1,   123,    -1,   125,   126,    -1,     1,   129,     3,     4,
       5,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,     1,   129,     3,     4,     5,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,    -1,   123,    -1,   125,   126,    -1,
       1,   129,     3,     4,     5,   133,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,    -1,   123,    -1,   125,   126,    -1,     1,   129,     3,
       4,     5,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,     1,   129,     3,     4,     5,   133,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,    -1,   123,    -1,   125,   126,
      -1,     1,   129,     3,     4,     5,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,    -1,   123,    -1,   125,   126,    -1,     1,   129,
       3,     4,     5,   133,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,    -1,
     123,    -1,   125,   126,    -1,     1,   129,     3,     4,     5,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,   125,
     126,    -1,     1,   129,     3,     4,     5,   133,   134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,    -1,    -1,   123,    -1,   125,   126,    -1,     1,
     129,     3,     4,     5,   133,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,    -1,
      -1,   123,    -1,   125,   126,    -1,     1,   129,     3,     4,
       5,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,     1,   129,     3,     4,     5,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,    -1,    -1,   123,    -1,   125,   126,    -1,
       1,   129,     3,     4,     5,   133,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
      -1,    -1,   123,    -1,   125,   126,    -1,     1,   129,     3,
       4,     5,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,    -1,    -1,   123,
      -1,   125,   126,    -1,     1,   129,     3,     4,     5,   133,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,    -1,    -1,   123,    -1,   125,   126,
      -1,     1,   129,     3,     4,     5,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,    -1,    -1,   123,    -1,   125,   126,    -1,     1,   129,
       3,     4,     5,   133,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,    -1,    -1,
     123,    -1,   125,   126,    -1,     1,   129,     3,     4,     5,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,    -1,    -1,   123,    -1,   125,
     126,     1,    -1,     3,     4,     5,    -1,   133,   134,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,     1,
     120,     3,    -1,   123,    -1,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,   133,   134,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,     1,   120,     3,
      -1,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,     3,    -1,   120,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,     3,
      -1,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,     3,    -1,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,     3,
      -1,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,     3,    -1,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,     3,
      -1,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,     3,    -1,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,     3,
      -1,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,     3,    -1,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,    -1,    -1,     3,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   132,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    78,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,   123,
      -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,   132,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   132,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,   128,
     129,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   129,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,     1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   129,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
       1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   129,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,     0,     1,    -1,     3,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     129,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,
      77,    -1,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,   101,     3,    -1,    -1,   105,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,   123,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,     3,    -1,   107,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   129,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,     3,
      -1,   107,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   129,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,     1,
      -1,     3,    -1,   107,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   129,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,   123,    -1,    -1,   126,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,   123,    -1,    -1,   126,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,   123,    -1,    -1,   126,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,   123,    -1,    -1,   126,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,    -1,
       0,     1,   105,     3,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
     123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,   123,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   100,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,   123,
     124,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,   100,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,   100,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
     100,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,   124,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   100,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,   124,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   100,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
     124,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,   100,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,   123,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,   123,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,   123,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,   123,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,   123,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,   123,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,   123,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,   123,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,   123,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   129,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   113,   114,   115,   116,
     117,   120,   123,   126,   146,   147,   148,   150,   175,   212,
     213,   214,   215,   216,   217,   269,   272,   273,   276,   277,
     278,   279,   280,   281,   282,   284,   288,   291,   292,   293,
     294,   295,   296,   301,   302,   311,   312,   313,   320,   321,
     325,   328,   333,   362,   365,   366,   384,   385,   387,   388,
     389,   390,   391,   392,    77,   132,     5,    31,   217,   386,
     217,   123,   123,   123,   150,   217,   386,   282,   283,   320,
     328,    37,   148,   217,   310,   311,   313,   315,   316,   317,
     319,   320,   328,   331,   332,   337,   121,   126,   147,   148,
     217,   130,   132,   126,   130,   129,   120,   121,   212,   217,
     130,   150,   217,   130,   132,   129,   121,   130,   132,   130,
     129,   130,   148,   217,   320,     1,    31,    37,    38,   126,
     146,   148,   214,   216,   217,   269,   279,   280,   282,   284,
     313,   317,   320,   328,   331,   332,   333,   335,   343,   344,
     345,   346,    37,    38,   148,   320,   345,   123,   134,     1,
      29,    30,    31,    32,    33,    65,   116,   117,   124,   146,
     217,   268,   272,   274,   275,   282,   284,   288,   289,   290,
     296,   300,   308,   309,   349,   350,   351,   352,   353,   354,
     328,   123,   313,   320,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    46,    47,    66,    85,    87,   100,
     112,   113,   114,   115,   130,   150,   171,   172,   268,   273,
     274,   282,   285,   289,   291,   299,   364,   367,   368,   369,
     374,   375,   376,    31,    76,   132,   214,   216,   301,   365,
     366,   384,   385,   392,     1,   214,   278,   295,   301,   333,
     362,   388,     1,   387,   388,     0,   217,   386,   386,     5,
     127,   386,     1,     4,     6,     8,     9,    65,    71,    72,
      73,    84,    85,    98,   102,   103,   104,   105,   106,   107,
     108,   109,   118,   119,   120,   123,   125,   133,   134,   136,
     137,   138,   139,   150,   176,   177,   217,   218,   219,   220,
     221,   224,   225,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   386,   398,   399,   400,   401,
     147,   217,   130,   150,   217,   282,   328,   134,   123,   134,
     124,   308,   309,   353,   354,   328,   331,   332,   310,   315,
     319,   320,   124,   320,   124,   320,   320,    85,   150,   202,
     204,   206,   210,   211,   217,   229,   234,   250,   254,   300,
     126,   121,   121,   126,     1,    68,    78,    80,    81,    88,
      91,    92,    93,    94,    96,    98,    99,   123,   125,   126,
     129,   151,   152,   153,   154,   155,   156,   157,   158,   173,
     174,   176,   177,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   193,   197,   198,   199,   200,   217,   225,
     248,   300,   312,   314,   320,   328,   333,   334,   363,    80,
      81,   217,   268,   272,   282,   285,   288,   296,   303,   304,
       1,   129,   199,   200,   148,   217,     1,   217,   270,   271,
       1,   129,   271,   304,    65,   203,   205,   207,   208,   209,
     217,   300,     1,   129,   199,   200,   304,     1,   129,   199,
     200,     1,   129,   199,   200,   148,   217,   128,   128,   128,
     130,   328,   313,   317,   320,     1,   127,   368,   375,   376,
     368,   375,   376,     1,   126,   128,   128,   328,   126,   135,
     147,   217,   243,   262,   266,   267,   128,   130,   150,   217,
     129,   130,   129,   130,   320,    37,   123,   134,   136,   146,
     148,   217,   268,   274,   282,   284,   289,   310,   311,   320,
     326,   328,   329,   332,     1,   124,   128,     1,   124,   128,
       1,   128,     1,   128,   124,   124,   313,   123,   313,   123,
     123,     1,   126,     1,   129,     1,    37,    38,   126,   217,
     268,   274,   282,   285,   289,   320,   345,   346,     1,   126,
       1,   364,   367,   375,   376,   364,   367,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    85,    86,
      88,    89,    90,   126,   132,   150,   194,   195,   196,   217,
     225,   229,   244,   246,   250,   262,   263,   264,   325,   355,
     356,   359,   360,   361,   368,   369,   370,   371,   372,   373,
     375,   376,   378,   379,   380,   381,   382,   383,   129,    31,
     217,   386,   217,   212,   213,   215,   216,   310,   311,   317,
     320,   328,   333,   335,   368,   376,   214,   301,   127,   242,
     243,   261,   124,   123,   229,   250,   123,   229,   250,   229,
     250,   123,   217,   268,   274,   282,   285,   289,   307,   266,
     123,   123,   307,   266,   123,   123,   123,   123,   123,   123,
     229,   250,   123,   124,   244,   246,   264,   274,   282,   284,
     289,   297,   347,   386,   130,   135,   178,   179,   222,   226,
     244,   130,     1,   129,   130,   217,     1,     7,     8,     9,
     123,   131,   134,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,   127,   245,   179,   222,   223,   231,   251,
     120,   140,   141,   137,   138,    10,    11,   234,   254,    12,
      13,   121,   122,    14,    15,   136,   142,   143,    16,    17,
     144,   245,   124,     7,     8,     9,   123,   131,   134,   245,
     120,   140,   141,   137,   138,    10,    11,    12,    13,   121,
     122,    14,    15,   136,   142,   143,    16,    17,   144,   245,
     124,   124,   107,   217,   300,   393,   396,   397,   130,   130,
     135,   147,   266,   267,   135,   147,   266,   267,   124,   124,
     124,   124,   310,   315,   319,   124,   124,   310,    11,   122,
     128,   127,   123,   320,   328,   329,    65,   209,   217,   300,
     209,     1,   217,   268,   282,   285,   296,   305,   300,   333,
     334,   123,   150,   217,   217,   300,     1,   123,   305,   120,
     123,   217,   300,   126,   325,   375,   376,   375,   376,   375,
     126,   375,   376,   126,     1,   129,     1,     1,   126,   128,
     128,    69,    70,    91,    95,    97,   129,    69,    70,   129,
     126,     1,   197,   198,     1,   197,   198,     1,   127,   123,
     132,   217,   286,   287,   310,   316,   318,   320,   328,   335,
     336,   337,     1,   300,   308,   351,   328,   314,   320,   123,
     132,   157,   158,   173,   174,   176,   177,   186,   217,   300,
     121,   150,   217,   217,   268,   282,   285,   121,   121,   127,
     128,     1,   126,   130,    28,   149,   217,   122,   128,   127,
     217,   329,   331,   343,   343,   343,   126,   128,   129,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   222,   223,   225,   243,   262,   299,   340,   341,   310,
     313,   315,   317,   319,   310,   317,   130,   244,   263,   338,
     339,   375,   376,   375,   376,   343,   344,   343,   344,   135,
     135,   135,    51,   349,   350,     1,   271,   130,   130,     1,
     129,   199,   200,     1,   129,   199,   200,   130,   124,   217,
     308,   309,   320,   328,   329,   353,   354,   135,   147,   266,
     267,   320,   328,   332,   328,   123,   134,   326,     1,     1,
     128,     1,    51,   217,   349,   350,   128,     1,    51,   217,
     349,   350,   128,     1,    51,   217,   349,   350,   128,    51,
     217,   349,   350,     3,    28,    44,    74,    75,   124,   322,
     323,   324,   244,   147,   217,   129,   130,   126,   126,   132,
     266,   267,   132,   123,   123,     1,   123,    52,    53,    54,
      56,    57,    58,    59,    62,    86,   217,   264,   325,   355,
     378,   382,   123,   217,   126,   126,   126,   222,   223,   246,
     264,   123,   282,   123,   123,   190,   217,   126,   126,   126,
     132,   131,   245,     1,   131,   126,   128,   246,   264,   245,
     124,   128,   246,     1,   370,   371,   370,   371,   355,   356,
     364,   367,   355,   356,   364,   367,     1,     1,   386,   386,
     148,   217,   130,   130,   328,   317,   320,   368,   376,   368,
     376,   376,   243,   144,   126,   144,    65,   146,   217,   274,
     282,   284,   289,   298,   348,   217,   299,   121,   123,   134,
     217,   268,   274,   282,   285,   289,   320,   327,   328,   330,
     217,   268,   274,   282,   285,   289,   306,   246,   347,   375,
     217,   134,   330,   306,   244,   386,   386,   386,   244,   348,
     348,   124,   217,   274,   282,   284,   289,   329,   124,   131,
       1,   169,   170,     1,   129,   128,   135,     1,   169,   170,
     129,     1,   169,   170,     1,   217,   124,   223,   226,   227,
     263,     1,   217,   246,   264,   222,   244,     1,   231,   251,
     231,   251,   231,   251,   232,   252,   232,   252,   233,   253,
     233,   253,   234,   254,   234,   254,   234,   254,   222,   223,
     236,   255,   222,   223,   236,   255,   222,   223,   237,   256,
     222,   223,   238,   257,   222,   223,   239,   258,   240,   259,
     241,   260,   132,   222,   223,   246,   247,   264,   265,   222,
     244,     1,   217,   124,   226,   227,     1,   217,   246,   264,
     222,   244,   231,   251,   231,   251,   231,   251,   232,   252,
     232,   252,   233,   253,   233,   253,   234,   254,   234,   254,
     234,   254,   234,   254,   222,   223,   236,   255,   222,   223,
     236,   255,   222,   223,   237,   256,   222,   223,   238,   257,
     222,   223,   239,   258,   240,   259,   241,   260,   132,   246,
     247,   264,   265,   222,   244,   121,   122,   217,   394,   395,
     217,   129,   393,   396,   397,   397,   135,   135,   135,   135,
     135,   135,   210,   202,   204,   206,   217,   320,   328,   122,
     127,   329,   122,   130,   121,   130,   217,   268,   282,   285,
     329,   320,   328,   335,   336,   190,   287,   310,   320,   328,
     130,   217,   130,   217,   329,   217,   320,   123,   126,   129,
     180,   181,   180,   181,   375,   375,   375,   219,   375,   375,
       1,   340,   341,   124,   266,   267,   130,   128,     1,   300,
     308,   351,   328,   310,   318,   320,   132,   325,   217,   123,
     314,   314,   217,     1,     1,   287,   211,   121,   209,   209,
     266,   267,   270,   199,   200,     1,   129,   271,   127,   132,
     127,   132,   208,   204,   217,   127,   217,   127,   375,   376,
       1,   126,   128,   126,   128,   126,   161,   162,   165,   166,
     167,   129,   159,   162,   126,   129,   161,   162,   165,   166,
     167,   127,    37,   335,   336,   337,   338,   339,   342,     1,
     129,   271,     1,   129,   271,     1,   129,   199,   200,   320,
     328,   329,   124,   124,   124,   135,   135,   135,   328,   326,
     124,   353,   354,   135,   147,   266,   267,   349,   350,   300,
     349,   349,   349,   350,   124,   123,   124,   128,   323,   124,
     124,   124,     1,   169,   170,   355,   356,   364,   367,   132,
     132,   355,   356,   364,   367,   246,   264,   246,   264,   124,
     246,   264,   132,   266,   267,   132,   123,   123,   355,   123,
     223,   264,   123,   132,    56,     1,   124,   126,   217,   246,
     264,   377,   126,   126,   126,   126,   126,   386,   123,   244,
     244,   217,   355,   356,   364,   367,    90,   223,   263,    88,
      89,    90,   244,   263,   223,   263,   244,   263,   121,   317,
     376,   376,   126,   246,   247,   264,   265,   246,   247,   264,
     265,   146,   147,   146,   274,   282,   284,   289,   329,   124,
     124,   124,   329,   211,   124,   320,   330,   353,   354,   266,
     267,   121,   328,   123,   327,   134,   121,   134,   217,   268,
     274,   282,   285,   289,   330,   124,   124,   124,   124,   266,
     267,   134,   134,   330,   128,   124,   128,   128,   128,   124,
     128,   231,   251,   386,     1,   129,   222,   244,     1,     1,
     124,   128,   124,   135,   135,     1,   128,   132,   132,   128,
     132,   132,   124,   135,   135,   132,   132,   132,   132,   217,
     217,   126,   128,   217,   386,   129,   129,   320,   328,   204,
     211,   121,   130,   130,   217,   328,   320,   124,   328,   310,
     124,   130,   130,   217,   124,     1,   169,   170,   286,   320,
     217,   123,   310,   318,   318,   266,   267,   123,   124,   122,
     211,   122,   122,   126,     1,   126,   202,   201,   300,   202,
     201,   206,   127,   130,     1,   163,   164,     1,   163,   164,
     376,     1,   340,   341,   128,   129,   338,   339,     1,   126,
       1,   126,   328,   326,   124,   124,   124,   135,   135,   135,
     329,   332,   246,   124,   323,     1,   355,   356,   364,   367,
     355,   356,   364,   367,   124,   124,   124,   124,     1,   355,
     124,   246,   355,   356,   132,   132,   264,   124,   246,   264,
      56,   264,   377,   386,   123,   355,   132,   126,     1,   126,
       1,   124,   264,   377,     3,   124,   132,   386,   124,   124,
     128,   123,   123,   190,   132,   132,   132,   132,   132,   132,
     132,   132,   124,   124,     1,   124,   122,   320,   328,   330,
     124,   124,   124,   135,   135,   211,   327,   124,   353,   354,
     266,   267,   211,   266,   267,   121,   134,   123,   338,   135,
     135,   266,   267,   266,   267,   134,   347,   217,   217,   244,
       1,   217,   223,   263,   222,   223,   222,   223,   243,   261,
     222,   223,   243,   261,   222,   223,   222,   223,   243,   261,
     222,   223,   243,   261,   222,   223,   243,   261,   222,   223,
     243,   261,   222,   223,   243,   261,   222,   223,   243,   261,
     394,   126,   126,   122,   211,   130,   375,   310,   127,   130,
       1,   123,   132,   132,   122,   199,   200,   126,   199,   200,
     127,   329,   127,   206,   342,   129,   338,   339,     1,   199,
     200,   199,   200,   124,   355,   355,   355,   355,   355,   356,
     124,   123,   377,   124,   246,   264,   246,   355,     1,   124,
     246,   264,   134,   357,   358,   386,   126,   358,     3,   124,
     132,   130,   190,   244,   244,     1,     1,   327,   124,   122,
     124,   124,   135,   135,   122,   135,   135,   211,   266,   267,
     347,   135,   135,   135,   135,   266,   267,   124,   124,   124,
     124,   124,   122,   340,   266,   267,   266,   267,   199,   200,
     202,   202,   128,   129,     1,    64,    64,   246,   264,   124,
     246,   264,   124,   126,   124,   126,   355,   356,   124,   355,
     356,   217,   124,   128,   132,   123,     3,   124,   132,   358,
     126,   358,    73,   190,   191,   192,   124,   124,   124,   128,
     122,   135,   135,   124,   135,   135,   126,   129,   355,   355,
     124,   124,   126,   355,   246,   355,   356,   135,   126,   357,
     358,   244,   358,   126,   358,   124,   132,     3,   124,   132,
     375,   375,   129,   191,   130,   190,   231,   251,   338,   124,
     386,   124,   124,   124,   124,   132,   126,   358,   358,   126,
     358,   192,   124,   355,   123,   126,   126,   126,   358,   124,
     124,   124,   132,   129,   244,   124,   126,   126,   126,   358,
     124,   126,   124,   126
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 146: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11578 "grammar.ec"
	break;
      case 147: /* "type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11587 "grammar.ec"
	break;
      case 148: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11596 "grammar.ec"
	break;
      case 149: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 11605 "grammar.ec"
	break;
      case 150: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11614 "grammar.ec"
	break;
      case 151: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11623 "grammar.ec"
	break;
      case 152: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11632 "grammar.ec"
	break;
      case 153: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11641 "grammar.ec"
	break;
      case 154: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11650 "grammar.ec"
	break;
      case 155: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11659 "grammar.ec"
	break;
      case 156: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11668 "grammar.ec"
	break;
      case 157: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11677 "grammar.ec"
	break;
      case 158: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11686 "grammar.ec"
	break;
      case 159: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11695 "grammar.ec"
	break;
      case 160: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11704 "grammar.ec"
	break;
      case 161: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11713 "grammar.ec"
	break;
      case 162: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11722 "grammar.ec"
	break;
      case 163: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11731 "grammar.ec"
	break;
      case 164: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11740 "grammar.ec"
	break;
      case 165: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11749 "grammar.ec"
	break;
      case 166: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11758 "grammar.ec"
	break;
      case 167: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11767 "grammar.ec"
	break;
      case 168: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11776 "grammar.ec"
	break;
      case 169: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11785 "grammar.ec"
	break;
      case 170: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11794 "grammar.ec"
	break;
      case 171: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11803 "grammar.ec"
	break;
      case 172: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11812 "grammar.ec"
	break;
      case 176: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11821 "grammar.ec"
	break;
      case 177: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11830 "grammar.ec"
	break;
      case 180: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11839 "grammar.ec"
	break;
      case 181: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11848 "grammar.ec"
	break;
      case 182: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11857 "grammar.ec"
	break;
      case 183: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11866 "grammar.ec"
	break;
      case 186: /* "property" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11875 "grammar.ec"
	break;
      case 197: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11884 "grammar.ec"
	break;
      case 198: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11893 "grammar.ec"
	break;
      case 199: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11902 "grammar.ec"
	break;
      case 200: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11911 "grammar.ec"
	break;
      case 201: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11920 "grammar.ec"
	break;
      case 202: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11929 "grammar.ec"
	break;
      case 203: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11938 "grammar.ec"
	break;
      case 204: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11947 "grammar.ec"
	break;
      case 205: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11956 "grammar.ec"
	break;
      case 206: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11965 "grammar.ec"
	break;
      case 207: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11974 "grammar.ec"
	break;
      case 208: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11983 "grammar.ec"
	break;
      case 209: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11992 "grammar.ec"
	break;
      case 210: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 12001 "grammar.ec"
	break;
      case 211: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 272 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 12010 "grammar.ec"
	break;
      case 212: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 12019 "grammar.ec"
	break;
      case 213: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 12028 "grammar.ec"
	break;
      case 214: /* "class" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 12037 "grammar.ec"
	break;
      case 215: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 12046 "grammar.ec"
	break;
      case 216: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 12055 "grammar.ec"
	break;
      case 217: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 12064 "grammar.ec"
	break;
      case 218: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12073 "grammar.ec"
	break;
      case 219: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12082 "grammar.ec"
	break;
      case 224: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12091 "grammar.ec"
	break;
      case 225: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12100 "grammar.ec"
	break;
      case 226: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12109 "grammar.ec"
	break;
      case 227: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12118 "grammar.ec"
	break;
      case 229: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12127 "grammar.ec"
	break;
      case 231: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12136 "grammar.ec"
	break;
      case 232: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12145 "grammar.ec"
	break;
      case 233: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12154 "grammar.ec"
	break;
      case 234: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12163 "grammar.ec"
	break;
      case 236: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12172 "grammar.ec"
	break;
      case 237: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12181 "grammar.ec"
	break;
      case 238: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12190 "grammar.ec"
	break;
      case 239: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12199 "grammar.ec"
	break;
      case 240: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12208 "grammar.ec"
	break;
      case 241: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12217 "grammar.ec"
	break;
      case 242: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12226 "grammar.ec"
	break;
      case 243: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12235 "grammar.ec"
	break;
      case 244: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12244 "grammar.ec"
	break;
      case 246: /* "expression" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12253 "grammar.ec"
	break;
      case 248: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12262 "grammar.ec"
	break;
      case 250: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12271 "grammar.ec"
	break;
      case 251: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12280 "grammar.ec"
	break;
      case 252: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12289 "grammar.ec"
	break;
      case 253: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12298 "grammar.ec"
	break;
      case 254: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12307 "grammar.ec"
	break;
      case 255: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12316 "grammar.ec"
	break;
      case 256: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12325 "grammar.ec"
	break;
      case 257: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12334 "grammar.ec"
	break;
      case 258: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12343 "grammar.ec"
	break;
      case 259: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12352 "grammar.ec"
	break;
      case 260: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12361 "grammar.ec"
	break;
      case 261: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12370 "grammar.ec"
	break;
      case 262: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12379 "grammar.ec"
	break;
      case 263: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12388 "grammar.ec"
	break;
      case 264: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12397 "grammar.ec"
	break;
      case 266: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12406 "grammar.ec"
	break;
      case 267: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 204 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12415 "grammar.ec"
	break;
      case 268: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12424 "grammar.ec"
	break;
      case 269: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12433 "grammar.ec"
	break;
      case 270: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 12442 "grammar.ec"
	break;
      case 271: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 12451 "grammar.ec"
	break;
      case 273: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12460 "grammar.ec"
	break;
      case 274: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12469 "grammar.ec"
	break;
      case 275: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12478 "grammar.ec"
	break;
      case 277: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12487 "grammar.ec"
	break;
      case 278: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12496 "grammar.ec"
	break;
      case 279: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12505 "grammar.ec"
	break;
      case 280: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12514 "grammar.ec"
	break;
      case 281: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12523 "grammar.ec"
	break;
      case 282: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12532 "grammar.ec"
	break;
      case 283: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12541 "grammar.ec"
	break;
      case 284: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12550 "grammar.ec"
	break;
      case 285: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12559 "grammar.ec"
	break;
      case 286: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12568 "grammar.ec"
	break;
      case 287: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 12577 "grammar.ec"
	break;
      case 288: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12586 "grammar.ec"
	break;
      case 289: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12595 "grammar.ec"
	break;
      case 290: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12604 "grammar.ec"
	break;
      case 291: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12613 "grammar.ec"
	break;
      case 292: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12622 "grammar.ec"
	break;
      case 293: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12631 "grammar.ec"
	break;
      case 294: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12640 "grammar.ec"
	break;
      case 295: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12649 "grammar.ec"
	break;
      case 297: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12658 "grammar.ec"
	break;
      case 298: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12667 "grammar.ec"
	break;
      case 299: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12676 "grammar.ec"
	break;
      case 300: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12685 "grammar.ec"
	break;
      case 301: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12694 "grammar.ec"
	break;
      case 302: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12703 "grammar.ec"
	break;
      case 303: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12712 "grammar.ec"
	break;
      case 304: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12721 "grammar.ec"
	break;
      case 308: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12730 "grammar.ec"
	break;
      case 309: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12739 "grammar.ec"
	break;
      case 310: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12748 "grammar.ec"
	break;
      case 311: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12757 "grammar.ec"
	break;
      case 312: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12766 "grammar.ec"
	break;
      case 313: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12775 "grammar.ec"
	break;
      case 314: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12784 "grammar.ec"
	break;
      case 315: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12793 "grammar.ec"
	break;
      case 316: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12802 "grammar.ec"
	break;
      case 317: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12811 "grammar.ec"
	break;
      case 318: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12820 "grammar.ec"
	break;
      case 319: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12829 "grammar.ec"
	break;
      case 320: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 275 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12838 "grammar.ec"
	break;
      case 322: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12847 "grammar.ec"
	break;
      case 323: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 276 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12856 "grammar.ec"
	break;
      case 324: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 277 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12865 "grammar.ec"
	break;
      case 325: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 274 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12874 "grammar.ec"
	break;
      case 326: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12883 "grammar.ec"
	break;
      case 327: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12892 "grammar.ec"
	break;
      case 328: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 203 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12901 "grammar.ec"
	break;
      case 329: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12910 "grammar.ec"
	break;
      case 330: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12919 "grammar.ec"
	break;
      case 331: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12928 "grammar.ec"
	break;
      case 332: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12937 "grammar.ec"
	break;
      case 333: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12946 "grammar.ec"
	break;
      case 334: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12955 "grammar.ec"
	break;
      case 335: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12964 "grammar.ec"
	break;
      case 336: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12973 "grammar.ec"
	break;
      case 337: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12982 "grammar.ec"
	break;
      case 338: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12991 "grammar.ec"
	break;
      case 339: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 13000 "grammar.ec"
	break;
      case 340: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 13009 "grammar.ec"
	break;
      case 341: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 13018 "grammar.ec"
	break;
      case 342: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 13027 "grammar.ec"
	break;
      case 343: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 13036 "grammar.ec"
	break;
      case 344: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 13045 "grammar.ec"
	break;
      case 345: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 13054 "grammar.ec"
	break;
      case 346: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 13063 "grammar.ec"
	break;
      case 347: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13072 "grammar.ec"
	break;
      case 348: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13081 "grammar.ec"
	break;
      case 349: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13090 "grammar.ec"
	break;
      case 350: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 13099 "grammar.ec"
	break;
      case 351: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13108 "grammar.ec"
	break;
      case 352: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13117 "grammar.ec"
	break;
      case 353: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13126 "grammar.ec"
	break;
      case 354: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 13135 "grammar.ec"
	break;
      case 355: /* "statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13144 "grammar.ec"
	break;
      case 356: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13153 "grammar.ec"
	break;
      case 360: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13162 "grammar.ec"
	break;
      case 361: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13171 "grammar.ec"
	break;
      case 362: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 273 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 13180 "grammar.ec"
	break;
      case 364: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 13189 "grammar.ec"
	break;
      case 368: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 13198 "grammar.ec"
	break;
      case 369: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 13207 "grammar.ec"
	break;
      case 370: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 13216 "grammar.ec"
	break;
      case 371: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 13225 "grammar.ec"
	break;
      case 372: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13234 "grammar.ec"
	break;
      case 373: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13243 "grammar.ec"
	break;
      case 374: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 13252 "grammar.ec"
	break;
      case 375: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13261 "grammar.ec"
	break;
      case 376: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13270 "grammar.ec"
	break;
      case 377: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13279 "grammar.ec"
	break;
      case 378: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13288 "grammar.ec"
	break;
      case 379: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13297 "grammar.ec"
	break;
      case 380: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13306 "grammar.ec"
	break;
      case 381: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13315 "grammar.ec"
	break;
      case 382: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13324 "grammar.ec"
	break;
      case 383: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13333 "grammar.ec"
	break;
      case 384: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13342 "grammar.ec"
	break;
      case 385: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13351 "grammar.ec"
	break;
      case 386: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 13360 "grammar.ec"
	break;
      case 387: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13369 "grammar.ec"
	break;
      case 388: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13378 "grammar.ec"
	break;
      case 389: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13387 "grammar.ec"
	break;
      case 390: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13396 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 285 "grammar.y"
    {
      (yyval.specifier) = null;
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 304 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 342 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 344 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         _DeclClass((yyvsp[(1) - (2)].id)._class, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 423 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 427 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 431 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 433 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 472 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 474 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 479 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 484 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 489 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 491 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 496 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 498 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 503 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 505 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 510 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 512 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 514 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 516 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 518 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 522 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 526 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 539 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 541 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 543 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 545 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 547 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 553 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 555 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 560 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 565 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 570 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 572 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 574 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 578 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 579 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 583 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 585 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 595 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 599 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 601 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 603 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 607 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 609 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 611 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 614 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 626 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 637 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 656 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 658 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 662 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 663 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 664 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 665 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 666 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 667 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 670 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   ;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 682 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 687 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 688 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 689 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 693 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 694 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 695 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 696 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 697 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 698 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 699 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 704 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 706 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 711 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 713 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 715 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 749 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 751 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 756 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 758 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 760 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 762 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 764 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 793 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 795 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 797 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 802 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 804 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 809 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 811 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 815 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 817 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 819 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 821 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 826 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 829 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 832 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 835 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 900 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 902 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 907 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 909 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 911 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 913 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 915 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 945 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 949 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 950 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 951 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 955 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 956 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 957 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 961 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 962 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 963 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 969 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 972 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 975 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 978 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 981 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 987 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 989 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 991 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 993 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 995 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 999 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1004 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1007 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1010 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1013 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 1016 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1022 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1024 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1028 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1033 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1035 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1040 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1042 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1047 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1049 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1054 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1059 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1061 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1066 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1068 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1072 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1077 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1079 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1081 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1083 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1087 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1088 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1090 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1093 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1099 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1100 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1102 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1106 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1110 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1112 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1148 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1166 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1186 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1187 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1199 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1200 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1210 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1211 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1218 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1219 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1260 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1261 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1266 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1273 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1275 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1282 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id)._class, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1283 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).nsSpec, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1285 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1287 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).nsSpec, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1295 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1296 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1301 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1308 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1315 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1321 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1328 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id)._class, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1334 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).nsSpec, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1343 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1350 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1356 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1362 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1368 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1374 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1380 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1391 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1397 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1401 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1402 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1403 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1407 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1411 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1412 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1413 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1414 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1418 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1430 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1432 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1433 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 295:

/* Line 1464 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1461 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1466 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1470 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1474 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1475 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1532 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpOffsetOf((yyvsp[(3) - (6)].typeName), (yyvsp[(5) - (6)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1568 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1580 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1585 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1586 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 362:

/* Line 1464 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1603 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1604 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1605 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1606 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1619 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1620 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1621 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1622 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1631 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1632 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1633 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1644 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1653 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1654 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1662 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1663 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1665 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1671 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1672 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1677 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1683 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 428:

/* Line 1464 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1707 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1709 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1732 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1733 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1739 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1753 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1759 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1766 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1794 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1795 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1804 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 477:

/* Line 1464 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1820 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1825 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1826 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1835 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1839 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1843 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1847 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1855 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1856 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1857 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1858 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1864 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         _DeclClass((yyvsp[(1) - (2)].exp).identifier._class, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1906 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1907 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1908 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1917 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 510:

/* Line 1464 of yacc.c  */
#line 1918 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 511:

/* Line 1464 of yacc.c  */
#line 1919 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 512:

/* Line 1464 of yacc.c  */
#line 1920 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 513:

/* Line 1464 of yacc.c  */
#line 1927 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 514:

/* Line 1464 of yacc.c  */
#line 1928 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 1929 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1930 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1935 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1936 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1938 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1944 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 1945 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1947 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1953 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 1954 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1956 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1962 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1963 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1968 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1974 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1975 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 2003 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 2011 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 2015 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 2020 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 2027 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 2031 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 570:

/* Line 1464 of yacc.c  */
#line 2036 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 2037 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2042 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2043 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2044 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2050 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2051 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2052 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2057 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 2058 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2069 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2070 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2079 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2080 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2081 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2090 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2091 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2105 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2106 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2119 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2120 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 618:

/* Line 1464 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).nsSpec, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2163 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2183 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2201 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2202 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 676:

/* Line 1464 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 677:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 678:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2233 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2234 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2247 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id)._class, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2262 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2264 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2286 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2292 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2298 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2305 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2314 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2315 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2316 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2317 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2321 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2322 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2323 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2326 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2329 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2330 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2340 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id._class, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2348 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id._class, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2357 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2365 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2367 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2368 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2369 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2374 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2381 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2388 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2391 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2404 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2418 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2421 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2423 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2425 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2429 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2430 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2435 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2436 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2437 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2440 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2441 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2446 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2448 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2452 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2464 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2505 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2506 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2507 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id)._class, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id)._class, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2517 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2525 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2535 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2539 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2540 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2541 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2542 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2543 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2545 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2546 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2548 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2556 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2564 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2565 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2566 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2567 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2568 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2569 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2570 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2571 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2572 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2573 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2574 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2575 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2577 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2585 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2593 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2594 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2595 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2596 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2597 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2598 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2599 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2600 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2601 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2602 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2603 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2604 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2606 "grammar.y"
    {
         _DeclClass((yyvsp[(1) - (4)].id)._class, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2614 "grammar.y"
    {
         _DeclClass((yyvsp[(2) - (5)].id)._class, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2622 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2623 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2627 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2628 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2629 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2630 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2631 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2637 "grammar.y"
    {
      char * colon = (yyvsp[(1) - (1)].specifier).name ? RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false) : null;
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2643 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2646 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2655 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2664 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2673 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2681 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2682 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2683 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2684 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2688 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2689 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2690 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2691 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2692 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2693 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2694 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2695 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2696 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2704 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2705 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2706 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2707 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2708 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2714 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2723 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2732 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2741 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2764 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 903:

/* Line 1464 of yacc.c  */
#line 2765 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2766 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2767 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2768 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2774 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2783 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2792 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2801 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 913:

/* Line 1464 of yacc.c  */
#line 2864 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 2865 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 915:

/* Line 1464 of yacc.c  */
#line 2866 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 2868 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 2879 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2880 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2881 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2886 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2887 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2888 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 2889 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 2890 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 2894 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 2895 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 2899 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2900 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 2901 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2905 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2906 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2910 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2911 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2912 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2913 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2914 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2915 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2916 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2917 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2918 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2919 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2920 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2921 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2922 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 2923 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2924 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2925 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2929 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2930 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2931 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 2932 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 2933 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 2934 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 2935 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 2936 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 2940 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 2941 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 2942 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 2943 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 2947 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 2949 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 2950 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 2951 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 2955 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 2957 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 2958 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 2959 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 2965 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 2967 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 2969 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 2977 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 2979 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 2981 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 2986 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 2987 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 2988 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 2993 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 2994 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 2995 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3000 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3007 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3008 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 994:

/* Line 1464 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3016 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3020 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3039 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3040 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3043 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3056 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3072 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3074 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3078 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3079 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3083 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3084 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3085 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3086 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3089 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3090 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3094 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3095 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3096 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3100 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3104 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3108 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3109 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3110 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3111 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3113 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3121 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3130 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3131 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3132 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3133 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3137 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3138 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3142 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3143 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3149 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3150 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3151 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3152 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3154 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3172 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3173 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3177 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3178 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3179 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3180 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3181 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3182 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3184 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3185 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3187 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3191 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3192 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3193 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3194 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3195 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3197 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3198 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3199 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3204 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3205 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3206 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3213 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3220 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1074:

/* Line 1464 of yacc.c  */
#line 3222 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3223 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1076:

/* Line 1464 of yacc.c  */
#line 3224 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3235 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1085:

/* Line 1464 of yacc.c  */
#line 3236 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1086:

/* Line 1464 of yacc.c  */
#line 3237 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3238 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1088:

/* Line 1464 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3245 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1092:

/* Line 1464 of yacc.c  */
#line 3246 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3247 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1094:

/* Line 1464 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1095:

/* Line 1464 of yacc.c  */
#line 3252 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1096:

/* Line 1464 of yacc.c  */
#line 3253 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1097:

/* Line 1464 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3258 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3260 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3264 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3266 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3267 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3268 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3271 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3277 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3278 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3279 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3280 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3281 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3283 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3284 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3285 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3286 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3287 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3291 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3292 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3293 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3295 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3296 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3297 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3299 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3300 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3301 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3302 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3303 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3307 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3308 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3309 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3318 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3321 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3331 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3339 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3340 "grammar.y"
    { structDeclMode = defaultDeclMode;  ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3349 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3350 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3351 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3355 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3356 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3360 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3361 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3362 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3367 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3369 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3371 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3376 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3377 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3378 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3379 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3390 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3394 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3404 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3409 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3411 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3416 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3420 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3424 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3430 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3431 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3433 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3436 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3437 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3438 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3439 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3440 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3442 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3443 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3447 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3448 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3449 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3457 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3459 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3460 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3462 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3463 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3464 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3465 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3482 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3485 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3486 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3487 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3493 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3494 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3495 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3502 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3504 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3509 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3510 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3514 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3515 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3517 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3524 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3535 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3543 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3544 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3547 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3556 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3558 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3560 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3562 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3563 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3565 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3574 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3575 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3577 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3578 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3579 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3583 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3585 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3593 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3595 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3596 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3599 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3600 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3604 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3605 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3606 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3612 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3613 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3615 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3617 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3623 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3627 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id)._class, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3628 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).nsSpec, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3629 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3633 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1295:

/* Line 1464 of yacc.c  */
#line 3637 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3638 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3643 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3644 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3648 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3653 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3654 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3655 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3656 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3660 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3664 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3668 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3672 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22730 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3675 "grammar.y"


