#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 181
#define YY_END_OF_BUFFER 182
static yyconst short int yy_accept[740] =
    {   0,
      116,  116,  182,  180,  178,  177,  176,  179,  163,  180,
        1,  175,  169,  162,  180,  157,  158,  167,  166,  154,
      165,  161,  168,  122,  122,  155,  151,  170,  156,  171,
      174,  116,  116,  116,  159,  160,  172,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  152,  173,  153,  164,  150,
        0,  127,    0,  136,  153,  145,  137,    0,    0,  134,
      142,  132,  143,  133,  144,    0,  125,    2,    3,  135,
      126,  121,    0,  122,    0,  122,  116,  160,  152,  159,
      141,  147,  149,  148,  140,    0,  116,    0,  116,    0,

        0,  138,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,   11,  116,  116,  116,  116,  116,  116,  116,  116,
       19,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  139,  146,  123,  129,    0,  125,
      125,    0,  126,  121,    0,  124,    0,  117,  116,  131,
      130,  116,  116,    0,  128,    0,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   96,  116,  116,  116,  116,  116,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   17,   47,  116,  116,  116,  116,
       20,  116,  116,  116,   53,  116,  116,  116,  116,  116,
      116,  116,   46,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,    0,  125,    0,  125,    0,  126,  124,  119,
      120,  117,    0,   65,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,    4,  116,    6,
        7,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  116,   13,   14,  116,  116,  116,   18,
      116,  116,  116,  116,  116,   22,  116,   54,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,   21,  116,  116,  116,
       40,  116,  116,  116,    0,  125,  119,  119,    0,  119,
      119,  120,    0,    0,  118,   66,  116,  116,  116,   97,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,    5,
       49,    8,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,   16,  116,  116,  116,   60,

       48,  116,  116,  116,  116,  116,   55,  116,  116,   25,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       38,  116,  116,  116,   99,   44,    0,  119,  119,  119,
        0,    0,  120,  118,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,   58,   52,  116,  116,   12,
       15,  116,   57,   92,   76,  116,  116,  116,   88,  116,
       56,  116,   24,   26,   29,   33,  116,  116,   35,  116,
       36,  116,  116,  116,  116,  116,  116,  116,    0,  119,

      116,  116,  116,   95,  116,  116,   80,   86,  116,  116,
      116,  116,  116,   59,  116,  116,  116,  116,  116,  116,
      116,   74,  116,  116,  116,  116,  116,  116,  116,  116,
      113,  114,  112,   10,  116,  116,  116,  116,   89,  116,
      116,  116,   84,  116,  116,  116,  116,   37,  116,   51,
      116,  116,   67,  116,  116,  116,  116,  116,  116,  116,
       75,   61,  116,   27,  116,   34,   98,  116,  116,   83,
      116,  116,  116,  116,  116,  116,    9,  116,  116,  116,
      116,  116,   45,   23,   69,  116,  110,  116,  116,   39,
       41,  116,  116,   31,  116,  116,  116,  116,  116,  116,

      116,  116,   81,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,   78,   79,  116,  111,  116,  116,   50,
      116,  102,   68,  116,  116,  116,  116,  116,   62,   73,
       85,   28,  116,   43,  116,   91,  108,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,   30,   72,  116,
      116,    0,  116,  116,   82,  116,   94,  116,  116,  105,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
       77,    0,  116,   87,   42,  116,  116,  116,  116,  116,
      101,  116,  100,   90,   71,  116,  116,  116,   93,  116,
      116,  116,  116,  115,  116,  116,  116,  116,  116,  116,

      103,  116,  109,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,   64,  116,  116,  116,  116,  116,  116,
       63,  116,  116,  107,  116,   32,  116,  104,  116,  116,
      116,  116,  116,  116,  116,  106,  116,   70,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   24,   26,   24,   27,   24,   28,   29,   30,
       31,   32,   33,    1,   34,   35,   36,   34,   37,   38,
       39,   39,   40,   41,   39,   42,   39,   39,   39,   43,
       39,   39,   39,   39,   44,   39,   39,   45,   39,   39,
       46,   47,   48,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   39,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[80] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    1,    4,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    6,    6,    6,    2,    1,    1,
        1,    1,    1,    7,    7,    7,    7,    7,    8,    9,
        9,    9,    9,    8,    8,    1,    1,    1,    1,    8,
        7,    7,    7,    7,    7,    7,    8,    8,    9,    9,
        8,    9,    8,    8,    8,    9,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[749] =
    {   0,
        0,    0,  244, 2823, 2823, 2823, 2823, 2823,  211,   73,
     2823, 2823,   50,   72,  193, 2823, 2823,  203,   68, 2823,
       69,   67,   82,  102,   85,   86, 2823,  105,  202,   64,
     2823,   94,  106,  138, 2823, 2823,  200,  141,  120,  126,
      127,  152,  154,  140,  183,  187,  145,  184,  159,  197,
      202,  195,  209,  217,  208, 2823,  109, 2823, 2823, 2823,
      112, 2823,  218, 2823, 2823, 2823, 2823,  120,  171, 2823,
     2823, 2823, 2823, 2823, 2823,  182,  262, 2823, 2823, 2823,
      304,  348,  289,  292,  178,    0,    0, 2823, 2823, 2823,
      148, 2823, 2823, 2823,  129,  125,  213,  113,  236,  215,

       69, 2823,  270,  312,  280,  408,  221,  327,  268,  235,
      337,  328,  264,  365,  269,  350,  368,  370,  371,  393,
      383,  384,  398,  395,  403,  406,  409,  413,  414,  418,
      267,  424,  440,  442,  394,  458,  460,  470,  467,  473,
      471,  478,  489,  480,  486,  485,  492,  483,  494,  522,
      496,  525,  528,  537, 2823, 2823, 2823, 2823,  550,  551,
      593,  620,  616,  562,  638,  658,    0,  649,  541, 2823,
     2823,    0,  550,  340, 2823,  101,  572,  577,  659,  660,
      597,  658,  571,  666,  693,  696,  702,  705,  714,  715,
      716,  720,  721,  551,  723,  724,  725,  726,  730,  734,

      735,  739,  750,  755,  745,  759,  758,  766,  780,  773,
      784,  787,  788,  789,  794,  795,  796,  803,  809,  816,
      822,  818,  823,  824,  828,  825,  827,  830,  843,  834,
      846,  849,  853,  854,  856,  855,  858,  859,  867,  877,
      879,  880,  883,  886,  888,  889,  902,  890,  898,  895,
      911,  914,  944,  956,  983,  979,  963, 1021, 1011, 1044,
     1052, 1057, 1006,  917,  963,  927,  945,  964,  932, 1044,
     1029, 1047, 1068, 1094, 1096, 1026, 1098, 1109, 1112, 1110,
     1114, 1117, 1118, 1120, 1123, 1125, 1122,  920, 1124,  925,
     1128, 1130, 1133, 1138, 1143, 1144, 1146, 1151, 1148, 1162,

     1173, 1177, 1178, 1181, 1180, 1182, 1185, 1183, 1193, 1196,
     1201, 1203, 1205, 1209, 1204, 1208, 1211, 1212, 1216, 1217,
     1219, 1235, 1237, 1238, 1243, 1242, 1246, 1248, 1249, 1253,
     1264, 1269, 1271, 1272, 1274, 1278, 1279, 1284, 1287, 1303,
     1306, 1307, 1309, 1310, 1328, 1356,    0, 1301, 1383, 1379,
        0, 1328, 1407, 1425, 1432, 1312, 1364, 1334, 1432, 1336,
     1318, 1416, 1361, 1451, 1452, 1453, 1454, 1456, 1474, 1455,
     1458, 1465, 1476, 1479, 1484, 1488, 1492, 1495, 1498, 1363,
     1499, 1500, 1502, 1510, 1514, 1525, 1526, 1529, 1530, 1532,
     1534, 1536, 1537, 1540, 1544, 1556, 1558, 1562, 1566, 1568,

     1570, 1571, 1578, 1582, 1586, 1592, 1594, 1596, 1598, 1597,
     1600, 1601, 1605, 1602, 1608, 1606, 1612, 1620, 1624, 1632,
     1639, 1640, 1642, 1655, 1645, 1660, 1676, 1694,    0, 1667,
     1721, 1736, 1743, 1733, 1678, 1666, 1713, 1663, 1727, 1768,
     1769, 1776, 1684, 1779, 1780, 1783, 1787, 1700, 1789, 1795,
     1790, 1801, 1798, 1802, 1805, 1810, 1808, 1814, 1823, 1811,
     1816, 1829, 1844, 1847, 1850, 1848, 1857, 1858, 1869, 1871,
     1877, 1879, 1880, 1881, 1882, 1884, 1883, 1885, 1887, 1890,
     1892, 1893, 1903, 1905, 1911, 1913, 1914, 1915, 1916, 1919,
     1921, 1929, 1925, 1939, 1941, 1940, 1944, 1945, 1937, 1986,

     1960, 1954, 1955, 1963, 1964, 1966, 1970, 1975, 1989, 1990,
     1993, 2008, 2003, 2011, 2012, 2021, 2023, 2024, 2026, 2032,
     2033, 2036, 2039, 2042, 2045, 2046, 2048, 2051, 2055, 2061,
     2058, 2066, 2070, 2076, 2079, 2084, 2091, 2092, 2095, 2097,
     2098, 2100, 2103, 2104, 2106, 2110, 2111, 2113, 2119, 2122,
     2124, 2125, 2126, 2131, 2132, 2138, 2147, 2144, 2153, 2157,
     2156, 2165, 2166, 2172, 2175, 2179, 2181, 2185, 2186, 2190,
     2193, 2199, 2204, 2205, 2206, 2212, 2213, 2214, 2215, 2217,
     2224, 2220, 2233, 2225, 2227, 2238, 2239, 2243, 2246, 2248,
     2251, 2252, 2259, 2262, 2270, 2274, 2277, 2280, 2282, 2286,

     2288, 2290, 2292, 2289, 2304, 2293, 2315, 2318, 2320, 2323,
     2326, 2324, 2327, 2330, 2336, 2339, 2342, 2345, 2348, 2349,
     2354, 2352, 2360, 2361, 2363, 2372, 2373, 2374, 2376, 2382,
     2384, 2385, 2386, 2392, 2394, 2388, 2395, 2397, 2404, 2417,
     2413, 2418, 2419, 2420, 2424, 2428, 2429, 2422, 2438, 2440,
     2442,   84, 2444, 2448, 2449, 2451, 2452, 2453, 2463, 2467,
     2472, 2478, 2479, 2486, 2488, 2491, 2492, 2493, 2494, 2501,
     2823,   71, 2502, 2497, 2498, 2500, 2507, 2512, 2513, 2521,
     2525, 2528, 2531, 2544, 2547, 2549, 2553, 2556, 2559, 2560,
     2562, 2563, 2565, 2567, 2568, 2569, 2575, 2578, 2581, 2583,

     2587, 2588, 2589, 2594, 2591, 2603, 2609, 2613, 2615, 2625,
     2622, 2623, 2627, 2633, 2635, 2636, 2637, 2641, 2643, 2649,
     2646, 2651, 2657, 2659, 2662, 2665, 2669, 2672, 2675, 2680,
     2683, 2684, 2688, 2695, 2698, 2699, 2707, 2703, 2823, 2769,
     2778, 2786, 2791, 2792, 2801, 2805, 2807, 2813
    } ;

static yyconst short int yy_def[749] =
    {   0,
      739,    1,  739,  739,  739,  739,  739,  739,  739,  740,
      739,  739,  739,  739,  741,  739,  739,  739,  739,  739,
      739,  739,  739,  739,   24,  739,  739,  739,  739,  739,
      739,  742,  742,  742,  739,  739,  739,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  739,  739,  739,  739,  739,
      740,  739,  740,  739,  739,  739,  739,  741,  741,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  743,   25,  744,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  742,  739,  742,  745,

      741,  739,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  746,  743,  742,  739,
      739,  744,  742,  745,  739,  745,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  739,  739,  739,  739,  739,  739,  739,  746,
      747,  739,  739,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  739,  739,  260,  739,  739,  747,
      350,  739,  739,  739,  739,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  739,  739,  350,  739,
      739,  739,  739,  739,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  739,  739,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  748,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      739,  748,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,    0,  739,
      739,  739,  739,  739,  739,  739,  739,  739
    } ;

static yyconst short int yy_nxt[2903] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   25,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   32,   32,   32,   32,   32,
       32,   34,   32,   32,   32,   35,    4,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   32,   46,   32,
       32,   47,   32,   48,   32,   49,   50,   51,   52,   53,
       54,   55,   32,   32,   32,   56,   57,   58,   59,   62,
       64,   65,   66,   71,  671,   76,   73,   77,   77,   77,
       77,   77,   77,   77,   94,   95,   78,  671,   72,   74,

       75,   79,   67,  739,   96,   86,   86,   86,   86,   86,
       86,   86,   80,   87,   89,   69,   96,   88,   62,   63,
       81,   98,   82,   82,   82,   82,   82,   82,   82,  739,
       96,  157,   90,   98,   91,   92,   96,   96,   83,  155,
      172,   84,   84,   84,  100,   84,   85,   98,   96,  101,
       96,   96,   98,   98,   98,   96,   83,  739,   63,  171,
       84,   84,   96,   84,   96,   98,   69,   98,   98,   96,
       99,   84,   98,  739,   85,  103,  104,  114,  170,   98,
      105,   98,   68,  110,  115,  156,   98,  111,  116,  112,
      106,  117,  113,   96,   96,  107,  167,   96,  126,  108,

      158,  127,  118,  119,  128,   96,  120,   96,  109,  135,
       98,   98,   96,  121,   98,  123,  122,  124,   96,   96,
      739,  175,   98,   96,   98,  138,  125,   96,  139,   98,
      102,   96,   93,   70,  136,   98,   98,  129,  137,   69,
       98,   60,  131,  739,   98,   96,   96,  130,   98,  132,
      133,  140,  147,  739,  134,  739,  141,  739,  153,  142,
      143,  176,   98,   98,  739,  154,  739,  149,  148,  739,
      144,  145,  150,  146,   96,  151,  739,   96,   96,   96,
       96,  152,   77,   77,   77,   77,   77,   77,   77,  739,
       96,   98,  739,  191,   98,   98,   98,   98,  159,  160,

      173,  160,  160,  160,  165,  739,  165,   98,  194,  166,
      166,  166,  166,  166,  166,  166,  159,  160,  197,  199,
      160,  160,   96,  160,  161,  161,  161,  161,  161,  161,
      161,   84,   84,   84,  177,   84,  193,   96,   96,   98,
      162,  163,  179,  163,  163,  163,  175,   96,  739,  739,
       84,   84,  739,   84,   98,   98,  739,  739,  162,  163,
       96,   84,  163,  163,   98,  163,   81,  739,   82,   82,
       82,   82,   82,   82,   82,   96,  178,   98,   96,  739,
       96,   96,  739,  739,   83,  739,  176,  164,  164,  164,
      192,  164,   98,   96,   96,   98,  196,   98,   98,  195,

      200,  739,   83,   96,   96,   96,  164,  164,   96,  164,
       98,   98,  739,   96,  739,  739,   96,  164,   96,   96,
       98,   98,   98,   96,   96,   98,  203,  739,   96,  204,
       98,  201,  198,   98,   96,   98,   98,  739,  202,  205,
       98,   98,  739,  739,  208,   98,  739,  739,  206,  739,
       96,   98,   96,  209,  207,  739,  739,  223,  180,  181,
      182,  183,  184,  185,  211,  210,  186,   98,   96,   98,
       96,  212,  213,  214,  187,  188,  189,   96,  190,  215,
       96,   96,  216,   96,  739,   98,  217,   98,   96,  218,
       96,  739,  219,   96,   98,   96,   96,   98,   98,   96,

       98,  220,   96,  739,   96,   98,   96,   98,  221,  222,
       98,  739,   98,   98,  739,  739,   98,  739,  228,   98,
      224,   98,  739,   98,  739,  739,  739,  739,  226,  229,
      237,  225,   96,  238,  227,   96,  230,  241,   96,  233,
      231,  232,  234,  242,  239,  235,  240,   96,  244,   98,
      243,   96,   98,  739,  739,   98,  739,  245,  739,  739,
       96,   96,  248,  236,   98,  253,  739,  253,   98,  739,
      254,  254,  254,  254,  254,  254,  254,   98,   98,  739,
      246,   96,   96,  249,  739,  739,  250,   96,  160,  247,
      160,  160,  160,  739,  739,  252,  251,  739,   98,   98,

      287,  164,  164,  164,   98,  164,  160,   96,  739,  160,
      160,  264,  160,  161,  161,  161,  161,  161,  161,  161,
      164,  164,  739,  164,   98,  274,  739,  739,  739,  255,
      256,  164,  256,  256,  256,  257,  265,  257,  739,  266,
      258,  258,  258,  258,  258,  258,  258,  255,  256,  739,
      739,  256,  256,  163,  256,  163,  163,  163,  166,  166,
      166,  166,  166,  166,  166,  739,  271,  261,   96,   96,
       96,  163,  739,  739,  163,  163,   96,  163,  166,  166,
      166,  166,  166,  166,  166,   98,   98,   98,  262,  262,
      262,  263,  262,   98,  739,  259,  739,  259,  259,  259,

      739,  739,  739,   96,  739,  739,   96,  262,  262,  267,
      262,  272,   96,  259,  263,   96,  259,  259,  262,  259,
       98,  268,  273,   98,   96,   96,   96,  269,  270,   98,
       96,   96,   98,   96,   96,   96,   96,  739,  275,  739,
       96,   98,   98,   98,   96,   96,  739,   98,   98,   96,
       98,   98,   98,   98,  276,   96,  278,   98,  739,  277,
       96,   98,   98,  279,  739,   96,   98,  739,   96,   96,
      739,  281,   98,  280,  286,  289,   96,   98,  739,  283,
      290,  285,   98,   96,  284,   98,   98,  282,  288,  295,
       96,  739,  739,   98,   96,  298,  291,   96,   96,   96,

       98,  292,  293,  294,   96,   96,   96,   98,  296,  299,
      739,   98,  301,   96,   98,   98,   98,  300,  297,   96,
      302,   98,   98,   98,  303,  739,   96,  305,   96,  739,
       98,  304,   96,   96,   96,   96,   98,   96,   96,  309,
       96,  307,  308,   98,   96,   98,  306,  314,  318,   98,
       98,   98,   98,   96,   98,   98,   96,   98,  739,   96,
      310,   98,  739,   96,   96,   96,   96,  311,   96,   96,
       98,  739,  315,   98,  313,  312,   98,   96,  317,  316,
       98,   98,   98,   98,  739,   98,   98,   96,  323,   96,
       96,  321,  320,   96,   98,  319,   96,  739,   96,   96,

       96,  322,  739,  739,   98,   96,   98,   98,   96,  328,
       98,  330,   96,   98,  324,   98,   98,   98,  325,  327,
      326,   96,   98,  739,   96,   98,  329,   96,  739,   98,
       96,  333,  331,  739,  739,   96,  739,   96,   98,  739,
      336,   98,   96,  739,   98,  342,  332,   98,  334,  739,
      335,  341,   98,  338,   98,   96,  337,  739,  340,   98,
      339,  739,  739,  343,  254,  254,  254,  254,  254,  254,
      254,  739,   98,   96,   96,  344,  254,  254,  254,  254,
      254,  254,  254,  258,  258,  258,  258,  258,  258,  258,
       98,   98,  357,  160,  360,  160,  160,  160,  345,  739,

      345,  358,  739,  346,  346,  346,  346,  346,  346,  346,
      739,  160,  739,  739,  160,  160,  256,  160,  256,  256,
      256,  354,  359,  354,  356,  739,  355,  355,  355,  355,
      355,  355,  355,  739,  256,  739,   96,  256,  256,   96,
      256,  258,  258,  258,  258,  258,  258,  258,  259,  739,
      259,  259,  259,   98,   96,  739,   98,   96,  163,  739,
      163,  163,  163,  739,  739,  739,  259,  739,  739,  259,
      259,   98,  259,  739,   98,  739,  163,  739,   96,  163,
      163,  347,  163,  348,  348,  348,  349,  362,  739,  351,
      367,  352,  352,  352,  353,   98,  262,  262,  262,  347,

      262,  363,  348,  348,   96,  348,   96,  351,   96,  349,
      352,  352,  361,  352,  739,  262,  262,  353,  262,   96,
       96,   98,   96,   98,   96,   98,  262,   96,   96,  739,
       96,  364,   96,   96,   96,   96,   98,   98,   96,   98,
       96,   98,  739,   96,   98,   98,  365,   98,   96,   98,
       98,   98,   98,   96,   96,   98,   96,   98,   96,  368,
       98,   96,  739,  372,  366,   98,  369,  739,  371,  739,
       98,   98,   96,   98,  376,   98,  370,  378,   98,  375,
      373,  377,  374,   96,  380,  739,  379,   96,   96,   98,
       96,   96,   96,   96,  384,   96,  383,  381,  385,  386,

       98,  382,  387,   96,   98,   98,   96,   98,   98,   98,
       98,   96,   98,   96,   96,   96,  739,  388,   96,   96,
       98,   96,   96,   98,  739,  389,   96,   96,   98,   96,
       98,   98,   98,  400,  739,   98,   98,  739,   98,   98,
      392,  390,  393,   98,   98,   96,   98,   96,   96,  391,
      739,  394,   96,   96,  395,  739,   96,  398,   96,   96,
      739,  396,   98,   96,   98,   98,  403,  397,  399,   98,
       98,  404,  401,   98,   96,   98,   98,  405,  402,   96,
       98,   96,   96,  739,   96,  739,  739,  739,   96,   96,
      739,   98,  739,  739,   96,  739,   98,   96,   98,   98,

      411,   98,  406,  414,  408,   98,   98,  413,  407,  409,
      410,   98,  412,   96,   98,  739,   96,   96,  739,   96,
       96,  416,   96,  739,  418,  739,  419,  739,   96,  739,
       98,  420,  417,   98,   98,  415,   98,   98,  348,   98,
      348,  348,  348,  422,   96,   98,   96,  421,  346,  346,
      346,  346,  346,  346,  346,  739,  348,  739,  739,  348,
      348,   98,  348,   98,  426,  352,  425,  352,  352,  352,
      739,   96,  423,   96,   96,  424,  346,  346,  346,  346,
      346,  346,  346,  352,  439,  438,  352,  352,   98,  352,
       98,   98,  436,  256,  739,  256,  256,  256,  427,  739,

      427,  739,  739,  428,  428,  428,  428,  428,  428,  428,
      739,  256,  739,  441,  256,  256,  429,  256,  430,  430,
      430,  431,  432,  739,  432,  435,   96,  433,  433,  433,
      433,  433,  433,  433,  429,  739,  739,  430,  430,  739,
      430,  739,   96,   98,  431,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,   98,
      739,   96,   96,   96,   96,   96,   96,  739,   96,  434,
      739,  434,  434,  434,  739,   96,  739,  440,   98,   98,
       98,   98,   98,   98,   96,   98,   96,  434,  437,   96,
      434,  434,   98,  434,   96,  447,  739,  739,   96,  448,

      739,   98,   96,   98,  445,   96,   98,  444,   96,   96,
       96,   98,   96,  443,  446,   98,  739,  451,  442,   98,
       96,  450,   98,  449,   96,   98,   98,   98,  739,   98,
      452,  739,  739,  453,  454,   96,   96,   98,  739,   96,
       96,   98,   96,  739,   96,  457,   96,   96,  459,  458,
       96,  455,   98,   98,   96,  456,   98,   98,  739,   98,
      461,   98,  739,   98,   98,  460,   96,   98,   96,  739,
      739,   98,   96,  739,  739,  462,   96,  739,   96,  463,
       96,   96,  739,   98,  466,   98,  467,  464,   96,   98,
      465,  470,   96,   98,  472,   98,   96,   98,   98,  468,

      739,  469,   96,  471,   96,   98,   96,   96,   96,   98,
       96,   96,   96,   98,  481,   96,   96,  474,   96,   98,
      475,   98,   96,   98,   98,   98,  473,   98,   98,   98,
       96,  739,   98,   98,   96,   98,  476,  739,  479,   98,
      739,  739,   96,  739,  739,  739,  477,   98,  478,   96,
       96,   98,   96,  484,  482,   96,  485,  486,  488,   98,
      480,  483,  490,  487,  739,   96,   98,   98,  739,   98,
       96,  739,   98,   96,  489,  739,   96,  491,  739,  739,
      739,  493,   98,  739,  739,  492,  494,   98,   96,  739,
       98,  739,  496,   98,   96,  498,  428,  428,  428,  428,

      428,  428,  428,  495,  430,   98,  430,  430,  430,  739,
       96,   98,  504,  497,  428,  428,  428,  428,  428,  428,
      428,  739,  430,   96,  514,  430,  430,   98,  430,  502,
      739,  348,  501,  348,  348,  348,  499,   96,  499,  739,
       98,  500,  500,  500,  500,  500,  500,  500,  739,  348,
      739,  509,  348,  348,   98,  348,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      434,  739,  434,  434,  434,  739,  503,  739,   96,   96,
      352,  739,  352,  352,  352,  505,   96,  739,  434,   96,
       96,  434,  434,   96,  434,   98,   98,   96,  352,   96,

       96,  352,  352,   98,  352,   96,   98,   98,   96,  513,
       98,   96,   96,  739,   98,   96,   98,   98,   96,  739,
       96,   96,   98,  739,   96,   98,   96,  739,   98,   98,
      507,  739,   98,   96,  739,   98,  506,   98,   98,   96,
      517,   98,  510,   98,  508,  739,  512,  739,  511,  516,
       98,  518,  739,  739,   96,  515,   98,   96,   96,  739,
       96,  739,  519,  739,  522,  739,  739,   96,   96,  523,
      520,   98,  521,  524,   98,   98,  525,   98,  526,   96,
      529,   96,  531,  530,   98,   98,  527,   96,  528,   96,
       96,   96,   96,   96,   96,   96,   98,   96,   98,  739,

       96,  533,   96,   96,   98,  739,   98,   98,   98,   98,
       98,   98,   98,   96,   98,   96,  532,   98,  534,   98,
       98,   96,  535,   96,   96,   96,   96,  739,  739,   96,
       98,   96,   98,  536,  538,   96,  739,  539,   98,   96,
       98,   98,   98,   98,  541,  542,   98,  537,   98,   96,
       96,   96,   98,  540,   96,   96,   98,  500,  500,  500,
      500,  500,  500,  500,   96,   96,   98,   98,   98,  739,
       96,   98,   98,   96,   96,  543,   96,  739,  739,  546,
       96,   98,   98,  544,  739,   96,  545,   98,  739,  547,
       98,   98,  739,   98,  548,  549,  552,   98,  739,   96,

       96,  550,   98,   96,  554,  551,  500,  500,  500,  500,
      500,  500,  500,   96,  560,  556,   98,   98,   96,  555,
       98,   96,   96,  430,  557,  430,  430,  430,  739,  562,
       98,   96,  553,   96,   96,   98,   96,  739,   98,   98,
      739,  430,   96,   96,  430,  430,   96,  430,   98,   96,
       98,   98,   96,   98,  558,   96,   96,  559,   96,   98,
       98,   96,  561,   98,  739,   96,   98,  739,   96,   98,
      563,   96,   98,   98,  564,   98,   96,  566,   98,  739,
       96,  567,   98,  739,  565,   98,   96,  739,   98,   96,
      568,  569,  739,   98,   96,  572,  571,   98,  739,  573,

      570,   96,   96,   98,  574,   96,   98,   96,   96,  577,
       96,   98,  575,   96,   96,  578,   96,  576,   98,   98,
       96,   96,   98,   96,   98,   98,  739,   98,  739,   96,
       98,   98,   96,   98,   96,   96,   96,   98,   98,  739,
       98,   96,   96,  581,  582,  579,   98,  739,   96,   98,
      580,   98,   98,   98,   96,  739,  586,   96,   98,   98,
      739,  739,  589,   96,  584,   98,   96,   96,  585,  739,
      583,   98,  590,  587,   98,   96,   96,  588,  591,  599,
       98,  739,   96,   98,   98,   96,  592,  594,  739,   96,
      739,   96,   98,   98,  739,   96,   96,  593,  597,   98,

       96,  739,   98,   96,  739,  600,   98,  595,   98,   96,
      596,  598,   98,   98,   96,   96,   96,   98,  601,  739,
       98,  602,   96,   96,   96,   96,   98,   96,  739,  739,
       96,   98,   98,   98,   96,   96,  603,   96,  739,   98,
       98,   98,   98,   96,   98,  606,  604,   98,   96,   96,
      605,   98,   98,   96,   98,  611,   96,  739,   96,  608,
       98,   96,   96,  613,  739,   98,   98,  607,  739,   96,
       98,  609,   96,   98,  617,   98,  612,  610,   98,   98,
       96,  616,  618,  614,   96,  615,   98,   96,  739,   98,
       96,  739,   96,  739,  739,  619,   96,   98,   96,   96,

       96,   98,   96,   96,   98,  621,  622,   98,  629,   98,
      620,  624,  739,   98,   96,   98,   98,   98,  739,   98,
       98,  739,  739,  626,  739,   96,  739,  739,   96,  627,
       96,   98,  623,   96,   96,  630,   96,   96,  625,  632,
       96,  633,   98,  634,  628,   98,   96,   98,  739,   96,
       98,   98,   96,   98,   98,   96,  631,   98,   96,   96,
      739,  636,   96,   98,   96,  637,   98,  635,  638,   98,
       96,   96,   98,   96,  739,   98,   98,  640,  639,   98,
      641,   98,   96,   96,   96,  652,   96,   98,   98,  642,
       98,  643,   96,  644,   96,   96,   96,  645,   96,   98,

       98,   98,   96,   98,   96,   96,  646,   96,  647,   98,
      648,   98,   98,   98,   96,   98,  739,  649,  739,   98,
      739,   98,   98,   96,   98,  739,  739,   96,   96,   96,
       96,   98,   96,  654,   96,  655,  650,  653,   96,   96,
       98,  656,  651,  657,   98,   98,   98,   98,   96,   98,
       96,   98,   96,  739,   96,   98,   98,  739,   96,   96,
      659,   96,   96,   96,  739,   98,  658,   98,  739,   98,
      660,   98,  662,   96,  665,   98,   98,   96,   98,   98,
       98,  667,   96,  739,  663,  661,  664,  668,   96,   96,
       98,  666,  670,  673,   98,  669,   96,  674,   96,   98,

      675,   96,   96,   96,   96,   98,   98,   96,   96,  739,
       96,   96,   96,   98,  676,   98,  739,   96,   98,   98,
       98,   98,   96,   96,   98,   98,  677,   98,   98,   98,
      739,   96,  739,  680,   98,   96,  739,  678,   96,   98,
       98,   96,  685,  739,  679,  739,  686,  683,   98,  687,
      688,  689,   98,  681,   96,   98,  682,   96,   98,   96,
      684,  691,  692,   96,  739,  739,   96,  739,  690,   96,
       96,   98,   96,   96,   98,   96,   98,   96,   96,   96,
       98,  693,  695,   98,  694,   96,   98,   98,   96,   98,
       98,   96,   98,   96,   98,   98,   98,   96,   96,   96,

      739,   96,   98,  696,   96,   98,  698,  739,   98,  700,
       98,  739,  739,   96,   98,   98,   98,  699,   98,   96,
      697,   98,  739,   96,  704,   96,  702,  739,  701,  706,
       98,  739,   96,   96,  705,   96,   98,   96,  703,  708,
       98,  739,   98,   96,  707,   96,   96,   96,  709,   98,
       98,   96,   98,   96,   98,  710,   96,  712,  711,   96,
       98,   96,   98,   98,   98,  714,  739,   96,   98,   96,
       98,  713,   96,   98,  739,   96,   98,  719,   98,   96,
      715,  716,   96,  717,   98,   96,   98,  739,  718,   98,
       96,  720,   98,   96,   96,  725,   98,  739,   96,   98,

      722,  723,   98,  721,  726,   96,  739,   98,   96,   96,
       98,   98,  729,   96,  724,   98,  727,   96,  739,  739,
      728,  739,   98,  730,  739,   98,   98,  739,  739,  739,
       98,  739,  739,  739,   98,  739,  739,  733,  739,  739,
      739,  735,  739,  731,  739,  739,  732,  737,  739,  739,
      739,  739,  734,  739,  739,  739,  738,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  736,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   68,   68,
      739,   68,   68,   68,   68,   68,   68,   97,  739,  739,
      739,   97,   97,   97,   97,  168,  168,  168,  169,  169,

      169,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      260,  260,  350,  350,  739,  350,  672,  739,  672,  672,
      672,  672,    3,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739
    } ;

static yyconst short int yy_chk[2903] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   10,
       13,   13,   14,   19,  672,   22,   21,   22,   22,   22,
       22,   22,   22,   22,   30,   30,   23,  652,   19,   21,

       21,   23,   14,  176,   32,   25,   25,   25,   25,   25,
       25,   25,   23,   26,   28,  101,   33,   26,   61,   10,
       24,   32,   24,   24,   24,   24,   24,   24,   24,   25,
       39,   68,   28,   33,   28,   28,   40,   41,   24,   57,
       98,   24,   24,   24,   34,   24,   24,   39,   34,   34,
       44,   38,   96,   40,   41,   47,   24,   25,   61,   95,
       24,   24,   42,   24,   43,   34,   68,   44,   38,   49,
       33,   24,   47,   69,   24,   38,   38,   41,   91,   42,
       38,   43,   69,   39,   41,   57,   49,   39,   41,   39,
       38,   41,   40,   45,   48,   38,   85,   46,   44,   38,

       76,   44,   42,   42,   44,   52,   42,   50,   38,   47,
       45,   48,   51,   42,   46,   43,   42,   43,   55,   53,
       63,  100,   52,   97,   50,   49,   43,   54,   49,   51,
       37,  107,   29,   18,   48,   55,   53,   45,   48,   15,
       97,    9,   46,    3,   54,  110,   99,   45,  107,   46,
       46,   50,   52,    0,   46,    0,   51,    0,   55,   51,
       51,  100,  110,   99,    0,   55,    0,   53,   52,    0,
       51,   51,   53,   51,  113,   54,    0,  131,  109,  115,
      103,   54,   77,   77,   77,   77,   77,   77,   77,    0,
      105,  113,    0,  107,  131,  109,  115,  103,   77,   77,

       99,   77,   77,   77,   83,    0,   83,  105,  110,   83,
       83,   83,   83,   83,   83,   83,   77,   77,  113,  115,
       77,   77,  104,   77,   81,   81,   81,   81,   81,   81,
       81,   84,   84,   84,  103,   84,  109,  108,  112,  104,
       81,   81,  105,   81,   81,   81,  174,  111,    0,    0,
       84,   84,    0,   84,  108,  112,    0,    0,   81,   81,
      116,   84,   81,   81,  111,   81,   82,    0,   82,   82,
       82,   82,   82,   82,   82,  114,  104,  116,  117,    0,
      118,  119,    0,    0,   82,    0,  174,   82,   82,   82,
      108,   82,  114,  121,  122,  117,  112,  118,  119,  111,

      116,    0,   82,  120,  135,  124,   82,   82,  123,   82,
      121,  122,    0,  125,    0,    0,  126,   82,  106,  127,
      120,  135,  124,  128,  129,  123,  119,    0,  130,  119,
      125,  117,  114,  126,  132,  106,  127,    0,  118,  119,
      128,  129,    0,    0,  121,  130,    0,    0,  120,    0,
      133,  132,  134,  122,  120,    0,    0,  135,  106,  106,
      106,  106,  106,  106,  124,  123,  106,  133,  136,  134,
      137,  125,  126,  127,  106,  106,  106,  139,  106,  128,
      138,  141,  129,  140,    0,  136,  130,  137,  142,  132,
      144,    0,  133,  148,  139,  146,  145,  138,  141,  143,

      140,  133,  147,    0,  149,  142,  151,  144,  133,  134,
      148,    0,  146,  145,    0,    0,  143,    0,  139,  147,
      136,  149,    0,  151,    0,    0,    0,    0,  138,  140,
      144,  137,  150,  144,  138,  152,  140,  145,  153,  141,
      140,  140,  142,  146,  144,  143,  144,  154,  148,  150,
      147,  169,  152,    0,    0,  153,    0,  149,    0,    0,
      173,  194,  151,  143,  154,  159,    0,  159,  169,    0,
      159,  159,  159,  159,  159,  159,  159,  173,  194,    0,
      150,  183,  177,  152,    0,    0,  152,  178,  160,  150,
      160,  160,  160,    0,    0,  154,  153,    0,  183,  177,

      194,  164,  164,  164,  178,  164,  160,  181,    0,  160,
      160,  173,  160,  161,  161,  161,  161,  161,  161,  161,
      164,  164,    0,  164,  181,  183,    0,    0,    0,  161,
      161,  164,  161,  161,  161,  162,  177,  162,    0,  178,
      162,  162,  162,  162,  162,  162,  162,  161,  161,    0,
        0,  161,  161,  163,  161,  163,  163,  163,  165,  165,
      165,  165,  165,  165,  165,    0,  181,  168,  182,  179,
      180,  163,    0,    0,  163,  163,  184,  163,  166,  166,
      166,  166,  166,  166,  166,  182,  179,  180,  168,  168,
      168,  168,  168,  184,    0,  166,    0,  166,  166,  166,

        0,    0,    0,  185,    0,    0,  186,  168,  168,  179,
      168,  182,  187,  166,  168,  188,  166,  166,  168,  166,
      185,  180,  182,  186,  189,  190,  191,  180,  180,  187,
      192,  193,  188,  195,  196,  197,  198,    0,  184,    0,
      199,  189,  190,  191,  200,  201,    0,  192,  193,  202,
      195,  196,  197,  198,  185,  205,  187,  199,    0,  186,
      203,  200,  201,  188,    0,  204,  202,    0,  207,  206,
        0,  189,  205,  188,  193,  197,  208,  203,    0,  190,
      198,  192,  204,  210,  191,  207,  206,  189,  196,  202,
      209,    0,    0,  208,  211,  205,  199,  212,  213,  214,

      210,  200,  201,  201,  215,  216,  217,  209,  203,  206,
        0,  211,  207,  218,  212,  213,  214,  206,  204,  219,
      208,  215,  216,  217,  208,    0,  220,  210,  222,    0,
      218,  209,  221,  223,  224,  226,  219,  227,  225,  214,
      228,  212,  213,  220,  230,  222,  211,  221,  225,  221,
      223,  224,  226,  229,  227,  225,  231,  228,    0,  232,
      217,  230,    0,  233,  234,  236,  235,  218,  237,  238,
      229,    0,  222,  231,  220,  219,  232,  239,  224,  223,
      233,  234,  236,  235,    0,  237,  238,  240,  230,  241,
      242,  228,  227,  243,  239,  226,  244,    0,  245,  246,

      248,  229,    0,    0,  240,  250,  241,  242,  249,  236,
      243,  238,  247,  244,  231,  245,  246,  248,  232,  235,
      234,  251,  250,    0,  252,  249,  237,  264,    0,  247,
      288,  241,  239,    0,    0,  290,    0,  266,  251,    0,
      244,  252,  269,    0,  264,  250,  240,  288,  242,    0,
      243,  249,  290,  246,  266,  267,  245,    0,  248,  269,
      247,    0,    0,  251,  253,  253,  253,  253,  253,  253,
      253,    0,  267,  265,  268,  252,  254,  254,  254,  254,
      254,  254,  254,  257,  257,  257,  257,  257,  257,  257,
      265,  268,  266,  254,  269,  254,  254,  254,  255,    0,

      255,  267,    0,  255,  255,  255,  255,  255,  255,  255,
        0,  254,    0,    0,  254,  254,  256,  254,  256,  256,
      256,  263,  268,  263,  265,    0,  263,  263,  263,  263,
      263,  263,  263,    0,  256,    0,  276,  256,  256,  271,
      256,  258,  258,  258,  258,  258,  258,  258,  259,    0,
      259,  259,  259,  276,  270,    0,  271,  272,  258,    0,
      258,  258,  258,    0,    0,    0,  259,    0,    0,  259,
      259,  270,  259,    0,  272,    0,  258,    0,  273,  258,
      258,  260,  258,  260,  260,  260,  260,  271,    0,  261,
      276,  261,  261,  261,  261,  273,  262,  262,  262,  260,

      262,  272,  260,  260,  274,  260,  275,  261,  277,  260,
      261,  261,  270,  261,    0,  262,  262,  261,  262,  278,
      280,  274,  279,  275,  281,  277,  262,  282,  283,    0,
      284,  273,  287,  285,  289,  286,  278,  280,  291,  279,
      292,  281,    0,  293,  282,  283,  274,  284,  294,  287,
      285,  289,  286,  295,  296,  291,  297,  292,  299,  277,
      293,  298,    0,  280,  275,  294,  277,    0,  279,    0,
      295,  296,  300,  297,  284,  299,  278,  286,  298,  283,
      281,  285,  282,  301,  289,    0,  287,  302,  303,  300,
      305,  304,  306,  308,  295,  307,  294,  292,  296,  297,

      301,  293,  298,  309,  302,  303,  310,  305,  304,  306,
      308,  311,  307,  312,  315,  313,    0,  299,  316,  314,
      309,  317,  318,  310,    0,  300,  319,  320,  311,  321,
      312,  315,  313,  314,    0,  316,  314,    0,  317,  318,
      303,  301,  304,  319,  320,  322,  321,  323,  324,  302,
        0,  307,  326,  325,  308,    0,  327,  312,  328,  329,
        0,  309,  322,  330,  323,  324,  319,  311,  313,  326,
      325,  320,  315,  327,  331,  328,  329,  321,  317,  332,
      330,  333,  334,    0,  335,    0,    0,    0,  336,  337,
        0,  331,    0,    0,  338,    0,  332,  339,  333,  334,

      327,  335,  322,  330,  324,  336,  337,  329,  323,  325,
      326,  338,  328,  340,  339,    0,  341,  342,    0,  343,
      344,  332,  356,    0,  334,    0,  335,    0,  361,    0,
      340,  336,  333,  341,  342,  331,  343,  344,  348,  356,
      348,  348,  348,  339,  358,  361,  360,  338,  345,  345,
      345,  345,  345,  345,  345,    0,  348,    0,    0,  348,
      348,  358,  348,  360,  344,  352,  343,  352,  352,  352,
        0,  363,  340,  380,  357,  342,  346,  346,  346,  346,
      346,  346,  346,  352,  361,  360,  352,  352,  363,  352,
      380,  357,  358,  346,    0,  346,  346,  346,  349,    0,

      349,    0,    0,  349,  349,  349,  349,  349,  349,  349,
        0,  346,    0,  363,  346,  346,  350,  346,  350,  350,
      350,  350,  353,    0,  353,  357,  362,  353,  353,  353,
      353,  353,  353,  353,  350,    0,    0,  350,  350,    0,
      350,    0,  359,  362,  350,  354,  354,  354,  354,  354,
      354,  354,  355,  355,  355,  355,  355,  355,  355,  359,
        0,  364,  365,  366,  367,  370,  368,    0,  371,  355,
        0,  355,  355,  355,    0,  372,    0,  362,  364,  365,
      366,  367,  370,  368,  369,  371,  373,  355,  359,  374,
      355,  355,  372,  355,  375,  369,    0,    0,  376,  369,

        0,  369,  377,  373,  367,  378,  374,  366,  379,  381,
      382,  375,  383,  365,  368,  376,    0,  372,  364,  377,
      384,  371,  378,  370,  385,  379,  381,  382,    0,  383,
      373,    0,    0,  374,  375,  386,  387,  384,    0,  388,
      389,  385,  390,    0,  391,  378,  392,  393,  381,  379,
      394,  376,  386,  387,  395,  377,  388,  389,    0,  390,
      384,  391,    0,  392,  393,  383,  396,  394,  397,    0,
        0,  395,  398,    0,    0,  385,  399,    0,  400,  386,
      401,  402,    0,  396,  389,  397,  390,  387,  403,  398,
      388,  393,  404,  399,  395,  400,  405,  401,  402,  391,

        0,  392,  406,  394,  407,  403,  408,  410,  409,  404,
      411,  412,  414,  405,  407,  413,  416,  398,  415,  406,
      399,  407,  417,  408,  410,  409,  397,  411,  412,  414,
      418,    0,  413,  416,  419,  415,  402,    0,  405,  417,
        0,    0,  420,    0,    0,    0,  403,  418,  404,  421,
      422,  419,  423,  411,  408,  425,  412,  413,  415,  420,
      406,  409,  417,  414,    0,  424,  421,  422,    0,  423,
      426,    0,  425,  438,  416,    0,  436,  418,    0,    0,
        0,  420,  424,    0,    0,  419,  420,  426,  435,    0,
      438,    0,  423,  436,  443,  425,  427,  427,  427,  427,

      427,  427,  427,  422,  430,  435,  430,  430,  430,    0,
      448,  443,  438,  424,  428,  428,  428,  428,  428,  428,
      428,    0,  430,  437,  448,  430,  430,  448,  430,  436,
        0,  428,  435,  428,  428,  428,  431,  439,  431,    0,
      437,  431,  431,  431,  431,  431,  431,  431,    0,  428,
        0,  443,  428,  428,  439,  428,  432,  432,  432,  432,
      432,  432,  432,  433,  433,  433,  433,  433,  433,  433,
      434,    0,  434,  434,  434,    0,  437,    0,  440,  441,
      433,    0,  433,  433,  433,  439,  442,    0,  434,  444,
      445,  434,  434,  446,  434,  440,  441,  447,  433,  449,

      451,  433,  433,  442,  433,  450,  444,  445,  453,  447,
      446,  452,  454,    0,  447,  455,  449,  451,  457,    0,
      456,  460,  450,    0,  458,  453,  461,    0,  452,  454,
      441,    0,  455,  459,    0,  457,  440,  456,  460,  462,
      451,  458,  444,  461,  442,    0,  446,    0,  445,  450,
      459,  452,    0,    0,  463,  449,  462,  464,  466,    0,
      465,    0,  453,    0,  456,    0,    0,  467,  468,  457,
      454,  463,  455,  458,  464,  466,  459,  465,  459,  469,
      460,  470,  462,  461,  467,  468,  459,  471,  459,  472,
      473,  474,  475,  477,  476,  478,  469,  479,  470,    0,

      480,  464,  481,  482,  471,    0,  472,  473,  474,  475,
      477,  476,  478,  483,  479,  484,  463,  480,  465,  481,
      482,  485,  468,  486,  487,  488,  489,    0,    0,  490,
      483,  491,  484,  469,  476,  493,    0,  477,  485,  492,
      486,  487,  488,  489,  480,  482,  490,  472,  491,  494,
      496,  495,  493,  478,  497,  498,  492,  499,  499,  499,
      499,  499,  499,  499,  502,  503,  494,  496,  495,    0,
      501,  497,  498,  504,  505,  487,  506,    0,    0,  492,
      507,  502,  503,  488,    0,  508,  490,  501,    0,  493,
      504,  505,    0,  506,  494,  495,  498,  507,    0,  509,

      510,  496,  508,  511,  502,  497,  500,  500,  500,  500,
      500,  500,  500,  513,  511,  505,  509,  510,  512,  503,
      511,  514,  515,  500,  506,  500,  500,  500,    0,  513,
      513,  516,  501,  517,  518,  512,  519,    0,  514,  515,
        0,  500,  520,  521,  500,  500,  522,  500,  516,  523,
      517,  518,  524,  519,  509,  525,  526,  510,  527,  520,
      521,  528,  512,  522,    0,  529,  523,    0,  531,  524,
      515,  530,  525,  526,  516,  527,  532,  518,  528,    0,
      533,  519,  529,    0,  517,  531,  534,    0,  530,  535,
      520,  521,    0,  532,  536,  525,  524,  533,    0,  525,

      523,  537,  538,  534,  526,  539,  535,  540,  541,  529,
      542,  536,  527,  543,  544,  530,  545,  528,  537,  538,
      546,  547,  539,  548,  540,  541,    0,  542,    0,  549,
      543,  544,  550,  545,  551,  552,  553,  546,  547,    0,
      548,  554,  555,  537,  538,  535,  549,    0,  556,  550,
      536,  551,  552,  553,  558,    0,  544,  557,  554,  555,
        0,    0,  547,  559,  541,  556,  561,  560,  542,    0,
      540,  558,  549,  545,  557,  562,  563,  546,  551,  560,
      559,    0,  564,  561,  560,  565,  552,  555,    0,  566,
        0,  567,  562,  563,    0,  568,  569,  554,  558,  564,

      570,    0,  565,  571,    0,  561,  566,  556,  567,  572,
      557,  559,  568,  569,  573,  574,  575,  570,  563,    0,
      571,  564,  576,  577,  578,  579,  572,  580,    0,    0,
      582,  573,  574,  575,  581,  584,  565,  585,    0,  576,
      577,  578,  579,  583,  580,  571,  568,  582,  586,  587,
      569,  581,  584,  588,  585,  575,  589,    0,  590,  573,
      583,  591,  592,  578,    0,  586,  587,  572,    0,  593,
      588,  573,  594,  589,  582,  590,  576,  574,  591,  592,
      595,  581,  583,  579,  596,  580,  593,  597,    0,  594,
      598,    0,  599,    0,    0,  586,  600,  595,  601,  604,

      602,  596,  603,  606,  597,  589,  592,  598,  599,  599,
      588,  594,    0,  600,  605,  601,  604,  602,    0,  603,
      606,    0,    0,  596,    0,  607,    0,    0,  608,  597,
      609,  605,  593,  610,  612,  600,  611,  613,  595,  602,
      614,  603,  607,  604,  598,  608,  615,  609,    0,  616,
      610,  612,  617,  611,  613,  618,  601,  614,  619,  620,
        0,  606,  622,  615,  621,  607,  616,  605,  608,  617,
      623,  624,  618,  625,    0,  619,  620,  610,  609,  622,
      611,  621,  626,  627,  628,  627,  629,  623,  624,  612,
      625,  613,  630,  616,  631,  632,  633,  618,  636,  626,

      627,  628,  634,  629,  635,  637,  619,  638,  621,  630,
      624,  631,  632,  633,  639,  636,    0,  625,    0,  634,
        0,  635,  637,  641,  638,    0,    0,  640,  642,  643,
      644,  639,  648,  631,  645,  633,  626,  628,  646,  647,
      641,  634,  626,  635,  640,  642,  643,  644,  649,  648,
      650,  645,  651,    0,  653,  646,  647,    0,  654,  655,
      639,  656,  657,  658,    0,  649,  638,  650,    0,  651,
      640,  653,  642,  659,  645,  654,  655,  660,  656,  657,
      658,  647,  661,    0,  643,  641,  644,  649,  662,  663,
      659,  646,  651,  653,  660,  650,  664,  654,  665,  661,

      656,  666,  667,  668,  669,  662,  663,  674,  675,    0,
      676,  670,  673,  664,  658,  665,    0,  677,  666,  667,
      668,  669,  678,  679,  674,  675,  659,  676,  670,  673,
        0,  680,    0,  663,  677,  681,    0,  661,  682,  678,
      679,  683,  668,    0,  662,    0,  668,  666,  680,  669,
      670,  673,  681,  664,  684,  682,  665,  685,  683,  686,
      667,  677,  678,  687,    0,    0,  688,    0,  676,  689,
      690,  684,  691,  692,  685,  693,  686,  694,  695,  696,
      687,  679,  682,  688,  680,  697,  689,  690,  698,  691,
      692,  699,  693,  700,  694,  695,  696,  701,  702,  703,

        0,  705,  697,  686,  704,  698,  688,    0,  699,  690,
      700,    0,    0,  706,  701,  702,  703,  688,  705,  707,
      687,  704,    0,  708,  695,  709,  692,    0,  691,  697,
      706,    0,  711,  712,  696,  710,  707,  713,  693,  699,
      708,    0,  709,  714,  698,  715,  716,  717,  700,  711,
      712,  718,  710,  719,  713,  702,  721,  705,  704,  720,
      714,  722,  715,  716,  717,  707,    0,  723,  718,  724,
      719,  706,  725,  721,    0,  726,  720,  712,  722,  727,
      708,  709,  728,  710,  723,  729,  724,    0,  711,  725,
      730,  713,  726,  731,  732,  719,  727,    0,  733,  728,

      716,  717,  729,  715,  720,  734,    0,  730,  735,  736,
      731,  732,  725,  738,  718,  733,  722,  737,    0,    0,
      723,    0,  734,  727,    0,  735,  736,    0,    0,    0,
      738,    0,    0,    0,  737,    0,    0,  731,    0,    0,
        0,  733,    0,  729,    0,    0,  730,  735,    0,    0,
        0,    0,  732,    0,    0,    0,  737,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  734,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  741,  741,
        0,  741,  741,  741,  741,  741,  741,  742,    0,    0,
        0,  742,  742,  742,  742,  743,  743,  743,  744,  744,

      744,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      746,  746,  747,  747,    0,  747,  748,    0,  748,  748,
      748,  748,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1301 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1461 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 740 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2823 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(BUILTIN_OFFSETOF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(INT128); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(FLOAT128); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 70:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 151:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return(';'); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return('{'); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return('}'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return(','); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return(':'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return('='); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return('('); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return(')'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return('['); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return(']'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('.'); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return('&'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return('!'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return('~'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return('-'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('+'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('*'); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return('/'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('%'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('<'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return('>'); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 282 "lexer.l"
{ return('^'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 283 "lexer.l"
{ return('|'); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 284 "lexer.l"
{ return('?'); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 285 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 287 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 313 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 314 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 319 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 324 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 325 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 332 "lexer.l"
ECHO;
	YY_BREAK
#line 2515 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 740 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 740 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 739);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 332 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            const char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
